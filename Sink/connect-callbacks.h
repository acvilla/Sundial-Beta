// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __CONNECT_CALLBACKS__
#define __CONNECT_CALLBACKS__


#include PLATFORM_HEADER
#include CONFIGURATION_HEADER
#include "stack/include/ember.h"
#include "command-interpreter/command-interpreter.h"
#include "mailbox/mailbox-client/mailbox-client.h"
#include "mailbox/mailbox-server/mailbox-server.h"
#include "hal/hal.h"
#include "serial/serial.h"


/** @brief Main Application Entry Point
 *
 * This is the main application entry point. All applications
 * must implement this function.
 */
int main(MAIN_FUNCTION_PARAMETERS);

// The Simulated EEPROM callback function, implemented by the
// application.
void halSimEepromCallback(EmberStatus status);

// Handler called whenever the radio is powered on.
void halRadioPowerUpHandler(void);

// Handler called whenever the radio is powered off.
void halRadioPowerDownHandler(void);

/** @brief Ok To Sleep
 *
 * This function is called by the Idle/Sleep plugin before sleeping.  It is
 * called with interrupts disabled.  The application should return TRUE if the
 * device may sleep or FALSE otherwise.
 *
 * @param durationMs The maximum duration in milliseconds that the device will
 * sleep.  Ver.: always
 */
bool emberAfPluginIdleSleepOkToSleepCallback(uint32_t durationMs);

/** @brief Wake Up
 *
 * This function is called by the Idle/Sleep plugin after sleeping.
 *
 * @param durationMs The duration in milliseconds that the device slept.  Ver.:
 * always
 */
void emberAfPluginIdleSleepWakeUpCallback(uint32_t durationMs);

/** @brief Ok To Idle
 *
 * This function is called by the Idle/Sleep plugin before idling.  It is called
 * with interrupts disabled.  The application should return TRUE if the device
 * may idle or FALSE otherwise.
 *
 */
bool emberAfPluginIdleSleepOkToIdleCallback(void);

/** @brief Active
 *
 * This function is called by the Idle/Sleep plugin after idling.
 *
 */
void emberAfPluginIdleSleepActiveCallback(void);

/** @brief Mailbox Client Message Submit
 *
 * A callback that is invoked after a successful
 * ::emberAfPluginMailboxClientMessageSubmit() API call.
 *
 *  @param status   An ::EmberAfMailboxStatus value of:
 *  - ::EMBER_MAILBOX_STATUS_SUCCESS if the data message was accepted by the
 *  mailbox server.
 *  - ::EMBER_MAILBOX_STATUS_STACK_ERROR if the message couldn't be delivered
 *  to the mailbox server.
 *  - ::EMBER_MAILBOX_STATUS_MESSAGE_NO_RESPONSE if the client timed-out
 *  waiting for a response from the server.
 *  - ::EMBER_MAILBOX_STATUS_MESSAGE_TABLE_FULL if the mailbox server table is
 *  currently full.
 *  - ::EMBER_MAILBOX_STATUS_MESSAGE_NO_BUFFERS if the server could not
 *  allocate enough memory to store the message.
 *
 *  @param mailboxServer   The mailbox server short ID.
 *
 *  @param messageDestination   The message destination short ID.
 *
 *  @param tag   The tag value passed in the
 *  ::emberAfPluginMailboxClientMessageSubmit() API.
 */
void emberAfPluginMailboxClientMessageSubmitCallback(EmberAfMailboxStatus status,
                                                     EmberNodeId mailboxServer,
                                                     EmberNodeId messageDestination,
                                                     uint8_t tag);

/** @brief Mailbox Client Message Delivered
 *
 * A callback that might be invoked if the a message that was submitted
 * to a mailbox server has reached its final destination or it timed-out.
 * Notice that this callback is not guaranteed to be called, if the status
 * message from the server is lost, this callback won't be called.
 *
 * @param status    An ::EmberAfMailboxStatus value of:
 * - ::EMBER_MAILBOX_STATUS_SUCCESS indicates that the message was successfully
 *   delivered to the final destination.
 * - ::EMBER_MAILBOX_STATUS_MESSAGE_TIMED_OUT indicates that the message
 *   timed-out and was removed from the server queue.
 *
 * @param mailboxServer   The mailbox server short ID the message was submitted
 * to.
 *
 * @param messageDestination   The message destination.
 *
 * @param tag   The message tag.
 */
void emberAfPluginMailboxClientMessageDeliveredCallback(EmberAfMailboxStatus status,
                                                        EmberNodeId mailboxServer,
                                                        EmberNodeId messageDestination,
                                                        uint8_t tag);

/** @brief Mailbox Client Check Inbox
 *
 * This callback is invoked asynchronously after a successful call to the
 * ::emberAfPluginMailboxClientCheckInbox() API. If a message was retrieved
 * from the mailbox server, this callback passes it to the application,
 * otherwise it indicates to the application the reason of failure.
 *
 *  @param status    An ::EmberAfMailboxStatus value of:
 * - ::EMBER_MAILBOX_STATUS_SUCCESS if a message was retrieved from the mailbox
 * server.
 * - ::EMBER_MAILBOX_STATUS_MESSAGE_NO_DATA if the server has currently no
 * message for this mailbox client.
 * - ::EMBER_MAILBOX_STATUS_MESSAGE_NO_RESPONSE if the client timed-out waiting
 * for a query response from the mailbox server.
 * - ::EMBER_MAILBOX_STATUS_STACK_ERROR if the stack failed to deliver the
 * query message to the mailbox server.
 *
 *  @param messageSource   The source node address of the retrieved message.
 *  Notice that this parameter is meaningful only if the status parameter has
 *  an ::EmberAfMailboxStatus value of ::EMBER_MAILBOX_STATUS_SUCCESS.
 *
 *  @param message   A pointer to the retrieved message payload. Notice that
 *  this parameter is meaningful only if the status parameter has an
 *  ::EmberAfMailboxStatus value of ::EMBER_MAILBOX_STATUS_SUCCESS.
 *
 *  @param messageLength   The length in bytes of the retrived message payload.
 *  Notice that this parameter is meaningful only if the status parameter has
 *  an ::EmberAfMailboxStatus value of ::EMBER_MAILBOX_STATUS_SUCCESS.
 *
 *  @param tag   The tag value used by the source mailbox client.
 *  Notice that this parameter is meaningful only if the status parameter has
 *  an ::EmberAfMailboxStatus value of ::EMBER_MAILBOX_STATUS_SUCCESS.
 *
 *  @param moreMessages   This flag indicates whether the mailbox server has
 *  more pending messages for this mailbox client. Notice that this parameter
 *  is meaningful only if the status parameter has an ::EmberAfMailboxStatus
 *  value of ::EMBER_MAILBOX_STATUS_SUCCESS.
 */
void emberAfPluginMailboxClientCheckInboxCallback(EmberAfMailboxStatus status,
                                                  EmberNodeId mailboxServer,
                                                  EmberNodeId messageSource,
                                                  uint8_t *message,
                                                  EmberMessageLength messageLength,
                                                  uint8_t tag,
                                                  bool moreMessages);

/** @brief Mailbox Server Message Delivered
 *
 * This callback is invoked at the server when a message submitted locally by
 * the server was successfully delivered or timed-out.
 *
 * @param status    An ::EmberAfMailboxStatus value of:
 * - ::EMBER_MAILBOX_STATUS_SUCCESS indicates that the message was successfully
 *   delivered to the final destination.
 * - ::EMBER_MAILBOX_STATUS_MESSAGE_TIMED_OUT indicates that the message
 *   timed-out and was removed from the server queue.
 *
 * @param messageDestination   The message destination.
 *
 * @param tag   The message tag.
 */
void emberAfPluginMailboxServerMessageDeliveredCallback(EmberAfMailboxStatus status,
                                                        EmberNodeId messageDestination,
                                                        uint8_t tag);

/** @brief Main Init
 *
 * This function is called when the application starts and can be used to
 * perform any additional initialization required at system startup.
 */
void emberAfMainInitCallback(void);

/** @brief Main Tick
 *
 * This function is called in each iteration of the main application loop and
 * can be used to perform periodic functions.  The frequency with which this
 * function is called depends on how quickly the main loop runs.  If the
 * application blocks at any time during the main loop, this function will not
 * be called until execution resumes. Sleeping and idling will block.
 */
void emberAfMainTickCallback(void);

/** @brief Stack Status
 *
 * This function is called when the stack status changes.  This callbacks
 * provides applications an opportunity to be notified of changes to the stack
 * status and take appropriate action.
 *
 * @param status   Ver.: always
 */
void emberAfStackStatusCallback(EmberStatus status);

/** @brief Incoming Message
 *
 * This function is called when a message is received.
 *
 * @param message   Ver.: always
 */
void emberAfIncomingMessageCallback(EmberIncomingMessage *message);

/** @brief Message Sent
 *
 * This function is called to indicate whether an outgoing message was 
 * successfully transmitted or to indicate the reason of failure.
 *
 * @param status    Ver.: always
 * @param message   Ver.: always
 */
void emberAfMessageSentCallback(EmberStatus status, 
                                EmberOutgoingMessage *message);

/** @brief Child Join
 *
 * This function is called when a node has joined the network.
 *
 * @param nodeType   Ver.: always
 * @param nodeId     Ver.: always
 */
void emberAfChildJoinCallback(EmberNodeType nodeType,
                              EmberNodeId nodeId);

/** @brief Active Scan Complete
 *
 * This function is called when a node has completed an active scan.
 */
void emberAfActiveScanCompleteCallback(void);

/** @brief Child Join
 *
 * This function is called when a node has joined the network.
 *
 * @param mean       Ver.: always
 * @param min        Ver.: always
 * @param max        Ver.: always
 * @param variance   Ver.: always
 */
void emberAfEnergyScanCompleteCallback(int8_t mean,
                                       int8_t min,
                                       int8_t max,
                                       uint16_t variance);

/** @brief Incoming Beacon
 *
 * This function is called when a node is performing an active scan and a beacon
 * is received.
 *
 * @param panId          Ver.: always
 * @param nodeId         Ver.: always
 * @param payloadLength  Ver.: always
 * @param payload        Ver.: always
 */
void emberAfIncomingBeaconCallback(EmberPanId panId,
                                   EmberNodeId nodeId,
                                   uint8_t payloadLength,
                                   uint8_t *payload);

/** @brief Mark Application Buffers
 *
 * This function is called when the application must mark its buffers.  Buffers
 * that are not marked will be reclaimed by the stack.
 */
void emberAfMarkApplicationBuffersCallback(void);

void emberIncomingMessageHandler(EmberIncomingMessage *message);

void emberMessageSentHandler(EmberStatus status, EmberOutgoingMessage *message);

void emberStackStatusHandler(EmberStatus status);

void emberStackIsrHandler(void);

void emberMarkApplicationBuffersHandler(void);

void emberChildJoinHandler(EmberNodeType nodeType,
                           EmberNodeId nodeId);

void emberIncomingBeaconHandler(EmberPanId panId,
                                EmberNodeId nodeId,
                                uint8_t payloadLength,
                                uint8_t *payload);

void emberActiveScanCompleteHandler(void);

void emberEnergyScanCompleteHandler(int8_t mean,
                                    int8_t min,
                                    int8_t max,
                                    uint16_t variance);

#endif // __CONNECT_CALLBACKS__
