#!/usr/bin/env python
"""Module: 'map2matlab'.

 Convert a compiler map file to a Matlab file to
 enable Matlab to access image symbols.

  map2matlab [opts] <file>
  
 options:
  --help, -h    print this message
  
"""
import sys
import getopt
import re


#-------------------------------------------------------------------------------
def import_arm_symbols( filename ):
  """Given the filename of a  symbol file created by xlink, creates a
  dictionary of symbols. 
  """
  fh = open( filename )
  regex = re.compile( '$\s+(\w+)\s+([0-9,A-F]+)\s', re.MULTILINE )
  
  sym_list = regex.findall( fh.read() )
  fh.close()
  
  sym_dict = {}
  # convert to dictionary?
  for s in sym_list:
    if s[0] == 'stack':
      continue
    sym_dict[s[0]] = int(s[1], 16)
  
  return sym_dict

#-------------------------------------------------------------------------------
def convert( filename ):   
  print "%% ***********************************************************************************"
  print "%%    Program map file:", filename
  print "%%"
  print "%%    Please Note: This file is automatically generated, and should not"
  print "%%                 be directly edited."
  print "%%"
  print "%%    Copyright 2006 by Ember Corporation. All rights reserved."
  print "%% ***********************************************************************************"

  print "\nfunction s = io_map();"
  print "s = [];\n\n"

  syms = import_arm_symbols( filename )
  for s in syms:
    prefix = ''

    # comment out any symbols with illegal first characters
    if s[0] in "_0123456789":
      prefix = '%'
      
    print "%ss.%-60s = %12d;"%( prefix, s, syms[s] )
    
  print "\n%% ***********************************************************************************"

#-------------------------------------------------------------------------------
def main( argv = None ):
  if argv is None:
    argv = sys.argv
  
  try:
    opts, args = getopt.getopt( argv[1:], "h", ["help"] )
  except getopt.error, msg:
    print msg
    print "for help use --help"
    return 2
  
  for o, a in opts:
    if o in ( "-h", "--help" ):
      print __doc__
      return 0
  
  if len(args) == 0:
    print __doc__
    return 1
  
  for arg in args:
    convert( arg )
  
  
#-------------------------------------------------------------------------------
if __name__ == '__main__':
  sys.exit( main() )
    
