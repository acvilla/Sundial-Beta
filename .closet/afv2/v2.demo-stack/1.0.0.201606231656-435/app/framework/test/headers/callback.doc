// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __EMBER_AF_CALLBACK_PROTOTYPES__
#define __EMBER_AF_CALLBACK_PROTOTYPES__


/**
 * @addtogroup callback Application Framework V2 Callback Interface Reference
 * This header provides callback function prototypes to interface the
 * developer's application code with the Ember Application Framework.
 * @{
 */


/** @name Non-Cluster Related Callbacks */
// @{
/** @brief Add To Current App Tasks
 *
 * This function is only useful to sleepy end devices.  This function will note
 * the passed item as part of a set of tasks the application has outstanding
 * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
 * application behaves with regard to sleeping and polling.  Until the
 * outstanding task is completed, the device may poll more frequently and sleep
 * less often.
 *
 * @param tasks   Ver.: always
 */
void emberAfAddToCurrentAppTasksCallback(EmberAfApplicationTask tasks);
/** @brief Allow Network Write Attribute
 *
 * This function is called by the application framework before it writes an
 * attribute in response to a write attribute request from an external device.
 * The value passed into this callback is the value to which the attribute is to
 * be set by the framework.
        Example:	In mirroring simple metering data
 * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
 * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
 * attributes on its mirror. The-meter-mirror sample application, located in
 * app/framework/sample-apps, uses this callback to allow the mirrored device to
 * write simple metering attributes on the mirror regardless of the fact that
 * most simple metering attributes are defined as read-only by the ZigBee
 * specification.
        Note:	The ZCL specification does not (as of this
 * writing) specify any permission-level security for writing writeable
 * attributes. As far as the ZCL specification is concerned, if an attribute is
 * writeable, any device that has a link key for the device should be able to
 * write that attribute. Furthermore if an attribute is read only, it should not
 * be written over the air. Thus, if you implement permissions for writing
 * attributes as a feature, you MAY be operating outside the specification. This
 * is unlikely to be a problem for writing read-only attributes, but it may be a
 * problem for attributes that are writeable according to the specification but
 * restricted by the application implementing this callback.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param value   Ver.: always
 * @param type   Ver.: always
 */
EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(int8u endpoint,
                                                                          EmberAfClusterId clusterId,
                                                                          EmberAfAttributeId attributeId,
                                                                          int8u mask,
                                                                          int16u manufacturerCode,
                                                                          int8u* value,
                                                                          int8u type);
/** @brief Attribute Read Access
 *
 * This function is called whenever the Application Framework needs to check
 * access permission for an attribute read.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param attributeId   Ver.: always
 */
boolean emberAfAttributeReadAccessCallback(int8u endpoint,
                                        EmberAfClusterId clusterId,
                                        int16u manufacturerCode,
                                        int16u attributeId);
/** @brief Attribute Write Access
 *
 * This function is called whenever the Application Framework needs to check
 * access permission for an attribute write.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param attributeId   Ver.: always
 */
boolean emberAfAttributeWriteAccessCallback(int8u endpoint,
                                         EmberAfClusterId clusterId,
                                         int16u manufacturerCode,
                                         int16u attributeId);
/** @brief Clear Report Table
 *
 * This function is called by the framework when the application should clear
 * the report table.
 *
 */
EmberStatus emberAfClearReportTableCallback(void);
/** @brief Cluster Init
 *
 * This function is called when a specific cluster is initialized. It gives the
 * application an opportunity to take care of cluster initialization procedures.
 * It is called exactly once for each endpoint where cluster is present.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 */
void emberAfClusterInitCallback(int8u endpoint,
                                EmberAfClusterId clusterId);
/** @brief Cluster Security Custom
 *
 * This callback is fired when determining if APS encryption is required for a
 * cluster outside of the specification's required clusters.  In other words,
 * for the Smart Energy profile this would be a cluster beyond the list that
 * normally requires APS encryption.
 *
 * @param profileId The profile ID  Ver.: always
 * @param clusterId The cluster ID  Ver.: always
 * @param incoming Whether this is an incoming or outgoing message.  Ver.:
 * always
 * @param commandId The ZCL command ID being sent/received.  Ver.: always
 */
boolean emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
                                          EmberAfClusterId clusterId,
                                          boolean incoming,
                                          int8u commandId);
/** @brief Configure Reporting Command
 *
 * This function is called by the application framework when a Configure
 * Reporting command is received from an external device.  The Configure
 * Reporting command contains a series of attribute reporting configuration
 * records.  The application should return true if the message was processed or
 * false if it was not.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfConfigureReportingCommandCallback(const EmberAfClusterCommand *cmd);
/** @brief Configure Reporting Response
 *
 * This function is called by the application framework when a Configure
 * Reporting Response command is received from an external device.  The
 * application should return true if the message was processed or false if it
 * was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of attribute status records.  Ver.:
 * always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfConfigureReportingResponseCallback(EmberAfClusterId clusterId,
                                               int8u *buffer,
                                               int16u bufLen);
/** @brief Default Response
 *
 * This function is called by the application framework when a Default Response
 * command is received from an external device.  The application should return
 * true if the message was processed or false if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param commandId The command identifier to which this is a response.  Ver.:
 * always
 * @param status Specifies either SUCCESS or the nature of the error that was
 * detected in the received command.  Ver.: always
 */
boolean emberAfDefaultResponseCallback(EmberAfClusterId clusterId,
                                    int8u commandId,
                                    EmberAfStatus status);
/** @brief Discover Attributes Response
 *
 * This function is called by the application framework when a Discover
 * Attributes Response or Discover Attributes Extended Response command is
 * received from an external device.  The Discover Attributes Response command
 * contains a bool indicating if discovery is complete and a list of zero or
 * more attribute identifier/type records. The final argument indicates whether
 * the response is in the extended format or not.  The application should return
 * true if the message was processed or false if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param discoveryComplete Indicates whether there are more attributes to be
 * discovered.  true if there are no more attributes to be discovered.  Ver.:
 * always
 * @param buffer Buffer containing the list of attribute identifier/type
 * records.  Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 * @param extended Indicates whether the response is in the extended format or
 * not.  Ver.: always
 */
boolean emberAfDiscoverAttributesResponseCallback(EmberAfClusterId clusterId,
                                               boolean discoveryComplete,
                                               int8u *buffer,
                                               int16u bufLen,
                                               boolean extended);
/** @brief Discover Commands Generated Response
 *
 * This function is called by the framework when Discover Commands Generated
 * Response is received.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param manufacturerCode Manufacturer code  Ver.: always
 * @param discoveryComplete Indicates whether there are more commands to be
 * discovered.  Ver.: always
 * @param commandIds Buffer containing the list of command identifiers.  Ver.:
 * always
 * @param commandIdCount The length of bytes of the list, whish is the same as
 * the number of identifiers.  Ver.: always
 */
boolean emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
                                                      int16u manufacturerCode,
                                                      boolean discoveryComplete,
                                                      int8u *commandIds,
                                                      int16u commandIdCount);
/** @brief Discover Commands Received Response
 *
 * This function is called by the framework when Discover Commands Received
 * Response is received.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param manufacturerCode Manufacturer code  Ver.: always
 * @param discoveryComplete Indicates whether there are more commands to be
 * discovered.  Ver.: always
 * @param commandIds Buffer containing the list of command identifiers.  Ver.:
 * always
 * @param commandIdCount The length of bytes of the list, whish is the same as
 * the number of identifiers.  Ver.: always
 */
boolean emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
                                                     int16u manufacturerCode,
                                                     boolean discoveryComplete,
                                                     int8u *commandIds,
                                                     int16u commandIdCount);
/** @brief Eeprom Init
 *
 * Tells the system to initialize the EEPROM if it is not already initialized.
 *
 */
void emberAfEepromInitCallback(void);
/** @brief Eeprom Note Initialized State
 *
 * Records the state of the EEPROM so that an intelligent driver (like the
 * EEPROM plugin) can re-initialize the driver prior to any calls to it.
 *
 * @param state The state of the EEPROM, false=re-initalization needed,
 * true=no-re-init needed  Ver.: always
 */
void emberAfEepromNoteInitializedStateCallback(boolean state);
/** @brief Eeprom Shutdown
 *
 * Tells the system to shutdown the EEPROM if it is not already shutdown.
 *
 */
void emberAfEepromShutdownCallback(void);
/** @brief Energy Scan Result
 *
 * This is called by the low-level stack code when an 802.15.4 energy scan
 * completes.
 *
 * @param channel The channel where the energy scan took place.  Ver.: always
 * @param rssi The receive signal strength indicator for the channel.  Ver.:
 * always
 */
void emberAfEnergyScanResultCallback(int8u channel,
                                     int8s rssi);
/** @brief External Attribute Read
 *
 * Like emberAfExternalAttributeWriteCallback above, this function is called
 * when the framework needs to read an attribute that is not stored within the
 * Application Framework's data structures.
        All of the important
 * information about the attribute itself is passed as a pointer to an
 * EmberAfAttributeMetadata struct, which is stored within the application and
 * used to manage the attribute. A complete description of the
 * EmberAfAttributeMetadata struct is provided in
 * app/framework/include/af-types.h
        This function assumes that the
 * application is able to read the attribute, write it into the passed buffer,
 * and return immediately. Any attributes that require a state machine for
 * reading and writing are not really candidates for externalization at the
 * present time. The Application Framework does not currently include a state
 * machine for reading or writing attributes that must take place across a
 * series of application ticks. Attributes that cannot be read in a timely
 * manner should be stored within the Application Framework and updated
 * occasionally by the application code from within the
 * emberAfMainTickCallback.
        If the application was successfully able to
 * read the attribute and write it into the passed buffer, it should return a
 * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
 * application was not able to read the attribute.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeMetadata   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param buffer   Ver.: always
 */
EmberAfStatus emberAfExternalAttributeReadCallback(int8u endpoint,
                                                   EmberAfClusterId clusterId,
                                                   EmberAfAttributeMetadata *attributeMetadata,
                                                   int16u manufacturerCode,
                                                   int8u *buffer);
/** @brief External Attribute Write
 *
 * This function is called whenever the Application Framework needs to write an
 * attribute which is not stored within the data structures of the Application
 * Framework itself. One of the new features in Version 2 is the ability to
 * store attributes outside the Framework. This is particularly useful for
 * attributes that do not need to be stored because they can be read off the
 * hardware when they are needed, or are stored in some central location used by
 * many modules within the system. In this case, you can indicate that the
 * attribute is stored externally. When the framework needs to write an external
 * attribute, it makes a call to this callback.
        This callback is very
 * useful for host micros which need to store attributes in persistent memory.
 * Because each host micro (used with an Ember NCP) has its own type of
 * persistent memory storage, the Application Framework does not include the
 * ability to mark attributes as stored in flash the way that it does for Ember
 * SoCs like the EM35x. On a host micro, any attributes that need to be stored
 * in persistent memory should be marked as external and accessed through the
 * external read and write callbacks. Any host code associated with the
 * persistent storage should be implemented within this callback.
        All of
 * the important information about the attribute itself is passed as a pointer
 * to an EmberAfAttributeMetadata struct, which is stored within the application
 * and used to manage the attribute. A complete description of the
 * EmberAfAttributeMetadata struct is provided in
 * app/framework/include/af-types.h.
        This function assumes that the
 * application is able to write the attribute and return immediately. Any
 * attributes that require a state machine for reading and writing are not
 * candidates for externalization at the present time. The Application Framework
 * does not currently include a state machine for reading or writing attributes
 * that must take place across a series of application ticks. Attributes that
 * cannot be written immediately should be stored within the Application
 * Framework and updated occasionally by the application code from within the
 * emberAfMainTickCallback.
        If the application was successfully able to
 * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
 * other return value indicates the application was not able to write the
 * attribute.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeMetadata   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param buffer   Ver.: always
 */
EmberAfStatus emberAfExternalAttributeWriteCallback(int8u endpoint,
                                                    EmberAfClusterId clusterId,
                                                    EmberAfAttributeMetadata *attributeMetadata,
                                                    int16u manufacturerCode,
                                                    int8u *buffer);
/** @brief Find Unused Pan Id And Form
 *
 * This function is called by the framework to search for an unused PAN id and
 * form a new network.  The application should return EMBER_SUCCESS if the
 * operation was initiated successfully.
 *
 */
EmberStatus emberAfFindUnusedPanIdAndFormCallback(void);
/** @brief Get Current App Tasks
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the set of tasks the application has outstanding.  These tasks affect
 * how the application behaves with regard to sleeping and polling.
 *
 */
EmberAfApplicationTask emberAfGetCurrentAppTasksCallback(void);
/** @brief Get Current Poll Control
 *
 * This function will retrieve the current poll control that the system is using
 * for the current network.  This is determined by examining all the scheduled
 * events and obtaining the most restrictive poll control context across all
 * events.  The most restrictive poll control is EMBER_AF_SHORT_POLL followed by
 * EMBER_AF_LONG_POLL.
 *
 */
EmberAfEventPollControl emberAfGetCurrentPollControlCallback(void);
/** @brief Get Current Poll Interval Ms
 *
 * This function is only useful to end devices.  This function will return the
 * current poll interval (in milliseconds) for the current network.  This
 * interval is the maximum amount of time a child is currently waiting between
 * polls of its parent.
 *
 */
int32u emberAfGetCurrentPollIntervalMsCallback(void);
/** @brief Get Current Poll Interval Qs
 *
 * This function is only useful to end devices.  This function will return the
 * current poll interval (in quarter seconds) for the current network.  This
 * interval is the maximum amount of time a child is currently waiting between
 * polls of its parent.
 *
 */
int32u emberAfGetCurrentPollIntervalQsCallback(void);
/** @brief Get Current Sleep Control
 *
 * This function will retrieve the current sleep control that the system is
 * using.  This is determined by examining all the scheduled events and
 * obtaining the most restrictive sleep control context across all events.  The
 * most restrictive sleep control is EMBER_AF_STAY_AWAKE followed by
 * EMBER_AF_OK_TO_SLEEP.
 *
 */
EmberAfEventSleepControl emberAfGetCurrentSleepControlCallback(void);
/** @brief Get Current Time
 *
 * This callback is called when device attempts to get current time from the
 * hardware. If this device has means to retrieve exact time, then this method
 * should implement it. If the callback can't provide the exact time it should
 * return 0 to indicate failure. Default action is to return 0, which indicates
 * that device does not have access to real time.
 *
 */
int32u emberAfGetCurrentTimeCallback(void);
/** @brief Get Default Poll Control
 *
 * This function will retrieve the default poll control for the current network
 * as previously set by emberAfSetDefaultPollControlCallback().  The default
 * poll control will limit whether the network can long poll.
 *
 */
EmberAfEventPollControl emberAfGetDefaultPollControlCallback(void);
/** @brief Get Default Sleep Control
 *
 * This function will retrieve the default sleep control the system is using as
 * previously set by emberAfSetDefaultSleepControlCallback().  The default sleep
 * control will limit whether the device can sleep.
 *
 */
EmberAfEventSleepControl emberAfGetDefaultSleepControlCallback(void);
/** @brief Get Endpoint By Index
 *
 * Get the endpoint number based on the passed index.  By default the framework
 * handles this by managing endpoints based on the precompiled configuration
 * defined in AppBuilder.  This callback can override this behavior at runtime
 * and provide additional endpoints or different data than the compiled values. 
 * If the index is overridden than the callback shall return true and set the
 * endpointReturn parameter accordingly. A value of 0xFF means the endpoint
 * doesn't exist at that index.
        Otherwise false must be returned by the
 * callback and the default framework behavior will be executed.  This is only
 * applicable to the SOC devices.
 *
 * @param index The index of the endpoint.  Ver.: always
 * @param endpointReturn The value of endpoint.  Ver.: always
 */
boolean emberAfGetEndpointByIndexCallback(int8u index,
                                       int8u* endpointReturn);
/** @brief Get Endpoint Description
 *
 * This callback is called by the framework whenever it receives a ZDO request
 * to enumerate the details about an endpoint.  By default the framework
 * provides the information based on the precompiled endpoint information as
 * defined in AppBuilder.  This callback can override that behavior at runtime
 * and return different information.  If the endpoint information is being
 * overridden then the callback must return true.  Otherwise it should return
 * false, which allows the framework to perform its default behavior.  This is
 * only applicable to SOC devices.
 *
 * @param endpoint The endpoint number that is being queried.  Ver.: always
 * @param result This is a pointer to a data structure where the endpoint
 * information is written if the callback is providing the information.  Ver.:
 * always
 */
boolean emberAfGetEndpointDescriptionCallback(int8u endpoint,
                                           EmberEndpointDescription* result);
/** @brief Get Endpoint Info
 *
 * This function is a callback to an application implemented endpoint that
 * operates outside the normal application framework.  When the framework wishes
 * to perform operations with that endpoint it uses this callback to retrieve
 * the endpoint's information.  If the endpoint exists and the application can
 * provide data then true shall be returned.  Otherwise the callback must return
 * false.
 *
 * @param endpoint The endpoint to retrieve data for.  Ver.: always
 * @param returnNetworkIndex The index corresponding to the ZigBee network the
 * endpoint belongs to.  If not using a multi-network device, 0 must be
 * returned.  Otherwise on a multi-network device the stack will switch to this
 * network before sending the message.  Ver.: always
 * @param returnEndpointInfo A pointer to a data struct that will be written
 * with information about the endpoint.  Ver.: always
 */
boolean emberAfGetEndpointInfoCallback(int8u endpoint,
                                    int8u* returnNetworkIndex,
                                    EmberAfEndpointInfoStruct* returnEndpointInfo);
/** @brief Get Form And Join Extended Pan Id
 *
 * This callback is called by the framework to get the extended PAN ID used by
 * the current network for forming and joining.  The extended PAN ID used for
 * forming and joining is not necessarily the same extended PAN ID actually in
 * use on the network.
 *
 * @param resultLocation   Ver.: always
 */
void emberAfGetFormAndJoinExtendedPanIdCallback(int8u *resultLocation);
/** @brief Get Long Poll Interval Ms
 *
 * This function is only useful to end devices.  This function will return the
 * long poll interval (in milliseconds) for the current network.  This interval
 * is the maximum amount of time a child will wait between polls of its parent
 * when it is not expecting data.
 *
 */
int32u emberAfGetLongPollIntervalMsCallback(void);
/** @brief Get Long Poll Interval Qs
 *
 * This function is only useful to end devices.  This function will return the
 * long poll interval (in quarter seconds) for the current network.  This
 * interval is the maximum amount of time a child will wait between polls of its
 * parent when it is not expecting data.
 *
 */
int32u emberAfGetLongPollIntervalQsCallback(void);
/** @brief Get Short Poll Interval Ms
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the short poll interval (in milliseconds) for the current network. 
 * This interval is the maximum amount of time a child will wait between polls
 * of its parent when it is expecting data.
 *
 */
int16u emberAfGetShortPollIntervalMsCallback(void);
/** @brief Get Short Poll Interval Qs
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the short poll interval (in quarter seconds) for the current network. 
 * This interval is the maximum amount of time a child will wait between polls
 * of its parent when it is expecting data.
 *
 */
int16u emberAfGetShortPollIntervalQsCallback(void);
/** @brief Get Source Route Overhead
 *
 * This function is called by the framework to determine the overhead required
 * in the network frame for source routing to a particular destination.
 *
 * @param destination The node id of the destination  Ver.: always
 */
int8u emberAfGetSourceRouteOverheadCallback(EmberNodeId destination);
/** @brief Get Wake Timeout Bitmask
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the wake timeout bitmask for the current network.  The bitmask
 * determines which tasks will timeout automatically and which tasks require
 * manual removal from the task list.
 *
 */
EmberAfApplicationTask emberAfGetWakeTimeoutBitmaskCallback(void);
/** @brief Get Wake Timeout Ms
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the wake timeout (in milliseconds) for the current network.  This
 * timeout is the maximum amount of time a child will wait for a task in the
 * wake bitmask to finish.  While waiting, the device will short poll.
 *
 */
int16u emberAfGetWakeTimeoutMsCallback(void);
/** @brief Get Wake Timeout Qs
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the wake timeout (in quarter seconds) for the current network.  This
 * timeout is the maximum amount of time a child will wait for a task in the
 * wake bitmask to finish.  While waiting, the device will short poll.
 *
 */
int16u emberAfGetWakeTimeoutQsCallback(void);
/** @brief Hal Button Isr
 *
 * This callback is called by the framework whenever a button is pressed on the
 * device. This callback is called within ISR context.
 *
 * @param button The button which has changed state, either BUTTON0 or BUTTON1
 * as defined in the appropriate BOARD_HEADER.  Ver.: always
 * @param state The new state of the button referenced by the button parameter,
 * either ::BUTTON_PRESSED if the button has been pressed or ::BUTTON_RELEASED
 * if the button has been released.  Ver.: always
 */
void emberAfHalButtonIsrCallback(int8u button,
                                 int8u state);
/** @brief Initiate Inter Pan Key Establishment
 *
 * This function is called by the framework to initiate key establishment with a
 * remote device on a different PAN.  The application should return
 * EMBER_SUCCESS if key establishment was initiated successfully.  The
 * application should call ::emberAfInterPanKeyEstablishmentCallback as events
 * occur.
 *
 * @param panId The PAN id of the remote device.  Ver.: always
 * @param eui64 The EUI64 of the remote device.  Ver.: always
 */
EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
                                                            const EmberEUI64 eui64);
/** @brief Initiate Key Establishment
 *
 * This function is called by the framework to initiate key establishment with a
 * remote device.  The application should return EMBER_SUCCESS if key
 * establishment was initiated successfully.  The application should call
 * ::emberAfKeyEstablishmentCallback as events occur.
 *
 * @param nodeId The node id of the remote device.  Ver.: always
 * @param endpoint The endpoint on the remote device.  Ver.: always
 */
EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
                                                    int8u endpoint);
/** @brief Initiate Partner Link Key Exchange
 *
 * This function is called by the framework to initiate a partner link key
 * exchange with a remote device.  The application should return EMBER_SUCCESS
 * if the partner link key exchange was initiated successfully.  When the
 * partner link key exchange completes, the application should call the given
 * callback.
 *
 * @param target The node id of the remote device.  Ver.: always
 * @param endpoint The key establishment endpoint of the remote device.  Ver.:
 * always
 * @param callback The callback that should be called when the partner link key
 * exchange completse.  Ver.: always
 */
EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
                                                          int8u endpoint,
                                                          EmberAfPartnerLinkKeyExchangeCallback *callback);
/** @brief Inter Pan Key Establishment
 *
 * A callback by the key-establishment code to indicate an event has occurred. 
 * For error codes this is purely a notification.  For non-error status codes
 * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
 * disallow the operation.  If the application returns true then the key
 * establishment is allowed to proceed.  If it returns false, then key
 * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
 *
 * @param status   Ver.: always
 * @param amInitiator   Ver.: always
 * @param panId   Ver.: always
 * @param eui64   Ver.: always
 * @param delayInSeconds   Ver.: always
 */
boolean emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
                                             boolean amInitiator,
                                             EmberPanId panId,
                                             const EmberEUI64 eui64,
                                             int8u delayInSeconds);
/** @brief Interpan Send Message
 *
 * This function will send a raw MAC message with interpan frame format using
 * the passed parameters.
 *
 * @param header Interpan header info  Ver.: always
 * @param messageLength The length of the message received or to send  Ver.:
 * always
 * @param message The message data received or to send.  Ver.: always
 */
EmberStatus emberAfInterpanSendMessageCallback(EmberAfInterpanHeader* header,
                                               int16u messageLength,
                                               int8u* message);
/** @brief Key Establishment
 *
 * A callback by the key-establishment code to indicate an event has occurred. 
 * For error codes this is purely a notification.  For non-error status codes
 * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
 * disallow the operation.  If the application returns true then the key
 * establishment is allowed to proceed.  If it returns false, then key
 * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
 *
 * @param status   Ver.: always
 * @param amInitiator   Ver.: always
 * @param partnerShortId   Ver.: always
 * @param delayInSeconds   Ver.: always
 */
boolean emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
                                     boolean amInitiator,
                                     EmberNodeId partnerShortId,
                                     int8u delayInSeconds);
/** @brief Main Init
 *
 * This function is called from the application's main function. It gives the
 * application a chance to do any initialization required at system startup. Any
 * code that you would normally put into the top of the application's main()
 * routine should be put into this function. This is called before the clusters,
 * plugins, and the network are initialized so some functionality is not yet
 * available.
        Note: No callback in the Application Framework is
 * associated with resource cleanup. If you are implementing your application on
 * a Unix host where resource cleanup is a consideration, we expect that you
 * will use the standard Posix system calls, including the use of atexit() and
 * handlers for signals such as SIGTERM, SIGINT, SIGCHLD, SIGPIPE and so on. If
 * you use the signal() function to register your signal handler, please mind
 * the returned value which may be an Application Framework function. If the
 * return value is non-null, please make sure that you call the returned
 * function from your handler to avoid negating the resource cleanup of the
 * Application Framework itself.
 *
 */
void emberAfMainInitCallback(void);
/** @brief Main Start
 *
 * This function is called at the start of main after the HAL has been
 * initialized.  The standard main function arguments of argc and argv are
 * passed in.  However not all platforms have support for main() function
 * arguments.  Those that do not are passed NULL for argv, therefore argv should
 * be checked for NULL before using it.  If the callback determines that the
 * program must exit, it should return true.  The value returned by main() will
 * be the value written to the returnCode pointer.  Otherwise the callback
 * should return false to let normal execution continue.
 *
 * @param returnCode   Ver.: always
 * @param argc   Ver.: always
 * @param argv   Ver.: always
 */
boolean emberAfMainStartCallback(int* returnCode,
                              int argc,
                              char** argv);
/** @brief Main Tick
 *
 * Whenever main application tick is called, this callback will be called at the
 * end of the main tick execution.
 *
 */
void emberAfMainTickCallback(void);
/** @brief Message Sent
 *
 * This function is called by the application framework from the message sent
 * handler, when it is informed by the stack regarding the message sent status.
 * All of the values passed to the emberMessageSentHandler are passed on to this
 * callback. This provides an opportunity for the application to verify that its
 * message has been sent successfully and take the appropriate action. This
 * callback should return a bool value of true or false. A value of true
 * indicates that the message sent notification has been handled and should not
 * be handled by the application framework.
 *
 * @param type   Ver.: always
 * @param indexOrDestination   Ver.: always
 * @param apsFrame   Ver.: always
 * @param msgLen   Ver.: always
 * @param message   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfMessageSentCallback(EmberOutgoingMessageType type,
                                int16u indexOrDestination,
                                EmberApsFrame* apsFrame,
                                int16u msgLen,
                                int8u* message,
                                EmberStatus status);
/** @brief Ncp Init
 *
 * This function is called when the network coprocessor is being initialized,
 * either at startup or upon reset.  It provides applications on opportunity to
 * perform additional configuration of the NCP.  The function is always called
 * twice when the NCP is initialized.  In the first invocation, memoryAllocation
 * will be true and the application should only issue EZSP commands that affect
 * memory allocation on the NCP.  For example, tables on the NCP can be resized
 * in the first call.  In the second invocation, memoryAllocation will be false
 * and the application should only issue EZSP commands that do not affect memory
 * allocation.  For example, tables on the NCP can be populated in the second
 * call.  This callback is not called on SoCs.
 *
 * @param memoryAllocation   Ver.: always
 */
void emberAfNcpInitCallback(boolean memoryAllocation);
/** @brief Ncp Is Awake Isr
 *
 * This function is called IN ISR CONTEXT.  It notes that the NCP is awake after
 * sleeping.  Care should be taken to do minimal processing in this ISR handler
 * function.
 *
 */
void emberAfNcpIsAwakeIsrCallback(void);
/** @brief Network Found
 *
 * This callback is generated when an active scan finds a 802.15.4 network.
 *
 * @param networkFound A struct containing information about the network found. 
 * Ver.: always
 * @param lqi The link quality indication of the network found.  Ver.: always
 * @param rssi The received signal strength indication of the network found. 
 * Ver.: always
 */
void emberAfNetworkFoundCallback(EmberZigbeeNetwork* networkFound,
                                 int8u lqi,
                                 int8s rssi);
/** @brief Network Key Update Complete
 *
 * This is called by the framework when a network key update operation started
 * by the trust center is complete.
 *
 * @param status   Ver.: always
 */
void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status);
/** @brief Ota Bootload
 *
 * The platform specific routine to bootload the device from a ZigBee
 * over-the-air upgrade file.
 *
 * @param id A pointer to the structure that contains the information about what
 * OTA image to bootload.  Ver.: always
 * @param ncpUpgradeTagId The tag ID of the upgrade data that will be used to
 * bootload the device.  Ver.: always
 */
int8u emberAfOtaBootloadCallback(const EmberAfOtaImageId* id,
                                   int16u ncpUpgradeTagId);
/** @brief Ota Client Bootload
 *
 * This callback is fired when the OTA Client recevies a command to bootload the
 * newly downloaded OTA image.  This callback will perform the platform specific
 * to bootload their device.
 *
 * @param id This is the identifier relating to the image that has been
 * downloaded and is ready for bootload.  Ver.: always
 */
void emberAfOtaClientBootloadCallback(const EmberAfOtaImageId* id);
/** @brief Ota Client Custom Verify
 *
 * This callback is executed by the OTA client after the signature verification
 * has successfully completed.  It allows the device to do its own custom
 * verification of the image (such as verifying that the EBL is intact).
 *
 * @param newVerification This indicates if a new verification should be
 * started.  Ver.: always
 * @param id This is ID of the image to be verified.  Ver.: always
 */
EmberAfImageVerifyStatus emberAfOtaClientCustomVerifyCallback(boolean newVerification,
                                                              const EmberAfOtaImageId* id);
/** @brief Ota Client Download Complete
 *
 * This callback indicates that the OTA client has completed the download of a
 * file.  If the file has been completely downloaded and cryptographic checks
 * have been turned on, then those will be performed prior to this callback and
 * that outcome included in the 'success' result.  On failure, this callback is
 * merely informative, and the return type is ignored.  On succesful download,
 * this callback allows the client to perform any additional verification of the
 * downloaded image and return that result to the OTA server.
 *
 * @param success This indicates the success or failure of the download and
 * cryptographic verification process (if applicable).  Ver.: always
 * @param id This is the image identifier information that corresponds to the
 * download result.  Ver.: always
 */
boolean emberAfOtaClientDownloadCompleteCallback(EmberAfOtaDownloadResult success,
                                              const EmberAfOtaImageId* id);
/** @brief Ota Client Incoming Message Raw
 *
 * This callback is for processing incoming messages for the Over-the-air
 * bootload cluster client.  ZCL will not process the message and instead hand
 * the raw over the air data to the callback for its own processing.
 *
 * @param message A pointer to the structure containing the message buffer and
 * other information about it.  Ver.: always
 */
boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand *message);
/** @brief Ota Client Start
 *
 * This callback should be called when the profile specific registration has
 * completed successfully.  It will start the client's state machine that will
 * find the OTA server, query it for the next image, download the image, wait
 * for the bootload message, and kick off the bootload.
 *
 */
void emberAfOtaClientStartCallback(void);
/** @brief Ota Client Version Info
 *
 * This function is called by the OTA client when a new query will occur to the
 * server asking what the next version of firmware is.  The client can inform
 * the cluster software as to what information to use in the query (and
 * subsequent download).
 *
 * @param currentImageInfo This is the information to use in the next query by
 * the client cluster code.  It contains the manufacturer ID, image type ID, and
 * the firmware version to be specified in the query message sent to the server.
 *  Ver.: always
 * @param hardwareVersion This is a pointer to the hardware version to use in
 * the query.  If no hardware version should be used, then
 * EMBER_AF_INVALID_HARDWARE_VERSION should be used.  Ver.: always
 */
void emberAfOtaClientVersionInfoCallback(EmberAfOtaImageId* currentImageInfo,
                                         int16u* hardwareVersion);
/** @brief Ota Page Request Server Policy
 *
 * This callback is called by the OTA server page request code when it wants to
 * determine if it is allowed for an OTA client to make a page request.  It is
 * only called if page request support has been enabled on the server.  It
 * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
 * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
 *
 */
int8u emberAfOtaPageRequestServerPolicyCallback(void);
/** @brief Ota Server Block Size
 *
 * This function provides a way for the server to adjust the block size of its
 * response to an Image block request by a client.
 *
 * @param clientNodeId The node Id of OTA client making an image block request. 
 * Ver.: always
 */
int8u emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId);
/** @brief Ota Server Image Block Request
 *
 * This function is called when the server application receives an image block
 * request by a client.
 *
 * @param data A struct containing the details of the image block response and
 * values that can be returned by the application to effect the behavior of the
 * server's response.  Ver.: always
 */
int8u emberAfOtaServerImageBlockRequestCallback(EmberAfImageBlockRequestCallbackStruct* data);
/** @brief Ota Server Incoming Message Raw
 *
 * This callback is for processing incoming messages for the Over-the-air
 * bootload cluster server.  ZCL will not process the message and instead hand
 * the raw over the air data to the callback for its own processing.
 *
 * @param message A pointer to the structure containing the message buffer and
 * other information about it.  Ver.: always
 */
boolean emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand *message);
/** @brief Ota Server Query
 *
 * This callback is fired when the OTA server receives a query request by the
 * client.  The callback lets the server application indicate to the client what
 * the 'next' version of software is for the device, or if there is not one
 * available.
 *
 * @param currentImageId This is the current software image that the client
 * hase.  Ver.: always
 * @param hardwareVersion If this value is non-NULL, it indicates the hardware
 * version of the client device.  If NULL, the client did not specify a hardware
 * version.  Ver.: always
 * @param nextUpgradeImageId This is a pointer to a data structure containing
 * the 'next' software version for the client to download.  Ver.: always
 */
int8u emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
                                      int16u* hardwareVersion,
                                      EmberAfOtaImageId* nextUpgradeImageId);
/** @brief Ota Server Send Image Notify
 *
 * This callback is an indication to the OTA server that it should send out
 * notification about an OTA file that is available for download.
 *
 * @param dest The destination of the image notify message.  May be a broadcast
 * address.  Ver.: always
 * @param endpoint The destination endpoint of the image notify message.  May be
 * a broadcast endpoint.  Ver.: always
 * @param payloadType The type of data the image notify message will contain.  0
 * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID. 
 * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
 * @param queryJitter The percentage of nodes that should respond to this
 * message, from 1-100.  On receipt of this message, each recipient will
 * randomly choose a percentage and only query the server if their percentage is
 * below this value.  Ver.: always
 * @param id The image information that will be put in the message.  The data
 * within this struct that will be appended to the message is determined by the
 * previous 'payloadType' argument.  Ver.: always
 */
boolean emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
                                             int8u endpoint,
                                             int8u payloadType,
                                             int8u queryJitter,
                                             const EmberAfOtaImageId* id);
/** @brief Ota Server Upgrade End Request
 *
 * This function is called when the OTA server receives a request an upgrade end
 * request.  If the request indicated a successful download by the client, the
 * server must tell the client when and if to upgrade to the downloaded image.
 *
 * @param source The node ID of the device that sent the upgrade end request. 
 * Ver.: always
 * @param status This is the ZCL status sent by the client indicating the result
 * of its attempt to download the new upgrade image.  If the status is not
 * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
 * response mesasge will be generated by the server.  Ver.: always
 * @param returnValue If the server returns true indicating that the client
 * should apply the upgrade, this time value indicates when in the future the
 * client should apply the upgrade.  Ver.: always
 * @param imageId This variable indicates the software version that the client
 * successfully downloaded and is asking to upgrade to.  Ver.: always
 */
boolean emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
                                               int8u status,
                                               int32u* returnValue,
                                               const EmberAfOtaImageId* imageId);
/** @brief Ota Storage Check Temp Data
 *
 * This callback will validate temporary data in the storage device to determine
 * whether it is a complete file, a partially downloaded file, or there is no
 * file present.  When a complete or partial file is found it will return
 * EMBER_AF_OTA_STORAGE_SUCCESS or EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND,
 * respectively.  In that case, the currentOffset, totalImageSize, and
 * newFileInfo will be populated with data.  When EMBER_AF_OTA_STORAGE_ERROR is
 * returned, no temporary data is present.
 *
 * @param currentOffset A pointer to a value that will be written with the
 * offset within the total file size that has been successfully stored in the
 * storage device.  This will indicate how much data has been currently
 * dowloaded.  Ver.: always
 * @param totalImageSize A pointer to a value that will be written with the
 * total image size of the OTA file when a download has completed.  This does
 * not indicate how much data has actually been downloaded currently.  Ver.:
 * always
 * @param newFileInfo This is the image id of the temporary file data stored in
 * the storage device.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageCheckTempDataCallback(int32u* currentOffset,
                                                               int32u* totalImageSize,
                                                               EmberAfOtaImageId* newFileInfo);
/** @brief Ota Storage Clear Temp Data
 *
 * This function clears any existing temp data that was downloaed.  It is used
 * immediately prior to downloading a raw image over the air.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageClearTempDataCallback(void);
/** @brief Ota Storage Close
 *
 * This callback shuts down the ZigBee Over-the-air storage module.
 *
 */
void emberAfOtaStorageCloseCallback(void);
/** @brief Ota Storage Driver Download Finish
 *
 * This callback defines the low-level means by which a device records the final
 * offset value of the download image.
 *
 * @param offset The value of the final offset of the image download.  Ver.:
 * always
 */
void emberAfOtaStorageDriverDownloadFinishCallback(int32u offset);
/** @brief Ota Storage Driver Init
 *
 * The initialization code for the OTA storage driver.
 *
 */
boolean emberAfOtaStorageDriverInitCallback(void);
/** @brief Ota Storage Driver Invalidate Image
 *
 * This callback invalidates the image stored on disk so that it will not be
 * bootloaded, and it will not be a valid image that is in the middle of
 * downloading.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageDriverInvalidateImageCallback(void);
/** @brief Ota Storage Driver Prepare To Resume Download
 *
 * This callback allows the underlying storage driver to prepare to resume the
 * OTA file download.  For example, the driver may exceute a page erase to
 * insure the next page is ready to be written to.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageDriverPrepareToResumeDownloadCallback(void);
/** @brief Ota Storage Driver Read
 *
 * This callback defines the low-level means by which a device reads from the
 * OTA storage device.
 *
 * @param offset The address offset from the start of the storage device where
 * data is to be read.  Ver.: always
 * @param length The length of the data to be read from the storage device. 
 * Ver.: always
 * @param returnData A pointer where the data read from the device should be
 * written to.  Ver.: always
 */
boolean emberAfOtaStorageDriverReadCallback(int32u offset,
                                         int32u length,
                                         int8u* returnData);
/** @brief Ota Storage Driver Retrieve Last Stored Offset
 *
 * This callback defines the low-level means by which a device retrieves the
 * last persistently recorded download offset.  This may be different than last
 * actual download offset.
 *
 */
int32u emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback(void);
/** @brief Ota Storage Driver Write
 *
 * This callback defines the low-level means by which a device reads from the
 * OTA storage device.
 *
 * @param dataToWrite A pointer to the data that will be written to the storage
 * device.  Ver.: always
 * @param offset The address offset from the start of the storage device where
 * data will be written.  Ver.: always
 * @param length The length of the data to be written to the storage device. 
 * Ver.: always
 */
boolean emberAfOtaStorageDriverWriteCallback(const int8u* dataToWrite,
                                          int32u offset,
                                          int32u length);
/** @brief Ota Storage Finish Download
 *
 * This function indicates to the storage module that the download has finished.
 *
 * @param offset The final offset of the downloaded file (i.e. the total size) 
 * Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageFinishDownloadCallback(int32u offset);
/** @brief Ota Storage Get Count
 *
 * This callback returns the total number of ZigBee Over-the-air upgrade images
 * stored in the storage module.
 *
 */
int8u emberAfOtaStorageGetCountCallback(void);
/** @brief Ota Storage Get Full Header
 *
 * This callback populates the EmberAfOtaHeader structure pointed to by the
 * returnData with data about the OTA file stored in the storage module.
 *
 * @param id This is a pointer to the image id for the OTA file to retrieve
 * information about.  Ver.: always
 * @param returnData This is a pointer to the location of the structure that
 * will be populated with data.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageGetFullHeaderCallback(const EmberAfOtaImageId* id,
                                                               EmberAfOtaHeader* returnData);
/** @brief Ota Storage Get Total Image Size
 *
 * This function returns the total size of the ZigBee Over-the-air file with the
 * passed parameters.  If no file is found with those parameters, 0 is returned.
 *
 * @param id A pointer to the image identifier for the OTA file to retrieve
 * information for.  Ver.: always
 */
int32u emberAfOtaStorageGetTotalImageSizeCallback(const EmberAfOtaImageId* id);
/** @brief Ota Storage Init
 *
 * This callback initializes the ZigBee Over-the-air storage module.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageInitCallback(void);
/** @brief Ota Storage Iterator First
 *
 * This callback lets you walk through the list of all OTA files by jumping to
 * the first file in the list maintained by the storage module.  If there is no
 * file then emberAfOtaInvalidImageId is returned.
 *
 */
EmberAfOtaImageId emberAfOtaStorageIteratorFirstCallback(void);
/** @brief Ota Storage Iterator Next
 *
 * This callback lets you walk through the list of all OTA files by jumping to
 * the next file in the list maintained by the storage module.  If there is no
 * next file then emberAfOtaInvalidImageId is returned.
 *
 */
EmberAfOtaImageId emberAfOtaStorageIteratorNextCallback(void);
/** @brief Ota Storage Read Image Data
 *
 * This callback reads data from the specified OTA file and returns that data to
 * the caller.
 *
 * @param id This is a pointer to the image id for the OTA file to retrieve data
 * from.  Ver.: always
 * @param offset This is the offset relative to the start of the image where the
 * data should be read from.  Ver.: always
 * @param length This is the length of data that will be read.  Ver.: always
 * @param returnData This is a pointer to where the data read out of the file
 * will be written to  Ver.: always
 * @param returnedLength This is a pointer to a variable where the actual length
 * of data read will be written to.  A short read may occur if the end of file
 * was reached.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageReadImageDataCallback(const EmberAfOtaImageId* id,
                                                               int32u offset,
                                                               int32u length,
                                                               int8u* returnData,
                                                               int32u* returnedLength);
/** @brief Ota Storage Search
 *
 * This callback searches through the list of all images for one that matches
 * the passed parameters.  On success an image identifier is returned with a
 * matching image.  On failure emberAfInvalidImageId is returned.
 *
 * @param manufacturerId The ZigBee assigned identifier of the manufacturer
 * contained in the OTA image being searched for.  Ver.: always
 * @param imageTypeId The image type identifier contained in the OTA image being
 * searched for.  Ver.: always
 * @param hardwareVersion This is a pointer to the hardware version that will be
 * used in the search.  If the pointer is NULL, hardware version will not be
 * considered when searching for matching images.  If it points to a value, the
 * search will only consider images where that value falls between the minimum
 * and maxmimum hardware version specified in the OTA file.  If no hardware
 * version is present in an OTA file but the other parameters match, the file
 * will be considered a match  Ver.: always
 */
EmberAfOtaImageId emberAfOtaStorageSearchCallback(int16u manufacturerId,
                                                  int16u imageTypeId,
                                                  const int16u* hardwareVersion);
/** @brief Ota Storage Write Temp Data
 *
 * This function writes to the temporary data in the storage device at the
 * specified offset.  It is used when downloading a raw image over the air.
 *
 * @param offset The location within the download image file where to write the
 * data.  Ver.: always
 * @param length The length of data to write.  Ver.: always
 * @param data A pointer to the temporary data that will be written to the
 * storage device.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageWriteTempDataCallback(int32u offset,
                                                               int32u length,
                                                               const int8u* data);
/** @brief Partner Link Key Exchange Request
 *
 * This function is called by the framework on SOC platforms when a remote node
 * requests a partner link key exchange.  The application should return
 * EMBER_SUCCESS to accept the request or any other status to reject it.  On
 * network coprocessor platforms, this function will not be called because the
 * NCP handles partner link key exchange requests based on the binding policy.
 *
 * @param partner The EUI of the remote node.  Ver.: always
 */
EmberStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner);
/** @brief Partner Link Key Exchange Response
 *
 * This function is called by the framework when a remote node requests a
 * partner link key exchange.  The application should return true to accept the
 * request or false to reject it.  On network coprocessor platforms, this
 * function will not be called because the NCP handles partner link key exchange
 * requests based on the binding policy.
 *
 * @param sender The EUI of the remote node.  Ver.: always
 * @param status The ZDO response status.  Ver.: always
 */
void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
                                                   EmberZdoStatus status);
/** @brief Performing Key Establishment
 *
 * This function is called by the framework to determine if the device is
 * performing key establishment.  The application should return true if key
 * establishment is in progress.
 *
 */
boolean emberAfPerformingKeyEstablishmentCallback(void);
/** @brief Post Attribute Change
 *
 * This function is called by the application framework after it changes an
 * attribute value. The value passed into this callback is the value to which
 * the attribute was set by the framework.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param type   Ver.: always
 * @param size   Ver.: always
 * @param value   Ver.: always
 */
void emberAfPostAttributeChangeCallback(int8u endpoint,
                                        EmberAfClusterId clusterId,
                                        EmberAfAttributeId attributeId,
                                        int8u mask,
                                        int16u manufacturerCode,
                                        int8u type,
                                        int8u size,
                                        int8u* value);
/** @brief Pre Attribute Change
 *
 * This function is called by the application framework before it changes an
 * attribute value.  The value passed into this callback is the value to which
 * the attribute is to be set by the framework.  The application should return
 * ::EMBER_ZCL_STATUS_SUCCESS to permit the change or any other ::EmberAfStatus
 * to reject it.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param type   Ver.: always
 * @param size   Ver.: always
 * @param value   Ver.: always
 */
EmberAfStatus emberAfPreAttributeChangeCallback(int8u endpoint,
                                                EmberAfClusterId clusterId,
                                                EmberAfAttributeId attributeId,
                                                int8u mask,
                                                int16u manufacturerCode,
                                                int8u type,
                                                int8u size,
                                                int8u* value);
/** @brief Pre Cli Send
 *
 * This function is called by the framework when it is about to pass a message
 * constructed over CLI to the stack primitives for sending. If the function
 * returns true it is assumed that the callback has consumed and processed the
 * message. The framework will not do any further processing on the message.
   
 *     If the function returns false then it is assumed that the callback has
 * not processed the message and the framework will continue to process
 * accordingly.
 *
 * @param apsFrame The structure containing the APS frame  Ver.: always
 * @param source Source Node Id  Ver.: always
 * @param destination Destintion Node Id  Ver.: always
 * @param message Pointer to the message payload  Ver.: always
 * @param messageLength Length of the message payload  Ver.: always
 */
boolean emberAfPreCliSendCallback(EmberApsFrame* apsFrame,
                               EmberNodeId source,
                               EmberNodeId destination,
                               int8u* message,
                               int16u messageLength);
/** @brief Pre Command Received
 *
 * This callback is the second in the Application Framework's message processing
 * chain. At this point in the processing of incoming over-the-air messages, the
 * application has determined that the incoming message is a ZCL command. It
 * parses enough of the message to populate an EmberAfClusterCommand struct. The
 * Application Framework defines this struct value in a local scope to the
 * command processing but also makes it available through a global pointer
 * called emberAfCurrentCommand, in app/framework/util/util.c. When command
 * processing is complete, this pointer is cleared.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfPreCommandReceivedCallback(EmberAfClusterCommand* cmd);
/** @brief Pre Message Received
 *
 * This callback is the first in the Application Framework's message processing
 * chain. The Application Framework calls it when a message has been received
 * over the air but has not yet been parsed by the ZCL command-handling code. If
 * you wish to parse some messages that are completely outside the ZCL
 * specification or are not handled by the Application Framework's command
 * handling code, you should intercept them for parsing in this callback. 
     
 *   This callback returns a Boolean value indicating whether or not the message
 * has been handled. If the callback returns a value of true, then the
 * Application Framework assumes that the message has been handled and it does
 * nothing else with it. If the callback returns a value of false, then the
 * application framework continues to process the message as it would with any
 * incoming message.
        Note: 	This callback receives a pointer to an
 * incoming message struct. This struct allows the application framework to
 * provide a unified interface between both Host devices, which receive their
 * message through the ezspIncomingMessageHandler, and SoC devices, which
 * receive their message through emberIncomingMessageHandler.
 *
 * @param incomingMessage   Ver.: always
 */
boolean emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage);
/** @brief Pre Message Send
 *
 * This function is called by the framework when it is about to pass a message
 * to the stack primitives for sending.   This message may or may not be ZCL,
 * ZDO, or some other protocol.  This is called prior to
        any ZigBee
 * fragmentation that may be done.  If the function returns true it is assumed
 * the callback has consumed and processed the message.  The callback must also
 * set the EmberStatus status code to be passed back to the caller.  The
 * framework will do no further processing on the message.
        If the
 * function returns false then it is assumed that the callback has not processed
 * the mesasge and the framework will continue to process accordingly.
 *
 * @param messageStruct The structure containing the parameters of the APS
 * message to be sent.  Ver.: always
 * @param status A pointer to the status code value that will be returned to the
 * caller.  Ver.: always
 */
boolean emberAfPreMessageSendCallback(EmberAfMessageStruct* messageStruct,
                                   EmberStatus* status);
/** @brief Pre Ncp Reset
 *
 * This function will be called prior to the reset of the NCP by the host.
 *
 */
void emberAfPreNcpResetCallback(void);
/** @brief Pre ZDO Message Received
 *
 * This function passes the application an incoming ZDO message and gives the
 * appictation the opportunity to handle it. By default, this callback returns
 * false indicating that the incoming ZDO message has not been handled and
 * should be handled by the Application Framework.
 *
 * @param emberNodeId   Ver.: always
 * @param apsFrame   Ver.: always
 * @param message   Ver.: always
 * @param length   Ver.: always
 */
boolean emberAfPreZDOMessageReceivedCallback(EmberNodeId emberNodeId,
                                          EmberApsFrame* apsFrame,
                                          int8u* message,
                                          int16u length);
/** @brief Read Attributes Response
 *
 * This function is called by the application framework when a Read Attributes
 * Response command is received from an external device.  The application should
 * return true if the message was processed or false if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of read attribute status records. 
 * Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfReadAttributesResponseCallback(EmberAfClusterId clusterId,
                                           int8u *buffer,
                                           int16u bufLen);
/** @brief Read Reporting Configuration Command
 *
 * This function is called by the application framework when a Read Reporting
 * Configuration command is received from an external device.  The application
 * should return true if the message was processed or false if it was not.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfReadReportingConfigurationCommandCallback(const EmberAfClusterCommand *cmd);
/** @brief Read Reporting Configuration Response
 *
 * This function is called by the application framework when a Read Reporting
 * Configuration Response command is received from an external device.  The
 * application should return true if the message was processed or false if it
 * was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of attribute reporting configuration
 * records.  Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfReadReportingConfigurationResponseCallback(EmberAfClusterId clusterId,
                                                       int8u *buffer,
                                                       int16u bufLen);
/** @brief Registration Abort
 *
 * This callback is called when the device should abort the registration
 * process.
 *
 */
void emberAfRegistrationAbortCallback(void);
/** @brief Registration
 *
 * This callback is called when the device joins a network and the process of
 * registration is complete. This callback provides a success value of true if
 * the registration process was successful and a value of false if registration
 * failed.
 *
 * @param success true if registration succeeded, false otherwise.  Ver.: always
 */
void emberAfRegistrationCallback(boolean success);
/** @brief Registration Start
 *
 * This callback is called when the device joins a network and the registration
 * process should begin.  The application should return EMBER_SUCCESS if the
 * registration process started successfully.  When registration is complete,
 * the application should call emberAfRegistrationCallback with an indication of
 * success or failure.
 *
 */
EmberStatus emberAfRegistrationStartCallback(void);
/** @brief Remote Delete Binding Permission
 *
 * This function is called by the framework to request permission to service the
 * remote delete binding request. Return EMBER_SUCCESS to allow request,
 * anything else to disallow request.
 *
 * @param index index to an Ember binding table entry  Ver.: always
 */
EmberStatus emberAfRemoteDeleteBindingPermissionCallback(int8u index);
/** @brief Remote Set Binding Permission
 *
 * This function is called by the framework to request permission to service the
 * remote set binding request. Return EMBER_SUCCESS to allow request, anything
 * else to disallow request.
 *
 * @param entry Ember Binding Tablet Entry  Ver.: always
 */
EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry *entry);
/** @brief Remove From Current App Tasks
 *
 * This function is only useful to sleepy end devices.  This function will
 * remove the passed item from the set of tasks the application has outstanding
 * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
 * application behaves with regard to sleeping and polling.  Removing the item
 * from the list of outstanding tasks may allow the device to sleep longer and
 * poll less frequently.  If there are other outstanding tasks the system may
 * still have to stay away and poll more often.
 *
 * @param tasks   Ver.: always
 */
void emberAfRemoveFromCurrentAppTasksCallback(EmberAfApplicationTask tasks);
/** @brief Report Attributes
 *
 * This function is called by the application framework when a Report Attributes
 * command is received from an external device.  The application should return
 * true if the message was processed or false if it was not.
 *
 * @param clusterId The cluster identifier of this command.  Ver.: always
 * @param buffer Buffer containing the list of attribute report records.  Ver.:
 * always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfReportAttributesCallback(EmberAfClusterId clusterId,
                                     int8u *buffer,
                                     int16u bufLen);
/** @brief Reporting Attribute Change
 *
 * This function is called by the framework when an attribute managed by the
 * framework changes.  The application should call this function when an
 * externally-managed attribute changes.  The application should use the change
 * notification to inform its reporting decisions.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param type   Ver.: always
 * @param data   Ver.: always
 */
void emberAfReportingAttributeChangeCallback(int8u endpoint,
                                             EmberAfClusterId clusterId,
                                             EmberAfAttributeId attributeId,
                                             int8u mask,
                                             int16u manufacturerCode,
                                             EmberAfAttributeType type,
                                             int8u *data);
/** @brief Scan Complete
 *
 * This is called by the low-level stack code when an 802.15.4 active scan
 * completes.
 *
 * @param channel If the status indicates an error, the channel on which the
 * error occurred.  Otherwise it is undefined for EMBER_SUCCESS.  Ver.: always
 * @param status The status of the scan.  Ver.: always
 */
void emberAfScanCompleteCallback(int8u channel,
                                 EmberStatus status);
/** @brief Scan Error
 *
 * This is called by the framework on behalf of the form-and-join library to
 * notify the application if an error occurs while scanning.  See form-and-join
 * documentation for more information.
 *
 * @param status The status of the scan.  Ver.: always
 */
void emberAfScanErrorCallback(EmberStatus status);
/** @brief Security Init
 *
 * This callback is called by the framework to give the application a chance to
 * modify the security settings of the node during network initialization. 
 * Depending on the context when this callback is called, the pointer to the
 * initial security state may be NULL, which means the initial security state
 * can no longer be modified as the node is already operating on the network.
 *
 * @param state   Ver.: always
 * @param extended   Ver.: always
 * @param trustCenter   Ver.: always
 */
void emberAfSecurityInitCallback(EmberInitialSecurityState *state,
                                 EmberExtendedSecurityBitmask *extended,
                                 boolean trustCenter);
/** @brief Set Default Poll Control
 *
 * This function will set the default poll control for the current network to
 * control whether or not it can long poll.
 *
 * @param control   Ver.: always
 */
void emberAfSetDefaultPollControlCallback(EmberAfEventPollControl control);
/** @brief Set Default Sleep Control
 *
 * This function will set the default behavior of a sleeping device to control
 * whether or not it must stay awake.  A device that stays awake does not sleep
 * at all.  Otherwise, the device can sleep between events when appropriate.
 *
 * @param control   Ver.: always
 */
void emberAfSetDefaultSleepControlCallback(EmberAfEventSleepControl control);
/** @brief Set Form And Join Extended Pan Id
 *
 * This callback is called by the framework to set the extended PAN ID used by
 * the current network for forming and joining.  The extended PAN ID used for
 * forming and joining is not necessarily the same extended PAN ID actually in
 * use on the network.
 *
 * @param extendedPanId   Ver.: always
 */
void emberAfSetFormAndJoinExtendedPanIdCallback(const int8u *extendedPanId);
/** @brief Set Long Poll Interval Ms
 *
 * This function is only useful to end devices.  This function will set the long
 * poll interval (in milliseconds) for the current network.  This interval is
 * the maximum amount of time a child will wait between polls of its parent when
 * it is not expecting data.
 *
 * @param longPollIntervalMs   Ver.: always
 */
void emberAfSetLongPollIntervalMsCallback(int32u longPollIntervalMs);
/** @brief Set Long Poll Interval Qs
 *
 * This function is only useful to end devices.  This function will set the long
 * poll interval (in quarter seconds) for the current network.  This interval is
 * the maximum amount of time a child will wait between polls of its parent when
 * it is not expecting data.
 *
 * @param longPollIntervalQs   Ver.: always
 */
void emberAfSetLongPollIntervalQsCallback(int32u longPollIntervalQs);
/** @brief Set Short Poll Interval Ms
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the short poll interval (in milliseconds) for the current network.  This
 * interval is the maximum amount of time a child will wait between polls of its
 * parent when it is expecting data.
 *
 * @param shortPollIntervalMs   Ver.: always
 */
void emberAfSetShortPollIntervalMsCallback(int16u shortPollIntervalMs);
/** @brief Set Short Poll Interval Qs
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the short poll interval (in quarter seconds) for the current network.  This
 * interval is the maximum amount of time a child will wait between polls of its
 * parent when it is expecting data.
 *
 * @param shortPollIntervalQs   Ver.: always
 */
void emberAfSetShortPollIntervalQsCallback(int16u shortPollIntervalQs);
/** @brief Set Source Route Overhead
 *
 * This function is called by the framework when it has information about the
 * source route overhead to a particular destination. The application may use
 * this information to cache the source route overhead.
 *
 * @param destination The node id of the destination  Ver.: always
 * @param overhead The overhead in bytes  Ver.: always
 */
void emberAfSetSourceRouteOverheadCallback(EmberNodeId destination,
                                           int8u overhead);
/** @brief Set Time
 *
 * This callback should be implemented, if the device has access to real time
 * clock, and has an ability to update that clock. The application framework
 * expects to be passed the utcTime which is the number of seconds since the
 * year 2000. Default implementation does nothing. Note: This function used to
 * take time in year, month, day, hour, min, sec. We have changed this to
 * utcTime in order to conserve code space.
 *
 * @param utcTime   Ver.: always
 */
void emberAfSetTimeCallback(int32u utcTime);
/** @brief Set Wake Timeout Bitmask
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the wake timeout bitmask for the current network.  The bitmask determines
 * which tasks will timeout automatically and which tasks require manual removal
 * from the task list.
 *
 * @param tasks   Ver.: always
 */
void emberAfSetWakeTimeoutBitmaskCallback(EmberAfApplicationTask tasks);
/** @brief Set Wake Timeout Ms
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the wake timeout (in milliseconds) for the current network.  This timeout is
 * the maximum amount of time a child will wait for a task in the wake bitmask
 * to finish.  While waiting, the device will short poll.
 *
 * @param wakeTimeoutMs   Ver.: always
 */
void emberAfSetWakeTimeoutMsCallback(int16u wakeTimeoutMs);
/** @brief Set Wake Timeout Qs
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the wake timeout (in quarter seconds) for the current network.  This timeout
 * is the maximum amount of time a child will wait for a task in the wake
 * bitmask to finish.  While waiting, the device will short poll.
 *
 * @param wakeTimeoutQs   Ver.: always
 */
void emberAfSetWakeTimeoutQsCallback(int16u wakeTimeoutQs);
/** @brief Stack Status
 *
 * This function is called by the application framework from the stack status
 * handler.  This callbacks provides applications an opportunity to be notified
 * of changes to the stack status and take appropriate action.  The return code
 * from this callback is ignored by the framework.  The framework will always
 * process the stack status after the callback returns.
 *
 * @param status   Ver.: always
 */
boolean emberAfStackStatusCallback(EmberStatus status);
/** @brief Start Move
 *
 * This function is called to initiate the process for a device to move (rejoin)
 * to a new parent.
 *
 */
boolean emberAfStartMoveCallback(void);
/** @brief Start Search For Joinable Network
 *
 * This function is called by the framework to search for joinable networks and
 * join a network.  The application should return EMBER_SUCCESS if the operation
 * was initiated successfully.
 *
 */
EmberStatus emberAfStartSearchForJoinableNetworkCallback(void);
/** @brief Stop Move
 *
 * This function is called to cancel a previously scheduled move (rejoin) to a
 * new parent.
 *
 */
void emberAfStopMoveCallback(void);
/** @brief Trust Center Join
 *
 * This callback is called from within the application framework's
 * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
 * This callback provides the same arguments passed to the
 * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
 * please see documentation included in stack/include/trust-center.h.
 *
 * @param newNodeId   Ver.: always
 * @param newNodeEui64   Ver.: always
 * @param parentOfNewNode   Ver.: always
 * @param status   Ver.: always
 * @param decision   Ver.: always
 */
void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
                                    EmberEUI64 newNodeEui64,
                                    EmberNodeId parentOfNewNode,
                                    EmberDeviceUpdate status,
                                    EmberJoinDecision decision);
/** @brief Trust Center Keepalive Abort
 *
 * This callback is called when the device should abort the trust center
 * keepalive process.
 *
 */
void emberAfTrustCenterKeepaliveAbortCallback(void);
/** @brief Trust Center Keepalive Update
 *
 * This callback is called when the device finishes registration (successfully
 * or otherwise) and the trust center keepalive process must be updated.  If the
 * keepalive process has not been started, then it is started.  Otherwise if the
 * keepalive is in the process of searching for the TC, it will process the
 * result of that Trust Center search operation.
 *
 * @param registrationComplete   Ver.: always
 */
void emberAfTrustCenterKeepaliveUpdateCallback(boolean registrationComplete);
/** @brief Unused Pan Id Found
 *
 * This is called by the framework on behalf of the form-and-join library to
 * notify the application of the PAN id and channel found following a call to
 * ::emberScanForUnusedPanId().  See form-and-join documentation for more
 * information.
 *
 * @param panId   Ver.: always
 * @param channel   Ver.: always
 */
void emberAfUnusedPanIdFoundCallback(EmberPanId panId,
                                     int8u channel);
/** @brief Write Attributes Response
 *
 * This function is called by the application framework when a Write Attributes
 * Response command is received from an external device.  The application should
 * return true if the message was processed or false if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of write attribute status records. 
 * Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfWriteAttributesResponseCallback(EmberAfClusterId clusterId,
                                            int8u *buffer,
                                            int16u bufLen);
/** @} END Non-Cluster Related Callbacks */

/** @name Basic Cluster Callbacks */
// @{

/** @brief Basic Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBasicClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Basic Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBasicClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Basic Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBasicClusterClientInitCallback(int8u endpoint);
/** @brief Basic Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBasicClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Basic Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBasicClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief Basic Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBasicClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief Basic Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBasicClusterClientTickCallback(int8u endpoint);
/** @brief Basic Cluster Reset To Factory Defaults
 *
 * 
 *
 */
boolean emberAfBasicClusterResetToFactoryDefaultsCallback(void);
/** @brief Basic Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBasicClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Basic Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBasicClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Basic Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBasicClusterServerInitCallback(int8u endpoint);
/** @brief Basic Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBasicClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Basic Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBasicClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief Basic Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBasicClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief Basic Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBasicClusterServerTickCallback(int8u endpoint);

/** @} END Basic Cluster Callbacks */

/** @name Power Configuration Cluster Callbacks */
// @{

/** @brief Power Configuration Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Power Configuration Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Power Configuration Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerConfigClusterClientInitCallback(int8u endpoint);
/** @brief Power Configuration Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Power Configuration Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Power Configuration Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Power Configuration Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerConfigClusterClientTickCallback(int8u endpoint);
/** @brief Power Configuration Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Power Configuration Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Power Configuration Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerConfigClusterServerInitCallback(int8u endpoint);
/** @brief Power Configuration Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Power Configuration Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Power Configuration Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Power Configuration Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerConfigClusterServerTickCallback(int8u endpoint);

/** @} END Power Configuration Cluster Callbacks */

/** @name Device Temperature Configuration Cluster Callbacks */
// @{

/** @brief Device Temperature Configuration Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceTempClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Device Temperature Configuration Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceTempClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Device Temperature Configuration Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceTempClusterClientInitCallback(int8u endpoint);
/** @brief Device Temperature Configuration Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceTempClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Device Temperature Configuration Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceTempClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Device Temperature Configuration Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceTempClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Device Temperature Configuration Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceTempClusterClientTickCallback(int8u endpoint);
/** @brief Device Temperature Configuration Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceTempClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Device Temperature Configuration Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceTempClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Device Temperature Configuration Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceTempClusterServerInitCallback(int8u endpoint);
/** @brief Device Temperature Configuration Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceTempClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Device Temperature Configuration Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceTempClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Device Temperature Configuration Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceTempClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Device Temperature Configuration Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceTempClusterServerTickCallback(int8u endpoint);

/** @} END Device Temperature Configuration Cluster Callbacks */

/** @name Identify Cluster Callbacks */
// @{

/** @brief Identify Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIdentifyClusterClientAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Identify Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIdentifyClusterClientDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Identify Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIdentifyClusterClientInitCallback(int8u endpoint);
/** @brief Identify Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIdentifyClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Identify Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIdentifyClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Identify Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIdentifyClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Identify Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIdentifyClusterClientTickCallback(int8u endpoint);
/** @brief Identify Cluster E Z Mode Invoke
 *
 * 
 *
 * @param action   Ver.: always
 */
boolean emberAfIdentifyClusterEZModeInvokeCallback(int8u action);
/** @brief Identify Cluster Identify
 *
 * 
 *
 * @param identifyTime   Ver.: always
 */
boolean emberAfIdentifyClusterIdentifyCallback(int16u identifyTime);
/** @brief Identify Cluster Identify Query
 *
 * 
 *
 */
boolean emberAfIdentifyClusterIdentifyQueryCallback(void);
/** @brief Identify Cluster Identify Query Response
 *
 * 
 *
 * @param timeout   Ver.: always
 */
boolean emberAfIdentifyClusterIdentifyQueryResponseCallback(int16u timeout);
/** @brief Identify Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIdentifyClusterServerAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Identify Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIdentifyClusterServerDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Identify Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIdentifyClusterServerInitCallback(int8u endpoint);
/** @brief Identify Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIdentifyClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Identify Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIdentifyClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Identify Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIdentifyClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Identify Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIdentifyClusterServerTickCallback(int8u endpoint);
/** @brief Identify Cluster Trigger Effect
 *
 * 
 *
 * @param effectId   Ver.: always
 * @param effectVariant   Ver.: always
 */
boolean emberAfIdentifyClusterTriggerEffectCallback(int8u effectId,
                                                    int8u effectVariant);
/** @brief Identify Cluster Update Commission State
 *
 * 
 *
 * @param action   Ver.: always
 * @param commissionStateMask   Ver.: always
 */
boolean emberAfIdentifyClusterUpdateCommissionStateCallback(int8u action,
                                                            int8u commissionStateMask);

/** @} END Identify Cluster Callbacks */

/** @name Groups Cluster Callbacks */
// @{

/** @brief Groups Cluster Clear Group Table
 *
 * This function is called by the framework when the application should clear
 * the group table.
 *
 * @param endpoint The endpoint.  Ver.: always
 */
void emberAfGroupsClusterClearGroupTableCallback(int8u endpoint);
/** @brief Groups Cluster Endpoint In Group
 *
 * This function is called by the framework when it needs to determine if an
 * endpoint is a member of a group.  The application should return true if the
 * endpoint is a member of the group and false otherwise.
 *
 * @param endpoint The endpoint.  Ver.: always
 * @param groupId The group identifier.  Ver.: always
 */
boolean emberAfGroupsClusterEndpointInGroupCallback(int8u endpoint,
                                                 int16u groupId);
/** @brief Groups Cluster Add Group
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param groupName   Ver.: always
 */
boolean emberAfGroupsClusterAddGroupCallback(int16u groupId,
                                             int8u* groupName);
/** @brief Groups Cluster Add Group If Identifying
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param groupName   Ver.: always
 */
boolean emberAfGroupsClusterAddGroupIfIdentifyingCallback(int16u groupId,
                                                          int8u* groupName);
/** @brief Groups Cluster Add Group Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterAddGroupResponseCallback(int8u status,
                                                     int16u groupId);
/** @brief Groups Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGroupsClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Groups Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGroupsClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Groups Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGroupsClusterClientInitCallback(int8u endpoint);
/** @brief Groups Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGroupsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Groups Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGroupsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Groups Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGroupsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Groups Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGroupsClusterClientTickCallback(int8u endpoint);
/** @brief Groups Cluster Get Group Membership
 *
 * 
 *
 * @param groupCount   Ver.: always
 * @param groupList   Ver.: always
 */
boolean emberAfGroupsClusterGetGroupMembershipCallback(int8u groupCount,
                                                       int8u* groupList);
/** @brief Groups Cluster Get Group Membership Response
 *
 * 
 *
 * @param capacity   Ver.: always
 * @param groupCount   Ver.: always
 * @param groupList   Ver.: always
 */
boolean emberAfGroupsClusterGetGroupMembershipResponseCallback(int8u capacity,
                                                               int8u groupCount,
                                                               int8u* groupList);
/** @brief Groups Cluster Remove All Groups
 *
 * 
 *
 */
boolean emberAfGroupsClusterRemoveAllGroupsCallback(void);
/** @brief Groups Cluster Remove Group
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterRemoveGroupCallback(int16u groupId);
/** @brief Groups Cluster Remove Group Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterRemoveGroupResponseCallback(int8u status,
                                                        int16u groupId);
/** @brief Groups Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGroupsClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Groups Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGroupsClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Groups Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGroupsClusterServerInitCallback(int8u endpoint);
/** @brief Groups Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGroupsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Groups Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGroupsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Groups Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGroupsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Groups Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGroupsClusterServerTickCallback(int8u endpoint);
/** @brief Groups Cluster View Group
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterViewGroupCallback(int16u groupId);
/** @brief Groups Cluster View Group Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param groupName   Ver.: always
 */
boolean emberAfGroupsClusterViewGroupResponseCallback(int8u status,
                                                      int16u groupId,
                                                      int8u* groupName);

/** @} END Groups Cluster Callbacks */

/** @name Scenes Cluster Callbacks */
// @{

/** @brief Scenes Cluster ClearSceneTable
 *
 * This function is called by the framework when the application should clear
 * the scene table.
 *
 * @param endpoint The endpoint.  Ver.: always
 */
void emberAfScenesClusterClearSceneTableCallback(int8u endpoint);
/** @brief Scenes Cluster Make Invalid
 *
 * This function is called to invalidate the valid attribute in the Scenes
 * cluster.
 *
 * @param endpoint   Ver.: always
 */
EmberAfStatus emberAfScenesClusterMakeInvalidCallback(int8u endpoint);
/** @brief Scenes Cluster Recall Saved Scene
 *
 * This function is called by the framework when the application should recall a
 * saved scene.
 *
 * @param endpoint The endpoint.  Ver.: always
 * @param groupId The group identifier.  Ver.: always
 * @param sceneId The scene identifier.  Ver.: always
 */
EmberAfStatus emberAfScenesClusterRecallSavedSceneCallback(int8u endpoint,
                                                           int16u groupId,
                                                           int8u sceneId);
/** @brief Scenes Cluster Remove Scenes In Group
 *
 * This function removes the scenes from a specified group.
 *
 * @param endpoint Endpoint  Ver.: always
 * @param groupId Group ID  Ver.: always
 */
void emberAfScenesClusterRemoveScenesInGroupCallback(int8u endpoint,
                                                     int16u groupId);
/** @brief Scenes Cluster Add Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterAddSceneCallback(int16u groupId,
                                             int8u sceneId,
                                             int16u transitionTime,
                                             int8u* sceneName,
                                             int8u* extensionFieldSets);
/** @brief Scenes Cluster Add Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterAddSceneResponseCallback(int8u status,
                                                     int16u groupId,
                                                     int8u sceneId);
/** @brief Scenes Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfScenesClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Scenes Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfScenesClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Scenes Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfScenesClusterClientInitCallback(int8u endpoint);
/** @brief Scenes Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfScenesClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Scenes Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfScenesClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Scenes Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfScenesClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Scenes Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfScenesClusterClientTickCallback(int8u endpoint);
/** @brief Scenes Cluster Copy Scene
 *
 * 
 *
 * @param mode   Ver.: always
 * @param groupIdFrom   Ver.: always
 * @param sceneIdFrom   Ver.: always
 * @param groupIdTo   Ver.: always
 * @param sceneIdTo   Ver.: always
 */
boolean emberAfScenesClusterCopySceneCallback(int8u mode,
                                              int16u groupIdFrom,
                                              int8u sceneIdFrom,
                                              int16u groupIdTo,
                                              int8u sceneIdTo);
/** @brief Scenes Cluster Copy Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupIdFrom   Ver.: always
 * @param sceneIdFrom   Ver.: always
 */
boolean emberAfScenesClusterCopySceneResponseCallback(int8u status,
                                                      int16u groupIdFrom,
                                                      int8u sceneIdFrom);
/** @brief Scenes Cluster Enhanced Add Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterEnhancedAddSceneCallback(int16u groupId,
                                                     int8u sceneId,
                                                     int16u transitionTime,
                                                     int8u* sceneName,
                                                     int8u* extensionFieldSets);
/** @brief Scenes Cluster Enhanced Add Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterEnhancedAddSceneResponseCallback(int8u status,
                                                             int16u groupId,
                                                             int8u sceneId);
/** @brief Scenes Cluster Enhanced View Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterEnhancedViewSceneCallback(int16u groupId,
                                                      int8u sceneId);
/** @brief Scenes Cluster Enhanced View Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterEnhancedViewSceneResponseCallback(int8u status,
                                                              int16u groupId,
                                                              int8u sceneId,
                                                              int16u transitionTime,
                                                              int8u* sceneName,
                                                              int8u* extensionFieldSets);
/** @brief Scenes Cluster Get Scene Membership
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfScenesClusterGetSceneMembershipCallback(int16u groupId);
/** @brief Scenes Cluster Get Scene Membership Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param capacity   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneCount   Ver.: always
 * @param sceneList   Ver.: always
 */
boolean emberAfScenesClusterGetSceneMembershipResponseCallback(int8u status,
                                                               int8u capacity,
                                                               int16u groupId,
                                                               int8u sceneCount,
                                                               int8u* sceneList);
/** @brief Scenes Cluster Recall Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterRecallSceneCallback(int16u groupId,
                                                int8u sceneId);
/** @brief Scenes Cluster Remove All Scenes
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfScenesClusterRemoveAllScenesCallback(int16u groupId);
/** @brief Scenes Cluster Remove All Scenes Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 */
boolean emberAfScenesClusterRemoveAllScenesResponseCallback(int8u status,
                                                            int16u groupId);
/** @brief Scenes Cluster Remove Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterRemoveSceneCallback(int16u groupId,
                                                int8u sceneId);
/** @brief Scenes Cluster Remove Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterRemoveSceneResponseCallback(int8u status,
                                                        int16u groupId,
                                                        int8u sceneId);
/** @brief Scenes Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfScenesClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Scenes Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfScenesClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Scenes Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfScenesClusterServerInitCallback(int8u endpoint);
/** @brief Scenes Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfScenesClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Scenes Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfScenesClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Scenes Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfScenesClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Scenes Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfScenesClusterServerTickCallback(int8u endpoint);
/** @brief Scenes Cluster Store Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterStoreSceneCallback(int16u groupId,
                                               int8u sceneId);
/** @brief Scenes Cluster Store Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterStoreSceneResponseCallback(int8u status,
                                                       int16u groupId,
                                                       int8u sceneId);
/** @brief Scenes Cluster View Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterViewSceneCallback(int16u groupId,
                                              int8u sceneId);
/** @brief Scenes Cluster View Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterViewSceneResponseCallback(int8u status,
                                                      int16u groupId,
                                                      int8u sceneId,
                                                      int16u transitionTime,
                                                      int8u* sceneName,
                                                      int8u* extensionFieldSets);
/** @brief Scenes Cluster Store Current Scene
 *
 * This function is called by the framework when the application should store
 * the current scene.  If an entry already exists in the scene table with the
 * same scene and group ids, the application should update the entry with the
 * current scene.  Otherwise, a new entry should be adde to the scene table, if
 * possible.
 *
 * @param endpoint The endpoint.  Ver.: always
 * @param groupId The group identifier.  Ver.: always
 * @param sceneId The scene identifier.  Ver.: always
 */
EmberAfStatus emberAfScenesClusterStoreCurrentSceneCallback(int8u endpoint,
                                                            int16u groupId,
                                                            int8u sceneId);

/** @} END Scenes Cluster Callbacks */

/** @name On/off Cluster Callbacks */
// @{

/** @brief On/off Cluster Level Control Effect
 *
 * This is called by the framework when the on/off cluster initiates a command
 * that must effect a level control change. The implementation assumes that the
 * client will handle any effect on the On/Off Cluster.
 *
 * @param endpoint   Ver.: always
 * @param newValue   Ver.: always
 */
void emberAfOnOffClusterLevelControlEffectCallback(int8u endpoint,
                                                   boolean newValue);
/** @brief On/off Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief On/off Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief On/off Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffClusterClientInitCallback(int8u endpoint);
/** @brief On/off Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief On/off Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief On/off Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief On/off Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffClusterClientTickCallback(int8u endpoint);
/** @brief On/off Cluster Off
 *
 * 
 *
 */
boolean emberAfOnOffClusterOffCallback(void);
/** @brief On/off Cluster Off With Effect
 *
 * 
 *
 * @param effectId   Ver.: always
 * @param effectVariant   Ver.: always
 */
boolean emberAfOnOffClusterOffWithEffectCallback(int8u effectId,
                                                 int8u effectVariant);
/** @brief On/off Cluster On
 *
 * 
 *
 */
boolean emberAfOnOffClusterOnCallback(void);
/** @brief On/off Cluster On With Recall Global Scene
 *
 * 
 *
 */
boolean emberAfOnOffClusterOnWithRecallGlobalSceneCallback(void);
/** @brief On/off Cluster On With Timed Off
 *
 * 
 *
 * @param onOffControl   Ver.: always
 * @param onTime   Ver.: always
 * @param offWaitTime   Ver.: always
 */
boolean emberAfOnOffClusterOnWithTimedOffCallback(int8u onOffControl,
                                                  int16u onTime,
                                                  int16u offWaitTime);
/** @brief On/off Cluster Sample Mfg Specific Off With Transition
 *
 * 
 *
 */
boolean emberAfOnOffClusterSampleMfgSpecificOffWithTransitionCallback(void);
/** @brief On/off Cluster Sample Mfg Specific On With Transition
 *
 * 
 *
 */
boolean emberAfOnOffClusterSampleMfgSpecificOnWithTransitionCallback(void);
/** @brief On/off Cluster Sample Mfg Specific Toggle With Transition
 *
 * 
 *
 */
boolean emberAfOnOffClusterSampleMfgSpecificToggleWithTransitionCallback(void);
/** @brief On/off Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief On/off Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief On/off Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffClusterServerInitCallback(int8u endpoint);
/** @brief On/off Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief On/off Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief On/off Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief On/off Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffClusterServerTickCallback(int8u endpoint);
/** @brief On/off Cluster Toggle
 *
 * 
 *
 */
boolean emberAfOnOffClusterToggleCallback(void);
/** @brief On/off Cluster Set Value
 *
 * This function is called when the on/off value needs to be set, either through
 * normal channels or as a result of a level change.
 *
 * @param endpoint   Ver.: always
 * @param command   Ver.: always
 * @param initiatedByLevelChange   Ver.: always
 */
EmberAfStatus emberAfOnOffClusterSetValueCallback(int8u endpoint,
                                                  int8u command,
                                                  boolean initiatedByLevelChange);

/** @} END On/off Cluster Callbacks */

/** @name On/off Switch Configuration Cluster Callbacks */
// @{

/** @brief On/off Switch Configuration Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief On/off Switch Configuration Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief On/off Switch Configuration Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientInitCallback(int8u endpoint);
/** @brief On/off Switch Configuration Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief On/off Switch Configuration Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief On/off Switch Configuration Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffSwitchConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief On/off Switch Configuration Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientTickCallback(int8u endpoint);
/** @brief On/off Switch Configuration Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief On/off Switch Configuration Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief On/off Switch Configuration Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerInitCallback(int8u endpoint);
/** @brief On/off Switch Configuration Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief On/off Switch Configuration Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief On/off Switch Configuration Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffSwitchConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief On/off Switch Configuration Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerTickCallback(int8u endpoint);

/** @} END On/off Switch Configuration Cluster Callbacks */

/** @name Level Control Cluster Callbacks */
// @{

/** @brief Level Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfLevelControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Level Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfLevelControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Level Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfLevelControlClusterClientInitCallback(int8u endpoint);
/** @brief Level Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfLevelControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Level Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfLevelControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief Level Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfLevelControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief Level Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfLevelControlClusterClientTickCallback(int8u endpoint);
/** @brief Level Control Cluster Move
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfLevelControlClusterMoveCallback(int8u moveMode,
                                               int8u rate);
/** @brief Level Control Cluster Move To Level
 *
 * 
 *
 * @param level   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterMoveToLevelCallback(int8u level,
                                                      int16u transitionTime);
/** @brief Level Control Cluster Move To Level With On Off
 *
 * 
 *
 * @param level   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterMoveToLevelWithOnOffCallback(int8u level,
                                                               int16u transitionTime);
/** @brief Level Control Cluster Move With On Off
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfLevelControlClusterMoveWithOnOffCallback(int8u moveMode,
                                                        int8u rate);
/** @brief Level Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfLevelControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Level Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfLevelControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Level Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfLevelControlClusterServerInitCallback(int8u endpoint);
/** @brief Level Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfLevelControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Level Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfLevelControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief Level Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfLevelControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief Level Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfLevelControlClusterServerTickCallback(int8u endpoint);
/** @brief Level Control Cluster Step
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterStepCallback(int8u stepMode,
                                               int8u stepSize,
                                               int16u transitionTime);
/** @brief Level Control Cluster Step With On Off
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterStepWithOnOffCallback(int8u stepMode,
                                                        int8u stepSize,
                                                        int16u transitionTime);
/** @brief Level Control Cluster Stop
 *
 * 
 *
 */
boolean emberAfLevelControlClusterStopCallback(void);
/** @brief Level Control Cluster Stop With On Off
 *
 * 
 *
 */
boolean emberAfLevelControlClusterStopWithOnOffCallback(void);

/** @} END Level Control Cluster Callbacks */

/** @name Alarms Cluster Callbacks */
// @{

/** @brief Alarms Cluster Alarm
 *
 * 
 *
 * @param alarmCode   Ver.: always
 * @param clusterId   Ver.: always
 */
boolean emberAfAlarmClusterAlarmCallback(int8u alarmCode,
                                         int16u clusterId);
/** @brief Alarms Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfAlarmClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Alarms Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfAlarmClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Alarms Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfAlarmClusterClientInitCallback(int8u endpoint);
/** @brief Alarms Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfAlarmClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Alarms Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfAlarmClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief Alarms Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfAlarmClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief Alarms Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfAlarmClusterClientTickCallback(int8u endpoint);
/** @brief Alarms Cluster Get Alarm
 *
 * 
 *
 */
boolean emberAfAlarmClusterGetAlarmCallback(void);
/** @brief Alarms Cluster Get Alarm Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param alarmCode   Ver.: always
 * @param clusterId   Ver.: always
 * @param timeStamp   Ver.: always
 */
boolean emberAfAlarmClusterGetAlarmResponseCallback(int8u status,
                                                    int8u alarmCode,
                                                    int16u clusterId,
                                                    int32u timeStamp);
/** @brief Alarms Cluster Reset Alarm
 *
 * 
 *
 * @param alarmCode   Ver.: always
 * @param clusterId   Ver.: always
 */
boolean emberAfAlarmClusterResetAlarmCallback(int8u alarmCode,
                                              int16u clusterId);
/** @brief Alarms Cluster Reset Alarm Log
 *
 * 
 *
 */
boolean emberAfAlarmClusterResetAlarmLogCallback(void);
/** @brief Alarms Cluster Reset All Alarms
 *
 * 
 *
 */
boolean emberAfAlarmClusterResetAllAlarmsCallback(void);
/** @brief Alarms Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfAlarmClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Alarms Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfAlarmClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Alarms Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfAlarmClusterServerInitCallback(int8u endpoint);
/** @brief Alarms Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfAlarmClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Alarms Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfAlarmClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief Alarms Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfAlarmClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief Alarms Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfAlarmClusterServerTickCallback(int8u endpoint);

/** @} END Alarms Cluster Callbacks */

/** @name Time Cluster Callbacks */
// @{

/** @brief Time Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTimeClusterClientAttributeChangedCallback(int8u endpoint,
                                                      EmberAfAttributeId attributeId);
/** @brief Time Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTimeClusterClientDefaultResponseCallback(int8u endpoint,
                                                     int8u commandId,
                                                     EmberAfStatus status);
/** @brief Time Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTimeClusterClientInitCallback(int8u endpoint);
/** @brief Time Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTimeClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          int16u manufacturerCode);
/** @brief Time Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTimeClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                 int16u indexOrDestination,
                                                 EmberApsFrame *apsFrame,
                                                 int16u msgLen,
                                                 int8u *message,
                                                 EmberStatus status);
/** @brief Time Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTimeClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId,
                                                                  EmberAfAttributeType attributeType,
                                                                  int8u size,
                                                                  int8u *value);
/** @brief Time Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTimeClusterClientTickCallback(int8u endpoint);
/** @brief Time Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTimeClusterServerAttributeChangedCallback(int8u endpoint,
                                                      EmberAfAttributeId attributeId);
/** @brief Time Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTimeClusterServerDefaultResponseCallback(int8u endpoint,
                                                     int8u commandId,
                                                     EmberAfStatus status);
/** @brief Time Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTimeClusterServerInitCallback(int8u endpoint);
/** @brief Time Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTimeClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          int16u manufacturerCode);
/** @brief Time Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTimeClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                 int16u indexOrDestination,
                                                 EmberApsFrame *apsFrame,
                                                 int16u msgLen,
                                                 int8u *message,
                                                 EmberStatus status);
/** @brief Time Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTimeClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId,
                                                                  EmberAfAttributeType attributeType,
                                                                  int8u size,
                                                                  int8u *value);
/** @brief Time Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTimeClusterServerTickCallback(int8u endpoint);

/** @} END Time Cluster Callbacks */

/** @name RSSI Location Cluster Callbacks */
// @{

/** @brief RSSI Location Cluster Anchor Node Announce
 *
 * 
 *
 * @param anchorNodeIeeeAddress   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 */
boolean emberAfRssiLocationClusterAnchorNodeAnnounceCallback(int8u* anchorNodeIeeeAddress,
                                                             int16s coordinate1,
                                                             int16s coordinate2,
                                                             int16s coordinate3);
/** @brief RSSI Location Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRssiLocationClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief RSSI Location Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRssiLocationClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief RSSI Location Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRssiLocationClusterClientInitCallback(int8u endpoint);
/** @brief RSSI Location Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRssiLocationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief RSSI Location Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRssiLocationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief RSSI Location Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRssiLocationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief RSSI Location Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRssiLocationClusterClientTickCallback(int8u endpoint);
/** @brief RSSI Location Cluster Compact Location Data Notification
 *
 * 
 *
 * @param locationType   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param qualityMeasure   Ver.: always
 * @param locationAge   Ver.: always
 */
boolean emberAfRssiLocationClusterCompactLocationDataNotificationCallback(int8u locationType,
                                                                          int16s coordinate1,
                                                                          int16s coordinate2,
                                                                          int16s coordinate3,
                                                                          int8u qualityMeasure,
                                                                          int16u locationAge);
/** @brief RSSI Location Cluster Device Configuration Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param calculationPeriod   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 * @param reportingPeriod   Ver.: always
 */
boolean emberAfRssiLocationClusterDeviceConfigurationResponseCallback(int8u status,
                                                                      int16s power,
                                                                      int16u pathLossExponent,
                                                                      int16u calculationPeriod,
                                                                      int8u numberRssiMeasurements,
                                                                      int16u reportingPeriod);
/** @brief RSSI Location Cluster Get Device Configuration
 *
 * 
 *
 * @param targetAddress   Ver.: always
 */
boolean emberAfRssiLocationClusterGetDeviceConfigurationCallback(int8u* targetAddress);
/** @brief RSSI Location Cluster Get Location Data
 *
 * 
 *
 * @param flags   Ver.: always
 * @param numberResponses   Ver.: always
 * @param targetAddress   Ver.: always
 */
boolean emberAfRssiLocationClusterGetLocationDataCallback(int8u flags,
                                                          int8u numberResponses,
                                                          int8u* targetAddress);
/** @brief RSSI Location Cluster Location Data Notification
 *
 * 
 *
 * @param locationType   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param locationMethod   Ver.: always
 * @param qualityMeasure   Ver.: always
 * @param locationAge   Ver.: always
 */
boolean emberAfRssiLocationClusterLocationDataNotificationCallback(int8u locationType,
                                                                   int16s coordinate1,
                                                                   int16s coordinate2,
                                                                   int16s coordinate3,
                                                                   int16s power,
                                                                   int16u pathLossExponent,
                                                                   int8u locationMethod,
                                                                   int8u qualityMeasure,
                                                                   int16u locationAge);
/** @brief RSSI Location Cluster Location Data Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param locationType   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param locationMethod   Ver.: always
 * @param qualityMeasure   Ver.: always
 * @param locationAge   Ver.: always
 */
boolean emberAfRssiLocationClusterLocationDataResponseCallback(int8u status,
                                                               int8u locationType,
                                                               int16s coordinate1,
                                                               int16s coordinate2,
                                                               int16s coordinate3,
                                                               int16s power,
                                                               int16u pathLossExponent,
                                                               int8u locationMethod,
                                                               int8u qualityMeasure,
                                                               int16u locationAge);
/** @brief RSSI Location Cluster Report Rssi Measurements
 *
 * 
 *
 * @param measuringDevice   Ver.: always
 * @param neighbors   Ver.: always
 * @param neighborsInfo   Ver.: always
 */
boolean emberAfRssiLocationClusterReportRssiMeasurementsCallback(int8u* measuringDevice,
                                                                 int8u neighbors,
                                                                 int8u* neighborsInfo);
/** @brief RSSI Location Cluster Request Own Location
 *
 * 
 *
 * @param blindNode   Ver.: always
 */
boolean emberAfRssiLocationClusterRequestOwnLocationCallback(int8u* blindNode);
/** @brief RSSI Location Cluster Rssi Ping
 *
 * 
 *
 * @param locationType   Ver.: always
 */
boolean emberAfRssiLocationClusterRssiPingCallback(int8u locationType);
/** @brief RSSI Location Cluster Rssi Request
 *
 * 
 *
 */
boolean emberAfRssiLocationClusterRssiRequestCallback(void);
/** @brief RSSI Location Cluster Rssi Response
 *
 * 
 *
 * @param replyingDevice   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param rssi   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 */
boolean emberAfRssiLocationClusterRssiResponseCallback(int8u* replyingDevice,
                                                       int16s coordinate1,
                                                       int16s coordinate2,
                                                       int16s coordinate3,
                                                       int8s rssi,
                                                       int8u numberRssiMeasurements);
/** @brief RSSI Location Cluster Send Pings
 *
 * 
 *
 * @param targetAddress   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 * @param calculationPeriod   Ver.: always
 */
boolean emberAfRssiLocationClusterSendPingsCallback(int8u* targetAddress,
                                                    int8u numberRssiMeasurements,
                                                    int16u calculationPeriod);
/** @brief RSSI Location Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRssiLocationClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief RSSI Location Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRssiLocationClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief RSSI Location Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRssiLocationClusterServerInitCallback(int8u endpoint);
/** @brief RSSI Location Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRssiLocationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief RSSI Location Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRssiLocationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief RSSI Location Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRssiLocationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief RSSI Location Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRssiLocationClusterServerTickCallback(int8u endpoint);
/** @brief RSSI Location Cluster Set Absolute Location
 *
 * 
 *
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 */
boolean emberAfRssiLocationClusterSetAbsoluteLocationCallback(int16s coordinate1,
                                                              int16s coordinate2,
                                                              int16s coordinate3,
                                                              int16s power,
                                                              int16u pathLossExponent);
/** @brief RSSI Location Cluster Set Device Configuration
 *
 * 
 *
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param calculationPeriod   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 * @param reportingPeriod   Ver.: always
 */
boolean emberAfRssiLocationClusterSetDeviceConfigurationCallback(int16s power,
                                                                 int16u pathLossExponent,
                                                                 int16u calculationPeriod,
                                                                 int8u numberRssiMeasurements,
                                                                 int16u reportingPeriod);

/** @} END RSSI Location Cluster Callbacks */

/** @name Binary Input (Basic) Cluster Callbacks */
// @{

/** @brief Binary Input (Basic) Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Binary Input (Basic) Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Binary Input (Basic) Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientInitCallback(int8u endpoint);
/** @brief Binary Input (Basic) Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBinaryInputBasicClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Binary Input (Basic) Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Binary Input (Basic) Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBinaryInputBasicClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Binary Input (Basic) Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientTickCallback(int8u endpoint);
/** @brief Binary Input (Basic) Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Binary Input (Basic) Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Binary Input (Basic) Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerInitCallback(int8u endpoint);
/** @brief Binary Input (Basic) Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBinaryInputBasicClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Binary Input (Basic) Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Binary Input (Basic) Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBinaryInputBasicClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Binary Input (Basic) Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerTickCallback(int8u endpoint);

/** @} END Binary Input (Basic) Cluster Callbacks */

/** @name Commissioning Cluster Callbacks */
// @{

/** @brief Commissioning Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfCommissioningClusterClientAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Commissioning Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfCommissioningClusterClientDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Commissioning Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfCommissioningClusterClientInitCallback(int8u endpoint);
/** @brief Commissioning Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfCommissioningClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Commissioning Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfCommissioningClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame *apsFrame,
                                                          int16u msgLen,
                                                          int8u *message,
                                                          EmberStatus status);
/** @brief Commissioning Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfCommissioningClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u *value);
/** @brief Commissioning Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfCommissioningClusterClientTickCallback(int8u endpoint);
/** @brief Commissioning Cluster Reset Startup Parameters
 *
 * 
 *
 * @param options   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfCommissioningClusterResetStartupParametersCallback(int8u options,
                                                                  int8u index);
/** @brief Commissioning Cluster Reset Startup Parameters Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterResetStartupParametersResponseCallback(int8u status);
/** @brief Commissioning Cluster Restart Device
 *
 * 
 *
 * @param options   Ver.: always
 * @param delay   Ver.: always
 * @param jitter   Ver.: always
 */
boolean emberAfCommissioningClusterRestartDeviceCallback(int8u options,
                                                         int8u delay,
                                                         int8u jitter);
/** @brief Commissioning Cluster Restart Device Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterRestartDeviceResponseCallback(int8u status);
/** @brief Commissioning Cluster Restore Startup Parameters
 *
 * 
 *
 * @param options   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfCommissioningClusterRestoreStartupParametersCallback(int8u options,
                                                                    int8u index);
/** @brief Commissioning Cluster Restore Startup Parameters Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterRestoreStartupParametersResponseCallback(int8u status);
/** @brief Commissioning Cluster Save Startup Parameters
 *
 * 
 *
 * @param options   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfCommissioningClusterSaveStartupParametersCallback(int8u options,
                                                                 int8u index);
/** @brief Commissioning Cluster Save Startup Parameters Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterSaveStartupParametersResponseCallback(int8u status);
/** @brief Commissioning Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfCommissioningClusterServerAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Commissioning Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfCommissioningClusterServerDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Commissioning Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfCommissioningClusterServerInitCallback(int8u endpoint);
/** @brief Commissioning Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfCommissioningClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Commissioning Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfCommissioningClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame *apsFrame,
                                                          int16u msgLen,
                                                          int8u *message,
                                                          EmberStatus status);
/** @brief Commissioning Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfCommissioningClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u *value);
/** @brief Commissioning Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfCommissioningClusterServerTickCallback(int8u endpoint);

/** @} END Commissioning Cluster Callbacks */

/** @name Partition Cluster Callbacks */
// @{

/** @brief Partition Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPartitionClusterClientAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Partition Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPartitionClusterClientDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Partition Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPartitionClusterClientInitCallback(int8u endpoint);
/** @brief Partition Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPartitionClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Partition Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPartitionClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Partition Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPartitionClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Partition Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPartitionClusterClientTickCallback(int8u endpoint);
/** @brief Partition Cluster Multiple Ack
 *
 * 
 *
 * @param ackOptions   Ver.: always
 * @param firstFrameIdAndNackList   Ver.: always
 */
boolean emberAfPartitionClusterMultipleAckCallback(int8u ackOptions,
                                                   int8u* firstFrameIdAndNackList);
/** @brief Partition Cluster Read Handshake Param
 *
 * 
 *
 * @param partitionedClusterId   Ver.: always
 * @param attributeList   Ver.: always
 */
boolean emberAfPartitionClusterReadHandshakeParamCallback(int16u partitionedClusterId,
                                                          int8u* attributeList);
/** @brief Partition Cluster Read Handshake Param Response
 *
 * 
 *
 * @param partitionedClusterId   Ver.: always
 * @param readAttributeStatusRecords   Ver.: always
 */
boolean emberAfPartitionClusterReadHandshakeParamResponseCallback(int16u partitionedClusterId,
                                                                  int8u* readAttributeStatusRecords);
/** @brief Partition Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPartitionClusterServerAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Partition Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPartitionClusterServerDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Partition Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPartitionClusterServerInitCallback(int8u endpoint);
/** @brief Partition Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPartitionClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Partition Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPartitionClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Partition Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPartitionClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Partition Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPartitionClusterServerTickCallback(int8u endpoint);
/** @brief Partition Cluster Transfer Partitioned Frame
 *
 * 
 *
 * @param fragmentationOptions   Ver.: always
 * @param partitionedIndicatorAndFrame   Ver.: always
 */
boolean emberAfPartitionClusterTransferPartitionedFrameCallback(int8u fragmentationOptions,
                                                                int8u* partitionedIndicatorAndFrame);
/** @brief Partition Cluster Write Handshake Param
 *
 * 
 *
 * @param partitionedClusterId   Ver.: always
 * @param writeAttributeRecords   Ver.: always
 */
boolean emberAfPartitionClusterWriteHandshakeParamCallback(int16u partitionedClusterId,
                                                           int8u* writeAttributeRecords);

/** @} END Partition Cluster Callbacks */

/** @name Over the Air Bootloading Cluster Callbacks */
// @{

/** @brief Over the Air Bootloading Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOtaBootloadClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Over the Air Bootloading Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOtaBootloadClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Over the Air Bootloading Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOtaBootloadClusterClientInitCallback(int8u endpoint);
/** @brief Over the Air Bootloading Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOtaBootloadClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Over the Air Bootloading Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOtaBootloadClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Over the Air Bootloading Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOtaBootloadClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Over the Air Bootloading Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOtaBootloadClusterClientTickCallback(int8u endpoint);
/** @brief Over the Air Bootloading Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOtaBootloadClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Over the Air Bootloading Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOtaBootloadClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Over the Air Bootloading Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOtaBootloadClusterServerInitCallback(int8u endpoint);
/** @brief Over the Air Bootloading Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOtaBootloadClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Over the Air Bootloading Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOtaBootloadClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Over the Air Bootloading Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOtaBootloadClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Over the Air Bootloading Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOtaBootloadClusterServerTickCallback(int8u endpoint);

/** @} END Over the Air Bootloading Cluster Callbacks */

/** @name Power Profile Cluster Callbacks */
// @{

/** @brief Power Profile Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerProfileClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Power Profile Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerProfileClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Power Profile Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerProfileClusterClientInitCallback(int8u endpoint);
/** @brief Power Profile Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerProfileClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Power Profile Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerProfileClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief Power Profile Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerProfileClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief Power Profile Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerProfileClusterClientTickCallback(int8u endpoint);
/** @brief Power Profile Cluster Energy Phases Schedule Notification
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleNotificationCallback(int8u powerProfileId,
                                                                           int8u numOfScheduledPhases,
                                                                           int8u* scheduledPhases);
/** @brief Power Profile Cluster Energy Phases Schedule Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleRequestCallback(int8u powerProfileId);
/** @brief Power Profile Cluster Energy Phases Schedule Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleResponseCallback(int8u powerProfileId,
                                                                       int8u numOfScheduledPhases,
                                                                       int8u* scheduledPhases);
/** @brief Power Profile Cluster Energy Phases Schedule State Notification
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleStateNotificationCallback(int8u powerProfileId,
                                                                                int8u numOfScheduledPhases,
                                                                                int8u* scheduledPhases);
/** @brief Power Profile Cluster Energy Phases Schedule State Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleStateRequestCallback(int8u powerProfileId);
/** @brief Power Profile Cluster Energy Phases Schedule State Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleStateResponseCallback(int8u powerProfileId,
                                                                            int8u numOfScheduledPhases,
                                                                            int8u* scheduledPhases);
/** @brief Power Profile Cluster Get Overall Schedule Price
 *
 * 
 *
 */
boolean emberAfPowerProfileClusterGetOverallSchedulePriceCallback(void);
/** @brief Power Profile Cluster Get Overall Schedule Price Response
 *
 * 
 *
 * @param currency   Ver.: always
 * @param price   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 */
boolean emberAfPowerProfileClusterGetOverallSchedulePriceResponseCallback(int16u currency,
                                                                          int32u price,
                                                                          int8u priceTrailingDigit);
/** @brief Power Profile Cluster Get Power Profile Price
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceCallback(int8u powerProfileId);
/** @brief Power Profile Cluster Get Power Profile Price Extended
 *
 * 
 *
 * @param options   Ver.: always
 * @param powerProfileId   Ver.: always
 * @param powerProfileStartTime   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceExtendedCallback(int8u options,
                                                                       int8u powerProfileId,
                                                                       int16u powerProfileStartTime);
/** @brief Power Profile Cluster Get Power Profile Price Extended Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param currency   Ver.: always
 * @param price   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceExtendedResponseCallback(int8u powerProfileId,
                                                                               int16u currency,
                                                                               int32u price,
                                                                               int8u priceTrailingDigit);
/** @brief Power Profile Cluster Get Power Profile Price Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param currency   Ver.: always
 * @param price   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceResponseCallback(int8u powerProfileId,
                                                                       int16u currency,
                                                                       int32u price,
                                                                       int8u priceTrailingDigit);
/** @brief Power Profile Cluster Power Profile Notification
 *
 * 
 *
 * @param totalProfileNum   Ver.: always
 * @param powerProfileId   Ver.: always
 * @param numOfTransferredPhases   Ver.: always
 * @param transferredPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileNotificationCallback(int8u totalProfileNum,
                                                                   int8u powerProfileId,
                                                                   int8u numOfTransferredPhases,
                                                                   int8u* transferredPhases);
/** @brief Power Profile Cluster Power Profile Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileRequestCallback(int8u powerProfileId);
/** @brief Power Profile Cluster Power Profile Response
 *
 * 
 *
 * @param totalProfileNum   Ver.: always
 * @param powerProfileId   Ver.: always
 * @param numOfTransferredPhases   Ver.: always
 * @param transferredPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileResponseCallback(int8u totalProfileNum,
                                                               int8u powerProfileId,
                                                               int8u numOfTransferredPhases,
                                                               int8u* transferredPhases);
/** @brief Power Profile Cluster Power Profile Schedule Constraints Notification
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param startAfter   Ver.: always
 * @param stopBefore   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileScheduleConstraintsNotificationCallback(int8u powerProfileId,
                                                                                      int16u startAfter,
                                                                                      int16u stopBefore);
/** @brief Power Profile Cluster Power Profile Schedule Constraints Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileScheduleConstraintsRequestCallback(int8u powerProfileId);
/** @brief Power Profile Cluster Power Profile Schedule Constraints Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param startAfter   Ver.: always
 * @param stopBefore   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileScheduleConstraintsResponseCallback(int8u powerProfileId,
                                                                                  int16u startAfter,
                                                                                  int16u stopBefore);
/** @brief Power Profile Cluster Power Profile State Request
 *
 * 
 *
 */
boolean emberAfPowerProfileClusterPowerProfileStateRequestCallback(void);
/** @brief Power Profile Cluster Power Profile State Response
 *
 * 
 *
 * @param powerProfileCount   Ver.: always
 * @param powerProfileRecords   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileStateResponseCallback(int8u powerProfileCount,
                                                                    int8u* powerProfileRecords);
/** @brief Power Profile Cluster Power Profiles State Notification
 *
 * 
 *
 * @param powerProfileCount   Ver.: always
 * @param powerProfileRecords   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfilesStateNotificationCallback(int8u powerProfileCount,
                                                                         int8u* powerProfileRecords);
/** @brief Power Profile Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerProfileClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Power Profile Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerProfileClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Power Profile Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerProfileClusterServerInitCallback(int8u endpoint);
/** @brief Power Profile Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerProfileClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Power Profile Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerProfileClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief Power Profile Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerProfileClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief Power Profile Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerProfileClusterServerTickCallback(int8u endpoint);

/** @} END Power Profile Cluster Callbacks */

/** @name Appliance Control Cluster Callbacks */
// @{

/** @brief Appliance Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Appliance Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Appliance Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceControlClusterClientInitCallback(int8u endpoint);
/** @brief Appliance Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Appliance Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Appliance Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Appliance Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceControlClusterClientTickCallback(int8u endpoint);
/** @brief Appliance Control Cluster Execution Of A Command
 *
 * 
 *
 * @param commandId   Ver.: always
 */
boolean emberAfApplianceControlClusterExecutionOfACommandCallback(int8u commandId);
/** @brief Appliance Control Cluster Overload Pause
 *
 * 
 *
 */
boolean emberAfApplianceControlClusterOverloadPauseCallback(void);
/** @brief Appliance Control Cluster Overload Pause Resume
 *
 * 
 *
 */
boolean emberAfApplianceControlClusterOverloadPauseResumeCallback(void);
/** @brief Appliance Control Cluster Overload Warning
 *
 * 
 *
 * @param warningEvent   Ver.: always
 */
boolean emberAfApplianceControlClusterOverloadWarningCallback(int8u warningEvent);
/** @brief Appliance Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Appliance Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Appliance Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceControlClusterServerInitCallback(int8u endpoint);
/** @brief Appliance Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Appliance Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Appliance Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Appliance Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceControlClusterServerTickCallback(int8u endpoint);
/** @brief Appliance Control Cluster Signal State
 *
 * 
 *
 */
boolean emberAfApplianceControlClusterSignalStateCallback(void);
/** @brief Appliance Control Cluster Signal State Notification
 *
 * 
 *
 * @param applianceStatus   Ver.: always
 * @param remoteEnableFlagsAndDeviceStatus2   Ver.: always
 * @param applianceStatus2   Ver.: always
 */
boolean emberAfApplianceControlClusterSignalStateNotificationCallback(int8u applianceStatus,
                                                                      int8u remoteEnableFlagsAndDeviceStatus2,
                                                                      int32u applianceStatus2);
/** @brief Appliance Control Cluster Signal State Response
 *
 * 
 *
 * @param applianceStatus   Ver.: always
 * @param remoteEnableFlagsAndDeviceStatus2   Ver.: always
 * @param applianceStatus2   Ver.: always
 */
boolean emberAfApplianceControlClusterSignalStateResponseCallback(int8u applianceStatus,
                                                                  int8u remoteEnableFlagsAndDeviceStatus2,
                                                                  int32u applianceStatus2);
/** @brief Appliance Control Cluster Write Functions
 *
 * 
 *
 * @param functionId   Ver.: always
 * @param functionDataType   Ver.: always
 * @param functionData   Ver.: always
 */
boolean emberAfApplianceControlClusterWriteFunctionsCallback(int16u functionId,
                                                             int8u functionDataType,
                                                             int8u* functionData);

/** @} END Appliance Control Cluster Callbacks */

/** @name Poll Control Cluster Callbacks */
// @{

/** @brief Poll Control Cluster Check In
 *
 * 
 *
 */
boolean emberAfPollControlClusterCheckInCallback(void);
/** @brief Poll Control Cluster Check In Response
 *
 * 
 *
 * @param startFastPolling   Ver.: always
 * @param fastPollTimeout   Ver.: always
 */
boolean emberAfPollControlClusterCheckInResponseCallback(int8u startFastPolling,
                                                         int16u fastPollTimeout);
/** @brief Poll Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPollControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Poll Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPollControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Poll Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPollControlClusterClientInitCallback(int8u endpoint);
/** @brief Poll Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPollControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Poll Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPollControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Poll Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPollControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Poll Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPollControlClusterClientTickCallback(int8u endpoint);
/** @brief Poll Control Cluster Fast Poll Stop
 *
 * 
 *
 */
boolean emberAfPollControlClusterFastPollStopCallback(void);
/** @brief Poll Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPollControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Poll Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPollControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Poll Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPollControlClusterServerInitCallback(int8u endpoint);
/** @brief Poll Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPollControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Poll Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPollControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Poll Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPollControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Poll Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPollControlClusterServerTickCallback(int8u endpoint);
/** @brief Poll Control Cluster Set Long Poll Interval
 *
 * 
 *
 * @param newLongPollInterval   Ver.: always
 */
boolean emberAfPollControlClusterSetLongPollIntervalCallback(int32u newLongPollInterval);
/** @brief Poll Control Cluster Set Short Poll Interval
 *
 * 
 *
 * @param newShortPollInterval   Ver.: always
 */
boolean emberAfPollControlClusterSetShortPollIntervalCallback(int16u newShortPollInterval);

/** @} END Poll Control Cluster Callbacks */

/** @name Green Power Cluster Callbacks */
// @{

/** @brief Green Power Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGreenPowerClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Green Power Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGreenPowerClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Green Power Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGreenPowerClusterClientInitCallback(int8u endpoint);
/** @brief Green Power Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGreenPowerClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Green Power Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGreenPowerClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Green Power Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGreenPowerClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Green Power Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGreenPowerClusterClientTickCallback(int8u endpoint);
/** @brief Green Power Cluster Gp Commissioning Notification
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param endpoint   Ver.: since gp-1.0-09-5499-24
 * @param gpdSecurityFrameCounter   Ver.: since gp-1.0-09-5499-24
 * @param gpdCommandId   Ver.: since gp-1.0-09-5499-24
 * @param gpdCommandPayload   Ver.: since gp-1.0-09-5499-24
 * @param gppShortAddress   Ver.: since gp-1.0-09-5499-24
 * @param gppLink   Ver.: since gp-1.0-09-5499-24
 * @param mic   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpCommissioningNotificationCallback(int16u options,
                                                                    int32u gpdSrcId,
                                                                    int8u* gpdIeee,
                                                                    int8u endpoint,
                                                                    int32u gpdSecurityFrameCounter,
                                                                    int8u gpdCommandId,
                                                                    int8u* gpdCommandPayload,
                                                                    int16u gppShortAddress,
                                                                    int8u gppLink,
                                                                    int32u mic);
/** @brief Green Power Cluster Gp Notification
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param gpdEndpoint   Ver.: since gp-1.0-09-5499-24
 * @param gpdSecurityFrameCounter   Ver.: since gp-1.0-09-5499-24
 * @param gpdCommandId   Ver.: since gp-1.0-09-5499-24
 * @param gpdCommandPayload   Ver.: since gp-1.0-09-5499-24
 * @param gppShortAddress   Ver.: since gp-1.0-09-5499-24
 * @param gppDistance   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpNotificationCallback(int16u options,
                                                       int32u gpdSrcId,
                                                       int8u* gpdIeee,
                                                       int8u gpdEndpoint,
                                                       int32u gpdSecurityFrameCounter,
                                                       int8u gpdCommandId,
                                                       int8u* gpdCommandPayload,
                                                       int16u gppShortAddress,
                                                       int8u gppDistance);
/** @brief Green Power Cluster Gp Notification Response
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param gpdSecurityFrameCounter   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpNotificationResponseCallback(int8u options,
                                                               int32u gpdSrcId,
                                                               int8u* gpdIeee,
                                                               int32u gpdSecurityFrameCounter);
/** @brief Green Power Cluster Gp Pairing
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param endpoint   Ver.: since gp-1.0-09-5499-24
 * @param sinkIeeeAddress   Ver.: since gp-1.0-09-5499-24
 * @param sinkNwkAddress   Ver.: since gp-1.0-09-5499-24
 * @param sinkGroupId   Ver.: since gp-1.0-09-5499-24
 * @param deviceId   Ver.: since gp-1.0-09-5499-24
 * @param gpdSecurityFrameCounter   Ver.: since gp-1.0-09-5499-24
 * @param gpdKey   Ver.: since gp-1.0-09-5499-24
 * @param assignedAlias   Ver.: since gp-1.0-09-5499-24
 * @param forwardingRadius   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpPairingCallback(int32u options,
                                                  int32u gpdSrcId,
                                                  int8u* gpdIeee,
                                                  int8u endpoint,
                                                  int8u* sinkIeeeAddress,
                                                  int16u sinkNwkAddress,
                                                  int16u sinkGroupId,
                                                  int8u deviceId,
                                                  int32u gpdSecurityFrameCounter,
                                                  int8u* gpdKey,
                                                  int16u assignedAlias,
                                                  int8u forwardingRadius);
/** @brief Green Power Cluster Gp Pairing Configuration
 *
 * 
 *
 * @param actions   Ver.: since gp-1.0-09-5499-24
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param endpoint   Ver.: since gp-1.0-09-5499-24
 * @param deviceId   Ver.: since gp-1.0-09-5499-24
 * @param groupListCount   Ver.: since gp-1.0-09-5499-24
 * @param groupList   Ver.: since gp-1.0-09-5499-24
 * @param gpdAssignedAlias   Ver.: since gp-1.0-09-5499-24
 * @param forwardingRadius   Ver.: since gp-1.0-09-5499-24
 * @param securityOptions   Ver.: since gp-1.0-09-5499-24
 * @param gpdSecurityFrameCounter   Ver.: since gp-1.0-09-5499-24
 * @param gpdSecurityKey   Ver.: since gp-1.0-09-5499-24
 * @param numberOfPairedEndpoints   Ver.: since gp-1.0-09-5499-24
 * @param pairedEndpoints   Ver.: since gp-1.0-09-5499-24
 * @param applicationInformation   Ver.: always
 * @param manufacturerId   Ver.: always
 * @param modeId   Ver.: always
 * @param numberOfGpdCommands   Ver.: always
 * @param gpdCommandIdList   Ver.: always
 * @param clusterIdListCount   Ver.: always
 * @param clusterListServer   Ver.: always
 * @param clusterListClient   Ver.: always
 */
boolean emberAfGreenPowerClusterGpPairingConfigurationCallback(int8u actions,
                                                               int16u options,
                                                               int32u gpdSrcId,
                                                               int8u* gpdIeee,
                                                               int8u endpoint,
                                                               int8u deviceId,
                                                               int8u groupListCount,
                                                               int8u* groupList,
                                                               int16u gpdAssignedAlias,
                                                               int8u forwardingRadius,
                                                               int8u securityOptions,
                                                               int32u gpdSecurityFrameCounter,
                                                               int8u* gpdSecurityKey,
                                                               int8u numberOfPairedEndpoints,
                                                               int8u* pairedEndpoints,
                                                               int8u applicationInformation,
                                                               int16u manufacturerId,
                                                               int16u modeId,
                                                               int8u numberOfGpdCommands,
                                                               int8u* gpdCommandIdList,
                                                               int8u clusterIdListCount,
                                                               int8u* clusterListServer,
                                                               int8u* clusterListClient);
/** @brief Green Power Cluster Gp Pairing Search
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param endpoint   Ver.: always
 */
boolean emberAfGreenPowerClusterGpPairingSearchCallback(int16u options,
                                                        int32u gpdSrcId,
                                                        int8u* gpdIeee,
                                                        int8u endpoint);
/** @brief Green Power Cluster Gp Proxy Commissioning Mode
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param commissioningWindow   Ver.: since gp-1.0-09-5499-24
 * @param channel   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpProxyCommissioningModeCallback(int8u options,
                                                                 int16u commissioningWindow,
                                                                 int8u channel);
/** @brief Green Power Cluster Gp Proxy Table Request
 *
 * 
 *
 * @param options   Ver.: always
 * @param gpdSrcId   Ver.: always
 * @param gpdIeee   Ver.: always
 * @param endpoint   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfGreenPowerClusterGpProxyTableRequestCallback(int8u options,
                                                            int32u gpdSrcId,
                                                            int8u* gpdIeee,
                                                            int8u endpoint,
                                                            int8u index);
/** @brief Green Power Cluster Gp Proxy Table Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param totalNumberOfNonEmptyProxyTableEntries   Ver.: always
 * @param startIndex   Ver.: always
 * @param entriesCount   Ver.: always
 * @param proxyTableEntries   Ver.: always
 */
boolean emberAfGreenPowerClusterGpProxyTableResponseCallback(int8u status,
                                                             int8u totalNumberOfNonEmptyProxyTableEntries,
                                                             int8u startIndex,
                                                             int8u entriesCount,
                                                             int8u* proxyTableEntries);
/** @brief Green Power Cluster Gp Response
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param tempMasterShortAddress   Ver.: since gp-1.0-09-5499-24
 * @param tempMasterTxChannel   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param endpoint   Ver.: always
 * @param gpdCommandId   Ver.: since gp-1.0-09-5499-24
 * @param gpdCommandPayload   Ver.: always
 */
boolean emberAfGreenPowerClusterGpResponseCallback(int8u options,
                                                   int16u tempMasterShortAddress,
                                                   int8u tempMasterTxChannel,
                                                   int32u gpdSrcId,
                                                   int8u* gpdIeee,
                                                   int8u endpoint,
                                                   int8u gpdCommandId,
                                                   int8u* gpdCommandPayload);
/** @brief Green Power Cluster Gp Sink Commissioning Mode
 *
 * 
 *
 * @param options   Ver.: always
 * @param gpmAddrForSecurity   Ver.: always
 * @param gpmAddrForPairing   Ver.: always
 * @param sinkEndpoint   Ver.: always
 */
boolean emberAfGreenPowerClusterGpSinkCommissioningModeCallback(int8u options,
                                                                int16u gpmAddrForSecurity,
                                                                int16u gpmAddrForPairing,
                                                                int8u sinkEndpoint);
/** @brief Green Power Cluster Gp Sink Table Request
 *
 * 
 *
 * @param options   Ver.: always
 * @param gpdSrcId   Ver.: always
 * @param gpdIeee   Ver.: always
 * @param endpoint   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfGreenPowerClusterGpSinkTableRequestCallback(int8u options,
                                                           int32u gpdSrcId,
                                                           int8u* gpdIeee,
                                                           int8u endpoint,
                                                           int8u index);
/** @brief Green Power Cluster Gp Sink Table Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param totalNumberofNonEmptySinkTableEntries   Ver.: always
 * @param startIndex   Ver.: always
 * @param sinkTableEntriesCount   Ver.: always
 * @param sinkTableEntries   Ver.: always
 */
boolean emberAfGreenPowerClusterGpSinkTableResponseCallback(int8u status,
                                                            int8u totalNumberofNonEmptySinkTableEntries,
                                                            int8u startIndex,
                                                            int8u sinkTableEntriesCount,
                                                            int8u* sinkTableEntries);
/** @brief Green Power Cluster Gp Translation Table Request
 *
 * 
 *
 * @param startIndex   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpTranslationTableRequestCallback(int8u startIndex);
/** @brief Green Power Cluster Gp Translation Table Update
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param endpoint   Ver.: since gp-1.0-09-5499-24
 * @param translations   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpTranslationTableUpdateCallback(int16u options,
                                                                 int32u gpdSrcId,
                                                                 int8u* gpdIeee,
                                                                 int8u endpoint,
                                                                 int8u* translations);
/** @brief Green Power Cluster Gp Tunneling Stop
 *
 * 
 *
 * @param options   Ver.: since gp-1.0-09-5499-24
 * @param gpdSrcId   Ver.: since gp-1.0-09-5499-24
 * @param gpdIeee   Ver.: since gp-1.0-09-5499-24
 * @param endpoint   Ver.: since gp-1.0-09-5499-24
 * @param gpdSecurityFrameCounter   Ver.: since gp-1.0-09-5499-24
 * @param gppShortAddress   Ver.: since gp-1.0-09-5499-24
 * @param gppDistance   Ver.: since gp-1.0-09-5499-24
 */
boolean emberAfGreenPowerClusterGpTunnelingStopCallback(int8u options,
                                                        int32u gpdSrcId,
                                                        int8u* gpdIeee,
                                                        int8u endpoint,
                                                        int32u gpdSecurityFrameCounter,
                                                        int16u gppShortAddress,
                                                        int8s gppDistance);
/** @brief Green Power Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGreenPowerClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Green Power Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGreenPowerClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Green Power Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGreenPowerClusterServerInitCallback(int8u endpoint);
/** @brief Green Power Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGreenPowerClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Green Power Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGreenPowerClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Green Power Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGreenPowerClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Green Power Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGreenPowerClusterServerTickCallback(int8u endpoint);

/** @} END Green Power Cluster Callbacks */

/** @name Keep-Alive Cluster Callbacks */
// @{

/** @brief Keep-Alive Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfKeepaliveClusterClientAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Keep-Alive Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfKeepaliveClusterClientDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Keep-Alive Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfKeepaliveClusterClientInitCallback(int8u endpoint);
/** @brief Keep-Alive Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfKeepaliveClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Keep-Alive Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfKeepaliveClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Keep-Alive Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfKeepaliveClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Keep-Alive Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfKeepaliveClusterClientTickCallback(int8u endpoint);
/** @brief Keep-Alive Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfKeepaliveClusterServerAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Keep-Alive Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfKeepaliveClusterServerDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Keep-Alive Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfKeepaliveClusterServerInitCallback(int8u endpoint);
/** @brief Keep-Alive Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfKeepaliveClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Keep-Alive Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfKeepaliveClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Keep-Alive Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfKeepaliveClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Keep-Alive Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfKeepaliveClusterServerTickCallback(int8u endpoint);

/** @} END Keep-Alive Cluster Callbacks */

/** @name Shade Configuration Cluster Callbacks */
// @{

/** @brief Shade Configuration Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfShadeConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Shade Configuration Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfShadeConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Shade Configuration Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfShadeConfigClusterClientInitCallback(int8u endpoint);
/** @brief Shade Configuration Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfShadeConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Shade Configuration Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfShadeConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Shade Configuration Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfShadeConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Shade Configuration Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfShadeConfigClusterClientTickCallback(int8u endpoint);
/** @brief Shade Configuration Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfShadeConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Shade Configuration Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfShadeConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Shade Configuration Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfShadeConfigClusterServerInitCallback(int8u endpoint);
/** @brief Shade Configuration Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfShadeConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Shade Configuration Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfShadeConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Shade Configuration Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfShadeConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Shade Configuration Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfShadeConfigClusterServerTickCallback(int8u endpoint);

/** @} END Shade Configuration Cluster Callbacks */

/** @name Door Lock Cluster Callbacks */
// @{

/** @brief Door Lock Cluster Clear All Pins
 *
 * 
 *
 */
boolean emberAfDoorLockClusterClearAllPinsCallback(void);
/** @brief Door Lock Cluster Clear All Pins Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearAllPinsResponseCallback(int8u status);
/** @brief Door Lock Cluster Clear All Rfids
 *
 * 
 *
 */
boolean emberAfDoorLockClusterClearAllRfidsCallback(void);
/** @brief Door Lock Cluster Clear All Rfids Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearAllRfidsResponseCallback(int8u status);
/** @brief Door Lock Cluster Clear Holiday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 */
boolean emberAfDoorLockClusterClearHolidayScheduleCallback(int8u scheduleId);
/** @brief Door Lock Cluster Clear Holiday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearHolidayScheduleResponseCallback(int8u status);
/** @brief Door Lock Cluster Clear Pin
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearPinCallback(int16u userId);
/** @brief Door Lock Cluster Clear Pin Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearPinResponseCallback(int8u status);
/** @brief Door Lock Cluster Clear Rfid
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearRfidCallback(int16u userId);
/** @brief Door Lock Cluster Clear Rfid Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearRfidResponseCallback(int8u status);
/** @brief Door Lock Cluster Clear Weekday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearWeekdayScheduleCallback(int8u scheduleId,
                                                           int16u userId);
/** @brief Door Lock Cluster Clear Weekday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearWeekdayScheduleResponseCallback(int8u status);
/** @brief Door Lock Cluster Clear Yearday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearYeardayScheduleCallback(int8u scheduleId,
                                                           int16u userId);
/** @brief Door Lock Cluster Clear Yearday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearYeardayScheduleResponseCallback(int8u status);
/** @brief Door Lock Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDoorLockClusterClientAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Door Lock Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDoorLockClusterClientDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Door Lock Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDoorLockClusterClientInitCallback(int8u endpoint);
/** @brief Door Lock Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDoorLockClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Door Lock Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDoorLockClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Door Lock Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDoorLockClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Door Lock Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDoorLockClusterClientTickCallback(int8u endpoint);
/** @brief Door Lock Cluster Get Holiday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 */
boolean emberAfDoorLockClusterGetHolidayScheduleCallback(int8u scheduleId);
/** @brief Door Lock Cluster Get Holiday Schedule Response
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param status   Ver.: always
 * @param localStartTime   Ver.: since ha-1.2-05-3520-29
 * @param localEndTime   Ver.: since ha-1.2-05-3520-29
 * @param operatingModeDuringHoliday   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterGetHolidayScheduleResponseCallback(int8u scheduleId,
                                                                 int8u status,
                                                                 int32u localStartTime,
                                                                 int32u localEndTime,
                                                                 int8u operatingModeDuringHoliday);
/** @brief Door Lock Cluster Get Log Record
 *
 * 
 *
 * @param logIndex   Ver.: always
 */
boolean emberAfDoorLockClusterGetLogRecordCallback(int16u logIndex);
/** @brief Door Lock Cluster Get Log Record Response
 *
 * 
 *
 * @param logEntryId   Ver.: always
 * @param timestamp   Ver.: always
 * @param eventType   Ver.: always
 * @param source   Ver.: always
 * @param eventIdOrAlarmCode   Ver.: always
 * @param userId   Ver.: always
 * @param pin   Ver.: always
 */
boolean emberAfDoorLockClusterGetLogRecordResponseCallback(int16u logEntryId,
                                                           int32u timestamp,
                                                           int8u eventType,
                                                           int8u source,
                                                           int8u eventIdOrAlarmCode,
                                                           int16u userId,
                                                           int8u* pin);
/** @brief Door Lock Cluster Get Pin
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetPinCallback(int16u userId);
/** @brief Door Lock Cluster Get Pin Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param pin   Ver.: always
 */
boolean emberAfDoorLockClusterGetPinResponseCallback(int16u userId,
                                                     int8u userStatus,
                                                     int8u userType,
                                                     int8u* pin);
/** @brief Door Lock Cluster Get Rfid
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetRfidCallback(int16u userId);
/** @brief Door Lock Cluster Get Rfid Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param rfid   Ver.: always
 */
boolean emberAfDoorLockClusterGetRfidResponseCallback(int16u userId,
                                                      int8u userStatus,
                                                      int8u userType,
                                                      int8u* rfid);
/** @brief Door Lock Cluster Get User Status
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserStatusCallback(int16u userId);
/** @brief Door Lock Cluster Get User Status Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserStatusResponseCallback(int16u userId,
                                                            int8u status);
/** @brief Door Lock Cluster Get User Type
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserTypeCallback(int16u userId);
/** @brief Door Lock Cluster Get User Type Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserTypeResponseCallback(int16u userId,
                                                          int8u userType);
/** @brief Door Lock Cluster Get Weekday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetWeekdayScheduleCallback(int8u scheduleId,
                                                         int16u userId);
/** @brief Door Lock Cluster Get Weekday Schedule Response
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param status   Ver.: always
 * @param daysMask   Ver.: since ha-1.2-05-3520-29
 * @param startHour   Ver.: since ha-1.2-05-3520-29
 * @param startMinute   Ver.: since ha-1.2-05-3520-29
 * @param endHour   Ver.: since ha-1.2-05-3520-29
 * @param endMinute   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterGetWeekdayScheduleResponseCallback(int8u scheduleId,
                                                                 int16u userId,
                                                                 int8u status,
                                                                 int8u daysMask,
                                                                 int8u startHour,
                                                                 int8u startMinute,
                                                                 int8u endHour,
                                                                 int8u endMinute);
/** @brief Door Lock Cluster Get Yearday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetYeardayScheduleCallback(int8u scheduleId,
                                                         int16u userId);
/** @brief Door Lock Cluster Get Yearday Schedule Response
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param status   Ver.: always
 * @param localStartTime   Ver.: since ha-1.2-05-3520-29
 * @param localEndTime   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterGetYeardayScheduleResponseCallback(int8u scheduleId,
                                                                 int16u userId,
                                                                 int8u status,
                                                                 int32u localStartTime,
                                                                 int32u localEndTime);
/** @brief Door Lock Cluster Lock Door
 *
 * 
 *
 * @param PIN   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterLockDoorCallback(int8u* PIN);
/** @brief Door Lock Cluster Lock Door Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterLockDoorResponseCallback(int8u status);
/** @brief Door Lock Cluster Operation Event Notification
 *
 * 
 *
 * @param source   Ver.: always
 * @param eventCode   Ver.: always
 * @param userId   Ver.: always
 * @param pin   Ver.: always
 * @param timeStamp   Ver.: always
 * @param data   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterOperationEventNotificationCallback(int8u source,
                                                                 int8u eventCode,
                                                                 int16u userId,
                                                                 int8u* pin,
                                                                 int32u timeStamp,
                                                                 int8u* data);
/** @brief Door Lock Cluster Programming Event Notification
 *
 * 
 *
 * @param source   Ver.: always
 * @param eventCode   Ver.: always
 * @param userId   Ver.: always
 * @param pin   Ver.: always
 * @param userType   Ver.: always
 * @param userStatus   Ver.: always
 * @param timeStamp   Ver.: always
 * @param data   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterProgrammingEventNotificationCallback(int8u source,
                                                                   int8u eventCode,
                                                                   int16u userId,
                                                                   int8u* pin,
                                                                   int8u userType,
                                                                   int8u userStatus,
                                                                   int32u timeStamp,
                                                                   int8u* data);
/** @brief Door Lock Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDoorLockClusterServerAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Door Lock Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDoorLockClusterServerDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Door Lock Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDoorLockClusterServerInitCallback(int8u endpoint);
/** @brief Door Lock Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDoorLockClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Door Lock Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDoorLockClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Door Lock Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDoorLockClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Door Lock Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDoorLockClusterServerTickCallback(int8u endpoint);
/** @brief Door Lock Cluster Set Holiday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param localStartTime   Ver.: always
 * @param localEndTime   Ver.: always
 * @param operatingModeDuringHoliday   Ver.: always
 */
boolean emberAfDoorLockClusterSetHolidayScheduleCallback(int8u scheduleId,
                                                         int32u localStartTime,
                                                         int32u localEndTime,
                                                         int8u operatingModeDuringHoliday);
/** @brief Door Lock Cluster Set Holiday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetHolidayScheduleResponseCallback(int8u status);
/** @brief Door Lock Cluster Set Pin
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param pin   Ver.: always
 */
boolean emberAfDoorLockClusterSetPinCallback(int16u userId,
                                             int8u userStatus,
                                             int8u userType,
                                             int8u* pin);
/** @brief Door Lock Cluster Set Pin Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetPinResponseCallback(int8u status);
/** @brief Door Lock Cluster Set Rfid
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param id   Ver.: always
 */
boolean emberAfDoorLockClusterSetRfidCallback(int16u userId,
                                              int8u userStatus,
                                              int8u userType,
                                              int8u* id);
/** @brief Door Lock Cluster Set Rfid Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetRfidResponseCallback(int8u status);
/** @brief Door Lock Cluster Set User Status
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserStatusCallback(int16u userId,
                                                    int8u userStatus);
/** @brief Door Lock Cluster Set User Status Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserStatusResponseCallback(int8u status);
/** @brief Door Lock Cluster Set User Type
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserTypeCallback(int16u userId,
                                                  int8u userType);
/** @brief Door Lock Cluster Set User Type Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserTypeResponseCallback(int8u status);
/** @brief Door Lock Cluster Set Weekday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param daysMask   Ver.: always
 * @param startHour   Ver.: always
 * @param startMinute   Ver.: always
 * @param endHour   Ver.: always
 * @param endMinute   Ver.: always
 */
boolean emberAfDoorLockClusterSetWeekdayScheduleCallback(int8u scheduleId,
                                                         int16u userId,
                                                         int8u daysMask,
                                                         int8u startHour,
                                                         int8u startMinute,
                                                         int8u endHour,
                                                         int8u endMinute);
/** @brief Door Lock Cluster Set Weekday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetWeekdayScheduleResponseCallback(int8u status);
/** @brief Door Lock Cluster Set Yearday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param localStartTime   Ver.: always
 * @param localEndTime   Ver.: always
 */
boolean emberAfDoorLockClusterSetYeardayScheduleCallback(int8u scheduleId,
                                                         int16u userId,
                                                         int32u localStartTime,
                                                         int32u localEndTime);
/** @brief Door Lock Cluster Set Yearday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetYeardayScheduleResponseCallback(int8u status);
/** @brief Door Lock Cluster Toggle
 *
 * 
 *
 * @param pin   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterToggleCallback(int8u* pin);
/** @brief Door Lock Cluster Toggle Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterToggleResponseCallback(int8u status);
/** @brief Door Lock Cluster Unlock Door
 *
 * 
 *
 * @param PIN   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterUnlockDoorCallback(int8u* PIN);
/** @brief Door Lock Cluster Unlock Door Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterUnlockDoorResponseCallback(int8u status);
/** @brief Door Lock Cluster Unlock With Timeout
 *
 * 
 *
 * @param timeoutInSeconds   Ver.: always
 * @param pin   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterUnlockWithTimeoutCallback(int16u timeoutInSeconds,
                                                        int8u* pin);
/** @brief Door Lock Cluster Unlock With Timeout Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterUnlockWithTimeoutResponseCallback(int8u status);

/** @} END Door Lock Cluster Callbacks */

/** @name Window Covering Cluster Callbacks */
// @{

/** @brief Window Covering Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfWindowCoveringClusterClientAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Window Covering Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfWindowCoveringClusterClientDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Window Covering Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfWindowCoveringClusterClientInitCallback(int8u endpoint);
/** @brief Window Covering Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfWindowCoveringClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Window Covering Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfWindowCoveringClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame *apsFrame,
                                                           int16u msgLen,
                                                           int8u *message,
                                                           EmberStatus status);
/** @brief Window Covering Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfWindowCoveringClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u *value);
/** @brief Window Covering Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfWindowCoveringClusterClientTickCallback(int8u endpoint);
/** @brief Window Covering Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfWindowCoveringClusterServerAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Window Covering Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfWindowCoveringClusterServerDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Window Covering Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfWindowCoveringClusterServerInitCallback(int8u endpoint);
/** @brief Window Covering Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfWindowCoveringClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Window Covering Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfWindowCoveringClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame *apsFrame,
                                                           int16u msgLen,
                                                           int8u *message,
                                                           EmberStatus status);
/** @brief Window Covering Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfWindowCoveringClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u *value);
/** @brief Window Covering Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfWindowCoveringClusterServerTickCallback(int8u endpoint);
/** @brief Window Covering Cluster Window Covering Down Close
 *
 * 
 *
 */
boolean emberAfWindowCoveringClusterWindowCoveringDownCloseCallback(void);
/** @brief Window Covering Cluster Window Covering Go To Lift Percentage
 *
 * 
 *
 * @param percentageLiftValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToLiftPercentageCallback(int8u percentageLiftValue);
/** @brief Window Covering Cluster Window Covering Go To Lift Value
 *
 * 
 *
 * @param liftValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToLiftValueCallback(int16u liftValue);
/** @brief Window Covering Cluster Window Covering Go To Tilt Percentage
 *
 * 
 *
 * @param percentageTiltValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToTiltPercentageCallback(int8u percentageTiltValue);
/** @brief Window Covering Cluster Window Covering Go To Tilt Value
 *
 * 
 *
 * @param tiltValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToTiltValueCallback(int16u tiltValue);
/** @brief Window Covering Cluster Window Covering Stop
 *
 * 
 *
 */
boolean emberAfWindowCoveringClusterWindowCoveringStopCallback(void);
/** @brief Window Covering Cluster Window Covering Up Open
 *
 * 
 *
 */
boolean emberAfWindowCoveringClusterWindowCoveringUpOpenCallback(void);

/** @} END Window Covering Cluster Callbacks */

/** @name Pump Configuration and Control Cluster Callbacks */
// @{

/** @brief Pump Configuration and Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPumpConfigControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Pump Configuration and Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPumpConfigControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Pump Configuration and Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPumpConfigControlClusterClientInitCallback(int8u endpoint);
/** @brief Pump Configuration and Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPumpConfigControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Pump Configuration and Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPumpConfigControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief Pump Configuration and Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPumpConfigControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief Pump Configuration and Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPumpConfigControlClusterClientTickCallback(int8u endpoint);
/** @brief Pump Configuration and Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPumpConfigControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Pump Configuration and Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPumpConfigControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Pump Configuration and Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPumpConfigControlClusterServerInitCallback(int8u endpoint);
/** @brief Pump Configuration and Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPumpConfigControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Pump Configuration and Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPumpConfigControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief Pump Configuration and Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPumpConfigControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief Pump Configuration and Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPumpConfigControlClusterServerTickCallback(int8u endpoint);

/** @} END Pump Configuration and Control Cluster Callbacks */

/** @name Thermostat Cluster Callbacks */
// @{

/** @brief Thermostat Cluster Clear Weekly Schedule
 *
 * 
 *
 */
boolean emberAfThermostatClusterClearWeeklyScheduleCallback(void);
/** @brief Thermostat Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Thermostat Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Thermostat Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatClusterClientInitCallback(int8u endpoint);
/** @brief Thermostat Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Thermostat Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Thermostat Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Thermostat Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatClusterClientTickCallback(int8u endpoint);
/** @brief Thermostat Cluster Current Weekly Schedule
 *
 * 
 *
 * @param numberOfTransitionsForSequence   Ver.: always
 * @param dayOfWeekForSequence   Ver.: always
 * @param modeForSequence   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfThermostatClusterCurrentWeeklyScheduleCallback(int8u numberOfTransitionsForSequence,
                                                              int8u dayOfWeekForSequence,
                                                              int8u modeForSequence,
                                                              int8u* payload);
/** @brief Thermostat Cluster Get Relay Status Log
 *
 * 
 *
 */
boolean emberAfThermostatClusterGetRelayStatusLogCallback(void);
/** @brief Thermostat Cluster Get Weekly Schedule
 *
 * 
 *
 * @param daysToReturn   Ver.: always
 * @param modeToReturn   Ver.: always
 */
boolean emberAfThermostatClusterGetWeeklyScheduleCallback(int8u daysToReturn,
                                                          int8u modeToReturn);
/** @brief Thermostat Cluster Relay Status Log
 *
 * 
 *
 * @param timeOfDay   Ver.: always
 * @param relayStatus   Ver.: always
 * @param localTemperature   Ver.: always
 * @param humidityInPercentage   Ver.: always
 * @param setpoint   Ver.: always
 * @param unreadEntries   Ver.: always
 */
boolean emberAfThermostatClusterRelayStatusLogCallback(int16u timeOfDay,
                                                       int16u relayStatus,
                                                       int16s localTemperature,
                                                       int8u humidityInPercentage,
                                                       int16s setpoint,
                                                       int16u unreadEntries);
/** @brief Thermostat Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Thermostat Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Thermostat Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatClusterServerInitCallback(int8u endpoint);
/** @brief Thermostat Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Thermostat Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Thermostat Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Thermostat Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatClusterServerTickCallback(int8u endpoint);
/** @brief Thermostat Cluster Set Weekly Schedule
 *
 * 
 *
 * @param numberOfTransitionsForSequence   Ver.: always
 * @param dayOfWeekForSequence   Ver.: always
 * @param modeForSequence   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfThermostatClusterSetWeeklyScheduleCallback(int8u numberOfTransitionsForSequence,
                                                          int8u dayOfWeekForSequence,
                                                          int8u modeForSequence,
                                                          int8u* payload);
/** @brief Thermostat Cluster Setpoint Raise Lower
 *
 * 
 *
 * @param mode   Ver.: always
 * @param amount   Ver.: always
 */
boolean emberAfThermostatClusterSetpointRaiseLowerCallback(int8u mode,
                                                           int8s amount);

/** @} END Thermostat Cluster Callbacks */

/** @name Fan Control Cluster Callbacks */
// @{

/** @brief Fan Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFanControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Fan Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFanControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Fan Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFanControlClusterClientInitCallback(int8u endpoint);
/** @brief Fan Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFanControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Fan Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFanControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Fan Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFanControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Fan Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFanControlClusterClientTickCallback(int8u endpoint);
/** @brief Fan Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFanControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Fan Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFanControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Fan Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFanControlClusterServerInitCallback(int8u endpoint);
/** @brief Fan Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFanControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Fan Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFanControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Fan Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFanControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Fan Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFanControlClusterServerTickCallback(int8u endpoint);

/** @} END Fan Control Cluster Callbacks */

/** @name Dehumidification Control Cluster Callbacks */
// @{

/** @brief Dehumidification Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDehumidControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Dehumidification Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDehumidControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Dehumidification Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDehumidControlClusterClientInitCallback(int8u endpoint);
/** @brief Dehumidification Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDehumidControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Dehumidification Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDehumidControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame *apsFrame,
                                                           int16u msgLen,
                                                           int8u *message,
                                                           EmberStatus status);
/** @brief Dehumidification Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDehumidControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u *value);
/** @brief Dehumidification Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDehumidControlClusterClientTickCallback(int8u endpoint);
/** @brief Dehumidification Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDehumidControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Dehumidification Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDehumidControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Dehumidification Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDehumidControlClusterServerInitCallback(int8u endpoint);
/** @brief Dehumidification Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDehumidControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Dehumidification Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDehumidControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame *apsFrame,
                                                           int16u msgLen,
                                                           int8u *message,
                                                           EmberStatus status);
/** @brief Dehumidification Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDehumidControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u *value);
/** @brief Dehumidification Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDehumidControlClusterServerTickCallback(int8u endpoint);

/** @} END Dehumidification Control Cluster Callbacks */

/** @name Thermostat User Interface Configuration Cluster Callbacks */
// @{

/** @brief Thermostat User Interface Configuration Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId);
/** @brief Thermostat User Interface Configuration Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                                   int8u commandId,
                                                                   EmberAfStatus status);
/** @brief Thermostat User Interface Configuration Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientInitCallback(int8u endpoint);
/** @brief Thermostat User Interface Configuration Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatUiConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                        EmberAfAttributeId attributeId,
                                                                                        int16u manufacturerCode);
/** @brief Thermostat User Interface Configuration Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                               int16u indexOrDestination,
                                                               EmberApsFrame *apsFrame,
                                                               int16u msgLen,
                                                               int8u *message,
                                                               EmberStatus status);
/** @brief Thermostat User Interface Configuration Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatUiConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                EmberAfAttributeType attributeType,
                                                                                int8u size,
                                                                                int8u *value);
/** @brief Thermostat User Interface Configuration Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientTickCallback(int8u endpoint);
/** @brief Thermostat User Interface Configuration Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId);
/** @brief Thermostat User Interface Configuration Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                                   int8u commandId,
                                                                   EmberAfStatus status);
/** @brief Thermostat User Interface Configuration Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerInitCallback(int8u endpoint);
/** @brief Thermostat User Interface Configuration Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatUiConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                        EmberAfAttributeId attributeId,
                                                                                        int16u manufacturerCode);
/** @brief Thermostat User Interface Configuration Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                               int16u indexOrDestination,
                                                               EmberApsFrame *apsFrame,
                                                               int16u msgLen,
                                                               int8u *message,
                                                               EmberStatus status);
/** @brief Thermostat User Interface Configuration Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatUiConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                EmberAfAttributeType attributeType,
                                                                                int8u size,
                                                                                int8u *value);
/** @brief Thermostat User Interface Configuration Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerTickCallback(int8u endpoint);

/** @} END Thermostat User Interface Configuration Cluster Callbacks */

/** @name Color Control Cluster Callbacks */
// @{

/** @brief Color Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfColorControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Color Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfColorControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Color Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfColorControlClusterClientInitCallback(int8u endpoint);
/** @brief Color Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfColorControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Color Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfColorControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief Color Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfColorControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief Color Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfColorControlClusterClientTickCallback(int8u endpoint);
/** @brief Color Control Cluster Color Loop Set
 *
 * 
 *
 * @param updateFlags   Ver.: always
 * @param action   Ver.: always
 * @param direction   Ver.: always
 * @param time   Ver.: always
 * @param startHue   Ver.: always
 */
boolean emberAfColorControlClusterColorLoopSetCallback(int8u updateFlags,
                                                       int8u action,
                                                       int8u direction,
                                                       int16u time,
                                                       int16u startHue);
/** @brief Color Control Cluster Enhanced Move Hue
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedMoveHueCallback(int8u moveMode,
                                                          int16u rate);
/** @brief Color Control Cluster Enhanced Move To Hue And Saturation
 *
 * 
 *
 * @param enhancedHue   Ver.: always
 * @param saturation   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedMoveToHueAndSaturationCallback(int16u enhancedHue,
                                                                         int8u saturation,
                                                                         int16u transitionTime);
/** @brief Color Control Cluster Enhanced Move To Hue
 *
 * 
 *
 * @param enhancedHue   Ver.: always
 * @param direction   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedMoveToHueCallback(int16u enhancedHue,
                                                            int8u direction,
                                                            int16u transitionTime);
/** @brief Color Control Cluster Enhanced Step Hue
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedStepHueCallback(int8u stepMode,
                                                          int16u stepSize,
                                                          int16u transitionTime);
/** @brief Color Control Cluster Move Color
 *
 * 
 *
 * @param rateX   Ver.: always
 * @param rateY   Ver.: always
 */
boolean emberAfColorControlClusterMoveColorCallback(int16s rateX,
                                                    int16s rateY);
/** @brief Color Control Cluster Move Color Temperature
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 * @param colorTemperatureMinimum   Ver.: always
 * @param colorTemperatureMaximum   Ver.: always
 */
boolean emberAfColorControlClusterMoveColorTemperatureCallback(int8u moveMode,
                                                               int16u rate,
                                                               int16u colorTemperatureMinimum,
                                                               int16u colorTemperatureMaximum);
/** @brief Color Control Cluster Move Hue
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfColorControlClusterMoveHueCallback(int8u moveMode,
                                                  int8u rate);
/** @brief Color Control Cluster Move Saturation
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfColorControlClusterMoveSaturationCallback(int8u moveMode,
                                                         int8u rate);
/** @brief Color Control Cluster Move To Color
 *
 * 
 *
 * @param colorX   Ver.: always
 * @param colorY   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToColorCallback(int16u colorX,
                                                      int16u colorY,
                                                      int16u transitionTime);
/** @brief Color Control Cluster Move To Color Temperature
 *
 * 
 *
 * @param colorTemperature   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToColorTemperatureCallback(int16u colorTemperature,
                                                                 int16u transitionTime);
/** @brief Color Control Cluster Move To Hue And Saturation
 *
 * 
 *
 * @param hue   Ver.: always
 * @param saturation   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToHueAndSaturationCallback(int8u hue,
                                                                 int8u saturation,
                                                                 int16u transitionTime);
/** @brief Color Control Cluster Move To Hue
 *
 * 
 *
 * @param hue   Ver.: always
 * @param direction   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToHueCallback(int8u hue,
                                                    int8u direction,
                                                    int16u transitionTime);
/** @brief Color Control Cluster Move To Saturation
 *
 * 
 *
 * @param saturation   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToSaturationCallback(int8u saturation,
                                                           int16u transitionTime);
/** @brief Color Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfColorControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Color Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfColorControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Color Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfColorControlClusterServerInitCallback(int8u endpoint);
/** @brief Color Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfColorControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Color Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfColorControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame *apsFrame,
                                                         int16u msgLen,
                                                         int8u *message,
                                                         EmberStatus status);
/** @brief Color Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfColorControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u *value);
/** @brief Color Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfColorControlClusterServerTickCallback(int8u endpoint);
/** @brief Color Control Cluster Step Color
 *
 * 
 *
 * @param stepX   Ver.: always
 * @param stepY   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterStepColorCallback(int16s stepX,
                                                    int16s stepY,
                                                    int16u transitionTime);
/** @brief Color Control Cluster Step Color Temperatue
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 * @param colorTemperatureMinimum   Ver.: always
 * @param colorTemperatureMaximum   Ver.: always
 */
boolean emberAfColorControlClusterStepColorTemperatueCallback(int8u stepMode,
                                                              int16u stepSize,
                                                              int16u transitionTime,
                                                              int16u colorTemperatureMinimum,
                                                              int16u colorTemperatureMaximum);
/** @brief Color Control Cluster Step Hue
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterStepHueCallback(int8u stepMode,
                                                  int8u stepSize,
                                                  int8u transitionTime);
/** @brief Color Control Cluster Step Saturation
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterStepSaturationCallback(int8u stepMode,
                                                         int8u stepSize,
                                                         int8u transitionTime);
/** @brief Color Control Cluster Stop Move Step
 *
 * 
 *
 */
boolean emberAfColorControlClusterStopMoveStepCallback(void);

/** @} END Color Control Cluster Callbacks */

/** @name Ballast Configuration Cluster Callbacks */
// @{

/** @brief Ballast Configuration Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBallastConfigurationClusterClientAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief Ballast Configuration Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBallastConfigurationClusterClientDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief Ballast Configuration Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBallastConfigurationClusterClientInitCallback(int8u endpoint);
/** @brief Ballast Configuration Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBallastConfigurationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief Ballast Configuration Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBallastConfigurationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame *apsFrame,
                                                                 int16u msgLen,
                                                                 int8u *message,
                                                                 EmberStatus status);
/** @brief Ballast Configuration Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBallastConfigurationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u *value);
/** @brief Ballast Configuration Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBallastConfigurationClusterClientTickCallback(int8u endpoint);
/** @brief Ballast Configuration Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBallastConfigurationClusterServerAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief Ballast Configuration Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBallastConfigurationClusterServerDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief Ballast Configuration Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBallastConfigurationClusterServerInitCallback(int8u endpoint);
/** @brief Ballast Configuration Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBallastConfigurationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief Ballast Configuration Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBallastConfigurationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame *apsFrame,
                                                                 int16u msgLen,
                                                                 int8u *message,
                                                                 EmberStatus status);
/** @brief Ballast Configuration Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBallastConfigurationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u *value);
/** @brief Ballast Configuration Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBallastConfigurationClusterServerTickCallback(int8u endpoint);

/** @} END Ballast Configuration Cluster Callbacks */

/** @name Illuminance Measurement Cluster Callbacks */
// @{

/** @brief Illuminance Measurement Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Illuminance Measurement Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Illuminance Measurement Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Illuminance Measurement Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Illuminance Measurement Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Illuminance Measurement Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Illuminance Measurement Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Illuminance Measurement Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Illuminance Measurement Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Illuminance Measurement Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Illuminance Measurement Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Illuminance Measurement Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Illuminance Measurement Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Illuminance Measurement Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Illuminance Measurement Cluster Callbacks */

/** @name Illuminance Level Sensing Cluster Callbacks */
// @{

/** @brief Illuminance Level Sensing Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Illuminance Level Sensing Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Illuminance Level Sensing Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientInitCallback(int8u endpoint);
/** @brief Illuminance Level Sensing Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumLevelSensingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Illuminance Level Sensing Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief Illuminance Level Sensing Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumLevelSensingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief Illuminance Level Sensing Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientTickCallback(int8u endpoint);
/** @brief Illuminance Level Sensing Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Illuminance Level Sensing Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Illuminance Level Sensing Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerInitCallback(int8u endpoint);
/** @brief Illuminance Level Sensing Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumLevelSensingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Illuminance Level Sensing Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief Illuminance Level Sensing Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumLevelSensingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief Illuminance Level Sensing Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerTickCallback(int8u endpoint);

/** @} END Illuminance Level Sensing Cluster Callbacks */

/** @name Temperature Measurement Cluster Callbacks */
// @{

/** @brief Temperature Measurement Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTempMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Temperature Measurement Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTempMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Temperature Measurement Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTempMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Temperature Measurement Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTempMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Temperature Measurement Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTempMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Temperature Measurement Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTempMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Temperature Measurement Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTempMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Temperature Measurement Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTempMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Temperature Measurement Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTempMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Temperature Measurement Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTempMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Temperature Measurement Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTempMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Temperature Measurement Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTempMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Temperature Measurement Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTempMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Temperature Measurement Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTempMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Temperature Measurement Cluster Callbacks */

/** @name Pressure Measurement Cluster Callbacks */
// @{

/** @brief Pressure Measurement Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPressureMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Pressure Measurement Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPressureMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Pressure Measurement Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPressureMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Pressure Measurement Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPressureMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Pressure Measurement Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPressureMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief Pressure Measurement Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPressureMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief Pressure Measurement Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPressureMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Pressure Measurement Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPressureMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Pressure Measurement Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPressureMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Pressure Measurement Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPressureMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Pressure Measurement Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPressureMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Pressure Measurement Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPressureMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief Pressure Measurement Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPressureMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief Pressure Measurement Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPressureMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Pressure Measurement Cluster Callbacks */

/** @name Flow Measurement Cluster Callbacks */
// @{

/** @brief Flow Measurement Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFlowMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Flow Measurement Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFlowMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Flow Measurement Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFlowMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Flow Measurement Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFlowMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Flow Measurement Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFlowMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Flow Measurement Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFlowMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Flow Measurement Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFlowMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Flow Measurement Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFlowMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Flow Measurement Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFlowMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Flow Measurement Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFlowMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Flow Measurement Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFlowMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Flow Measurement Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFlowMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Flow Measurement Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFlowMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Flow Measurement Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFlowMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Flow Measurement Cluster Callbacks */

/** @name Relative Humidity Measurement Cluster Callbacks */
// @{

/** @brief Relative Humidity Measurement Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId);
/** @brief Relative Humidity Measurement Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                            int8u commandId,
                                                                            EmberAfStatus status);
/** @brief Relative Humidity Measurement Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Relative Humidity Measurement Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                                 EmberAfAttributeId attributeId,
                                                                                                 int16u manufacturerCode);
/** @brief Relative Humidity Measurement Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                        int16u indexOrDestination,
                                                                        EmberApsFrame *apsFrame,
                                                                        int16u msgLen,
                                                                        int8u *message,
                                                                        EmberStatus status);
/** @brief Relative Humidity Measurement Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRelativeHumidityMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         EmberAfAttributeType attributeType,
                                                                                         int8u size,
                                                                                         int8u *value);
/** @brief Relative Humidity Measurement Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Relative Humidity Measurement Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId);
/** @brief Relative Humidity Measurement Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                            int8u commandId,
                                                                            EmberAfStatus status);
/** @brief Relative Humidity Measurement Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Relative Humidity Measurement Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                                 EmberAfAttributeId attributeId,
                                                                                                 int16u manufacturerCode);
/** @brief Relative Humidity Measurement Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                        int16u indexOrDestination,
                                                                        EmberApsFrame *apsFrame,
                                                                        int16u msgLen,
                                                                        int8u *message,
                                                                        EmberStatus status);
/** @brief Relative Humidity Measurement Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRelativeHumidityMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         EmberAfAttributeType attributeType,
                                                                                         int8u size,
                                                                                         int8u *value);
/** @brief Relative Humidity Measurement Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Relative Humidity Measurement Cluster Callbacks */

/** @name Occupancy Sensing Cluster Callbacks */
// @{

/** @brief Occupancy Sensing Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOccupancySensingClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Occupancy Sensing Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOccupancySensingClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Occupancy Sensing Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOccupancySensingClusterClientInitCallback(int8u endpoint);
/** @brief Occupancy Sensing Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOccupancySensingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Occupancy Sensing Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOccupancySensingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Occupancy Sensing Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOccupancySensingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Occupancy Sensing Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOccupancySensingClusterClientTickCallback(int8u endpoint);
/** @brief Occupancy Sensing Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOccupancySensingClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Occupancy Sensing Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOccupancySensingClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Occupancy Sensing Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOccupancySensingClusterServerInitCallback(int8u endpoint);
/** @brief Occupancy Sensing Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOccupancySensingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Occupancy Sensing Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOccupancySensingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Occupancy Sensing Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOccupancySensingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Occupancy Sensing Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOccupancySensingClusterServerTickCallback(int8u endpoint);

/** @} END Occupancy Sensing Cluster Callbacks */

/** @name IAS Zone Cluster Callbacks */
// @{

/** @brief IAS Zone Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasZoneClusterClientAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief IAS Zone Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasZoneClusterClientDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief IAS Zone Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasZoneClusterClientInitCallback(int8u endpoint);
/** @brief IAS Zone Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasZoneClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief IAS Zone Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasZoneClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame *apsFrame,
                                                    int16u msgLen,
                                                    int8u *message,
                                                    EmberStatus status);
/** @brief IAS Zone Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasZoneClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u *value);
/** @brief IAS Zone Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasZoneClusterClientTickCallback(int8u endpoint);
/** @brief IAS Zone Cluster Initiate Normal Operation Mode
 *
 * 
 *
 */
boolean emberAfIasZoneClusterInitiateNormalOperationModeCallback(void);
/** @brief IAS Zone Cluster Initiate Normal Operation Mode Response
 *
 * 
 *
 */
boolean emberAfIasZoneClusterInitiateNormalOperationModeResponseCallback(void);
/** @brief IAS Zone Cluster Initiate Test Mode
 *
 * 
 *
 * @param testModeDuration   Ver.: always
 * @param currentZoneSensitivityLevel   Ver.: always
 */
boolean emberAfIasZoneClusterInitiateTestModeCallback(int8u testModeDuration,
                                                      int8u currentZoneSensitivityLevel);
/** @brief IAS Zone Cluster Initiate Test Mode Response
 *
 * 
 *
 */
boolean emberAfIasZoneClusterInitiateTestModeResponseCallback(void);
/** @brief IAS Zone Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasZoneClusterServerAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief IAS Zone Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasZoneClusterServerDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief IAS Zone Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasZoneClusterServerInitCallback(int8u endpoint);
/** @brief IAS Zone Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasZoneClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief IAS Zone Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasZoneClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame *apsFrame,
                                                    int16u msgLen,
                                                    int8u *message,
                                                    EmberStatus status);
/** @brief IAS Zone Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasZoneClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u *value);
/** @brief IAS Zone Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasZoneClusterServerTickCallback(int8u endpoint);
/** @brief IAS Zone Cluster Zone Enroll Request
 *
 * 
 *
 * @param zoneType   Ver.: always
 * @param manufacturerCode   Ver.: always
 */
boolean emberAfIasZoneClusterZoneEnrollRequestCallback(int16u zoneType,
                                                       int16u manufacturerCode);
/** @brief IAS Zone Cluster Zone Enroll Response
 *
 * 
 *
 * @param enrollResponseCode   Ver.: always
 * @param zoneId   Ver.: always
 */
boolean emberAfIasZoneClusterZoneEnrollResponseCallback(int8u enrollResponseCode,
                                                        int8u zoneId);
/** @brief IAS Zone Cluster Zone Status Change Notification
 *
 * 
 *
 * @param zoneStatus   Ver.: always
 * @param extendedStatus   Ver.: always
 * @param zoneId   Ver.: since ha-1.2-05-3520-29
 * @param delay   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfIasZoneClusterZoneStatusChangeNotificationCallback(int16u zoneStatus,
                                                                  int8u extendedStatus,
                                                                  int8u zoneId,
                                                                  int16u delay);

/** @} END IAS Zone Cluster Callbacks */

/** @name IAS ACE Cluster Callbacks */
// @{

/** @brief IAS ACE Cluster Arm
 *
 * 
 *
 * @param armMode   Ver.: always
 * @param armDisarmCode   Ver.: since ha-1.2-05-3520-29
 * @param zoneId   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfIasAceClusterArmCallback(int8u armMode,
                                        int8u* armDisarmCode,
                                        int8u zoneId);
/** @brief IAS ACE Cluster Arm Response
 *
 * 
 *
 * @param armNotification   Ver.: always
 */
boolean emberAfIasAceClusterArmResponseCallback(int8u armNotification);
/** @brief IAS ACE Cluster Bypass
 *
 * 
 *
 * @param numberOfZones   Ver.: always
 * @param zoneIds   Ver.: always
 * @param armDisarmCode   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterBypassCallback(int8u numberOfZones,
                                           int8u* zoneIds,
                                           int8u* armDisarmCode);
/** @brief IAS ACE Cluster Bypass Response
 *
 * 
 *
 * @param numberOfZones   Ver.: always
 * @param bypassResult   Ver.: always
 */
boolean emberAfIasAceClusterBypassResponseCallback(int8u numberOfZones,
                                                   int8u* bypassResult);
/** @brief IAS ACE Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasAceClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief IAS ACE Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasAceClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief IAS ACE Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasAceClusterClientInitCallback(int8u endpoint);
/** @brief IAS ACE Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasAceClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief IAS ACE Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasAceClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief IAS ACE Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasAceClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief IAS ACE Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasAceClusterClientTickCallback(int8u endpoint);
/** @brief IAS ACE Cluster Emergency
 *
 * 
 *
 */
boolean emberAfIasAceClusterEmergencyCallback(void);
/** @brief IAS ACE Cluster Fire
 *
 * 
 *
 */
boolean emberAfIasAceClusterFireCallback(void);
/** @brief IAS ACE Cluster Get Bypassed Zone List
 *
 * 
 *
 */
boolean emberAfIasAceClusterGetBypassedZoneListCallback(void);
/** @brief IAS ACE Cluster Get Panel Status
 *
 * 
 *
 */
boolean emberAfIasAceClusterGetPanelStatusCallback(void);
/** @brief IAS ACE Cluster Get Panel Status Response
 *
 * 
 *
 * @param panelStatus   Ver.: always
 * @param secondsRemaining   Ver.: always
 * @param audibleNotification   Ver.: always
 * @param alarmStatus   Ver.: always
 */
boolean emberAfIasAceClusterGetPanelStatusResponseCallback(int8u panelStatus,
                                                           int8u secondsRemaining,
                                                           int8u audibleNotification,
                                                           int8u alarmStatus);
/** @brief IAS ACE Cluster Get Zone Id Map
 *
 * 
 *
 */
boolean emberAfIasAceClusterGetZoneIdMapCallback(void);
/** @brief IAS ACE Cluster Get Zone Id Map Response
 *
 * 
 *
 * @param section0   Ver.: always
 * @param section1   Ver.: always
 * @param section2   Ver.: always
 * @param section3   Ver.: always
 * @param section4   Ver.: always
 * @param section5   Ver.: always
 * @param section6   Ver.: always
 * @param section7   Ver.: always
 * @param section8   Ver.: always
 * @param section9   Ver.: always
 * @param section10   Ver.: always
 * @param section11   Ver.: always
 * @param section12   Ver.: always
 * @param section13   Ver.: always
 * @param section14   Ver.: always
 * @param section15   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneIdMapResponseCallback(int16u section0,
                                                         int16u section1,
                                                         int16u section2,
                                                         int16u section3,
                                                         int16u section4,
                                                         int16u section5,
                                                         int16u section6,
                                                         int16u section7,
                                                         int16u section8,
                                                         int16u section9,
                                                         int16u section10,
                                                         int16u section11,
                                                         int16u section12,
                                                         int16u section13,
                                                         int16u section14,
                                                         int16u section15);
/** @brief IAS ACE Cluster Get Zone Information
 *
 * 
 *
 * @param zoneId   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneInformationCallback(int8u zoneId);
/** @brief IAS ACE Cluster Get Zone Information Response
 *
 * 
 *
 * @param zoneId   Ver.: always
 * @param zoneType   Ver.: always
 * @param ieeeAddress   Ver.: always
 * @param zoneLabel   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterGetZoneInformationResponseCallback(int8u zoneId,
                                                               int16u zoneType,
                                                               int8u* ieeeAddress,
                                                               int8u* zoneLabel);
/** @brief IAS ACE Cluster Get Zone Status
 *
 * 
 *
 * @param startingZoneId   Ver.: always
 * @param maxNumberOfZoneIds   Ver.: always
 * @param zoneStatusMaskFlag   Ver.: always
 * @param zoneStatusMask   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneStatusCallback(int8u startingZoneId,
                                                  int8u maxNumberOfZoneIds,
                                                  int8u zoneStatusMaskFlag,
                                                  int16u zoneStatusMask);
/** @brief IAS ACE Cluster Get Zone Status Response
 *
 * 
 *
 * @param zoneStatusComplete   Ver.: always
 * @param numberOfZones   Ver.: always
 * @param zoneStatusResult   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneStatusResponseCallback(int8u zoneStatusComplete,
                                                          int8u numberOfZones,
                                                          int8u* zoneStatusResult);
/** @brief IAS ACE Cluster Panel Status Changed
 *
 * 
 *
 * @param panelStatus   Ver.: always
 * @param secondsRemaining   Ver.: always
 * @param audibleNotification   Ver.: since ha-1.2.1-05-3520-30
 * @param alarmStatus   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterPanelStatusChangedCallback(int8u panelStatus,
                                                       int8u secondsRemaining,
                                                       int8u audibleNotification,
                                                       int8u alarmStatus);
/** @brief IAS ACE Cluster Panic
 *
 * 
 *
 */
boolean emberAfIasAceClusterPanicCallback(void);
/** @brief IAS ACE Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasAceClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief IAS ACE Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasAceClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief IAS ACE Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasAceClusterServerInitCallback(int8u endpoint);
/** @brief IAS ACE Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasAceClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief IAS ACE Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasAceClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief IAS ACE Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasAceClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief IAS ACE Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasAceClusterServerTickCallback(int8u endpoint);
/** @brief IAS ACE Cluster Set Bypassed Zone List
 *
 * 
 *
 * @param numberOfZones   Ver.: always
 * @param zoneIds   Ver.: always
 */
boolean emberAfIasAceClusterSetBypassedZoneListCallback(int8u numberOfZones,
                                                        int8u* zoneIds);
/** @brief IAS ACE Cluster Zone Status Changed
 *
 * 
 *
 * @param zoneId   Ver.: always
 * @param zoneStatus   Ver.: always
 * @param audibleNotification   Ver.: since ha-1.2.1-05-3520-30
 * @param zoneLabel   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterZoneStatusChangedCallback(int8u zoneId,
                                                      int16u zoneStatus,
                                                      int8u audibleNotification,
                                                      int8u* zoneLabel);

/** @} END IAS ACE Cluster Callbacks */

/** @name IAS WD Cluster Callbacks */
// @{

/** @brief IAS WD Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasWdClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief IAS WD Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasWdClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief IAS WD Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasWdClusterClientInitCallback(int8u endpoint);
/** @brief IAS WD Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasWdClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief IAS WD Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasWdClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief IAS WD Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasWdClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief IAS WD Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasWdClusterClientTickCallback(int8u endpoint);
/** @brief IAS WD Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasWdClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief IAS WD Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasWdClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief IAS WD Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasWdClusterServerInitCallback(int8u endpoint);
/** @brief IAS WD Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasWdClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief IAS WD Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasWdClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief IAS WD Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasWdClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief IAS WD Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasWdClusterServerTickCallback(int8u endpoint);
/** @brief IAS WD Cluster Squawk
 *
 * 
 *
 * @param squawkInfo   Ver.: always
 */
boolean emberAfIasWdClusterSquawkCallback(int8u squawkInfo);
/** @brief IAS WD Cluster Start Warning
 *
 * 
 *
 * @param warningInfo   Ver.: always
 * @param warningDuration   Ver.: always
 * @param strobeDutyCycle   Ver.: since ha-1.2-05-3520-29
 * @param strobeLevel   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfIasWdClusterStartWarningCallback(int8u warningInfo,
                                                int16u warningDuration,
                                                int8u strobeDutyCycle,
                                                int8u strobeLevel);

/** @} END IAS WD Cluster Callbacks */

/** @name Generic Tunnel Cluster Callbacks */
// @{

/** @brief Generic Tunnel Cluster Advertise Protocol Address
 *
 * 
 *
 * @param protocolAddress   Ver.: always
 */
boolean emberAfGenericTunnelClusterAdvertiseProtocolAddressCallback(int8u* protocolAddress);
/** @brief Generic Tunnel Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGenericTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Generic Tunnel Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGenericTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Generic Tunnel Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGenericTunnelClusterClientInitCallback(int8u endpoint);
/** @brief Generic Tunnel Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGenericTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Generic Tunnel Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGenericTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame *apsFrame,
                                                          int16u msgLen,
                                                          int8u *message,
                                                          EmberStatus status);
/** @brief Generic Tunnel Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGenericTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u *value);
/** @brief Generic Tunnel Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGenericTunnelClusterClientTickCallback(int8u endpoint);
/** @brief Generic Tunnel Cluster Match Protocol Address
 *
 * 
 *
 * @param protocolAddress   Ver.: always
 */
boolean emberAfGenericTunnelClusterMatchProtocolAddressCallback(int8u* protocolAddress);
/** @brief Generic Tunnel Cluster Match Protocol Address Response
 *
 * 
 *
 * @param deviceIeeeAddress   Ver.: always
 * @param protocolAddress   Ver.: always
 */
boolean emberAfGenericTunnelClusterMatchProtocolAddressResponseCallback(int8u* deviceIeeeAddress,
                                                                        int8u* protocolAddress);
/** @brief Generic Tunnel Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGenericTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Generic Tunnel Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGenericTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Generic Tunnel Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGenericTunnelClusterServerInitCallback(int8u endpoint);
/** @brief Generic Tunnel Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGenericTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Generic Tunnel Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGenericTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame *apsFrame,
                                                          int16u msgLen,
                                                          int8u *message,
                                                          EmberStatus status);
/** @brief Generic Tunnel Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGenericTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u *value);
/** @brief Generic Tunnel Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGenericTunnelClusterServerTickCallback(int8u endpoint);

/** @} END Generic Tunnel Cluster Callbacks */

/** @name BACnet Protocol Tunnel Cluster Callbacks */
// @{

/** @brief BACnet Protocol Tunnel Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief BACnet Protocol Tunnel Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief BACnet Protocol Tunnel Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientInitCallback(int8u endpoint);
/** @brief BACnet Protocol Tunnel Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief BACnet Protocol Tunnel Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame *apsFrame,
                                                                 int16u msgLen,
                                                                 int8u *message,
                                                                 EmberStatus status);
/** @brief BACnet Protocol Tunnel Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBacnetProtocolTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u *value);
/** @brief BACnet Protocol Tunnel Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientTickCallback(int8u endpoint);
/** @brief BACnet Protocol Tunnel Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief BACnet Protocol Tunnel Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief BACnet Protocol Tunnel Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerInitCallback(int8u endpoint);
/** @brief BACnet Protocol Tunnel Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief BACnet Protocol Tunnel Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame *apsFrame,
                                                                 int16u msgLen,
                                                                 int8u *message,
                                                                 EmberStatus status);
/** @brief BACnet Protocol Tunnel Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBacnetProtocolTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u *value);
/** @brief BACnet Protocol Tunnel Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerTickCallback(int8u endpoint);
/** @brief BACnet Protocol Tunnel Cluster Transfer Npdu
 *
 * 
 *
 * @param npdu   Ver.: always
 */
boolean emberAfBacnetProtocolTunnelClusterTransferNpduCallback(int8u* npdu);

/** @} END BACnet Protocol Tunnel Cluster Callbacks */

/** @name 11073 Protocol Tunnel Cluster Callbacks */
// @{

/** @brief 11073 Protocol Tunnel Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief 11073 Protocol Tunnel Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief 11073 Protocol Tunnel Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientInitCallback(int8u endpoint);
/** @brief 11073 Protocol Tunnel Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief 11073 Protocol Tunnel Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief 11073 Protocol Tunnel Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAf11073ProtocolTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief 11073 Protocol Tunnel Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientTickCallback(int8u endpoint);
/** @brief 11073 Protocol Tunnel Cluster Connect Request
 *
 * 
 *
 * @param connectControl   Ver.: always
 * @param idleTimeout   Ver.: always
 * @param managerTarget   Ver.: always
 * @param managerEndpoint   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterConnectRequestCallback(int8u connectControl,
                                                                int16u idleTimeout,
                                                                int8u* managerTarget,
                                                                int8u managerEndpoint);
/** @brief 11073 Protocol Tunnel Cluster Connect Status Notification
 *
 * 
 *
 * @param connectStatus   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterConnectStatusNotificationCallback(int8u connectStatus);
/** @brief 11073 Protocol Tunnel Cluster Disconnect Request
 *
 * 
 *
 * @param managerIEEEAddress   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterDisconnectRequestCallback(int8u* managerIEEEAddress);
/** @brief 11073 Protocol Tunnel Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief 11073 Protocol Tunnel Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief 11073 Protocol Tunnel Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerInitCallback(int8u endpoint);
/** @brief 11073 Protocol Tunnel Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief 11073 Protocol Tunnel Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief 11073 Protocol Tunnel Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAf11073ProtocolTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief 11073 Protocol Tunnel Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerTickCallback(int8u endpoint);
/** @brief 11073 Protocol Tunnel Cluster Transfer A P D U
 *
 * 
 *
 * @param apdu   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterTransferAPDUCallback(int8u* apdu);

/** @} END 11073 Protocol Tunnel Cluster Callbacks */

/** @name ISO 7816 Protocol Tunnel Cluster Callbacks */
// @{

/** @brief ISO 7816 Protocol Tunnel Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief ISO 7816 Protocol Tunnel Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief ISO 7816 Protocol Tunnel Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientInitCallback(int8u endpoint);
/** @brief ISO 7816 Protocol Tunnel Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief ISO 7816 Protocol Tunnel Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame *apsFrame,
                                                                  int16u msgLen,
                                                                  int8u *message,
                                                                  EmberStatus status);
/** @brief ISO 7816 Protocol Tunnel Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIso7816ProtocolTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u *value);
/** @brief ISO 7816 Protocol Tunnel Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientTickCallback(int8u endpoint);
/** @brief ISO 7816 Protocol Tunnel Cluster Extract Smart Card
 *
 * 
 *
 */
boolean emberAfIso7816ProtocolTunnelClusterExtractSmartCardCallback(void);
/** @brief ISO 7816 Protocol Tunnel Cluster Insert Smart Card
 *
 * 
 *
 */
boolean emberAfIso7816ProtocolTunnelClusterInsertSmartCardCallback(void);
/** @brief ISO 7816 Protocol Tunnel Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief ISO 7816 Protocol Tunnel Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief ISO 7816 Protocol Tunnel Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerInitCallback(int8u endpoint);
/** @brief ISO 7816 Protocol Tunnel Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief ISO 7816 Protocol Tunnel Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame *apsFrame,
                                                                  int16u msgLen,
                                                                  int8u *message,
                                                                  EmberStatus status);
/** @brief ISO 7816 Protocol Tunnel Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIso7816ProtocolTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u *value);
/** @brief ISO 7816 Protocol Tunnel Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerTickCallback(int8u endpoint);
/** @brief ISO 7816 Protocol Tunnel Cluster Transfer Apdu
 *
 * 
 *
 * @param apdu   Ver.: always
 */
boolean emberAfIso7816ProtocolTunnelClusterTransferApduCallback(int8u* apdu);

/** @} END ISO 7816 Protocol Tunnel Cluster Callbacks */

/** @name Price Cluster Callbacks */
// @{

/** @brief Price Cluster Cancel Tariff
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterCancelTariffCallback(int32u providerId,
                                                int32u issuerTariffId,
                                                int8u tariffType);
/** @brief Price Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPriceClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Price Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPriceClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Price Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPriceClusterClientInitCallback(int8u endpoint);
/** @brief Price Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPriceClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Price Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPriceClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief Price Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPriceClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief Price Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPriceClusterClientTickCallback(int8u endpoint);
/** @brief Price Cluster Cpp Event Response
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param cppAuth   Ver.: always
 */
boolean emberAfPriceClusterCppEventResponseCallback(int32u issuerEventId,
                                                    int8u cppAuth);
/** @brief Price Cluster Get Billing Period
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetBillingPeriodCallback(int32u earliestStartTime,
                                                    int32u minIssuerEventId,
                                                    int8u numberOfCommands,
                                                    int8u tariffType);
/** @brief Price Cluster Get Block Periods
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetBlockPeriodsCallback(int32u startTime,
                                                   int8u numberOfEvents,
                                                   int8u tariffType);
/** @brief Price Cluster Get Block Thresholds
 *
 * 
 *
 * @param issuerTariffId   Ver.: always
 */
boolean emberAfPriceClusterGetBlockThresholdsCallback(int32u issuerTariffId);
/** @brief Price Cluster Get C O2 Value
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetCO2ValueCallback(int32u earliestStartTime,
                                               int32u minIssuerEventId,
                                               int8u numberOfCommands,
                                               int8u tariffType);
/** @brief Price Cluster Get Calorific Value
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 */
boolean emberAfPriceClusterGetCalorificValueCallback(int32u earliestStartTime,
                                                     int32u minIssuerEventId,
                                                     int8u numberOfCommands);
/** @brief Price Cluster Get Consolidated Bill
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetConsolidatedBillCallback(int32u earliestStartTime,
                                                       int32u minIssuerEventId,
                                                       int8u numberOfCommands,
                                                       int8u tariffType);
/** @brief Price Cluster Get Conversion Factor
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 */
boolean emberAfPriceClusterGetConversionFactorCallback(int32u earliestStartTime,
                                                       int32u minIssuerEventId,
                                                       int8u numberOfCommands);
/** @brief Price Cluster Get Credit Payment
 *
 * 
 *
 * @param latestEndTime   Ver.: always
 * @param numberOfRecords   Ver.: always
 */
boolean emberAfPriceClusterGetCreditPaymentCallback(int32u latestEndTime,
                                                    int8u numberOfRecords);
/** @brief Price Cluster Get Currency Conversion Command
 *
 * 
 *
 */
boolean emberAfPriceClusterGetCurrencyConversionCommandCallback(void);
/** @brief Price Cluster Get Current Price
 *
 * 
 *
 * @param commandOptions   Ver.: always
 */
boolean emberAfPriceClusterGetCurrentPriceCallback(int8u commandOptions);
/** @brief Price Cluster Get Price Matrix
 *
 * 
 *
 * @param issuerTariffId   Ver.: always
 */
boolean emberAfPriceClusterGetPriceMatrixCallback(int32u issuerTariffId);
/** @brief Price Cluster Get Scheduled Prices
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 */
boolean emberAfPriceClusterGetScheduledPricesCallback(int32u startTime,
                                                      int8u numberOfEvents);
/** @brief Price Cluster Get Tariff Cancellation
 *
 * 
 *
 */
boolean emberAfPriceClusterGetTariffCancellationCallback(void);
/** @brief Price Cluster Get Tariff Information
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetTariffInformationCallback(int32u earliestStartTime,
                                                        int32u minIssuerEventId,
                                                        int8u numberOfCommands,
                                                        int8u tariffType);
/** @brief Price Cluster Get Tier Labels
 *
 * 
 *
 * @param issuerTariffId   Ver.: always
 */
boolean emberAfPriceClusterGetTierLabelsCallback(int32u issuerTariffId);
/** @brief Price Cluster Price Acknowledgement
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param priceAckTime   Ver.: always
 * @param control   Ver.: always
 */
boolean emberAfPriceClusterPriceAcknowledgementCallback(int32u providerId,
                                                        int32u issuerEventId,
                                                        int32u priceAckTime,
                                                        int8u control);
/** @brief Price Cluster Publish Billing Period
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param billingPeriodStartTime   Ver.: always
 * @param billingPeriodDuration   Ver.: always
 * @param billingPeriodDurationType   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterPublishBillingPeriodCallback(int32u providerId,
                                                        int32u issuerEventId,
                                                        int32u billingPeriodStartTime,
                                                        int32u billingPeriodDuration,
                                                        int8u billingPeriodDurationType,
                                                        int8u tariffType);
/** @brief Price Cluster Publish Block Period
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param blockPeriodStartTime   Ver.: always
 * @param blockPeriodDuration   Ver.: always
 * @param blockPeriodControl   Ver.: always
 * @param blockPeriodDurationType   Ver.: since se-1.2a-07-5356-19
 * @param tariffType   Ver.: since se-1.2a-07-5356-19
 * @param tariffResolutionPeriod   Ver.: since se-1.2a-07-5356-19
 */
boolean emberAfPriceClusterPublishBlockPeriodCallback(int32u providerId,
                                                      int32u issuerEventId,
                                                      int32u blockPeriodStartTime,
                                                      int32u blockPeriodDuration,
                                                      int8u blockPeriodControl,
                                                      int8u blockPeriodDurationType,
                                                      int8u tariffType,
                                                      int8u tariffResolutionPeriod);
/** @brief Price Cluster Publish Block Thresholds
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param subPayloadControl   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfPriceClusterPublishBlockThresholdsCallback(int32u providerId,
                                                          int32u issuerEventId,
                                                          int32u startTime,
                                                          int32u issuerTariffId,
                                                          int8u commandIndex,
                                                          int8u numberOfCommands,
                                                          int8u subPayloadControl,
                                                          int8u* payload);
/** @brief Price Cluster Publish C O2 Value
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param tariffType   Ver.: always
 * @param cO2Value   Ver.: always
 * @param cO2ValueUnit   Ver.: always
 * @param cO2ValueTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishCO2ValueCallback(int32u providerId,
                                                   int32u issuerEventId,
                                                   int32u startTime,
                                                   int8u tariffType,
                                                   int32u cO2Value,
                                                   int8u cO2ValueUnit,
                                                   int8u cO2ValueTrailingDigit);
/** @brief Price Cluster Publish Calorific Value
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param calorificValue   Ver.: always
 * @param calorificValueUnit   Ver.: always
 * @param calorificValueTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishCalorificValueCallback(int32u issuerEventId,
                                                         int32u startTime,
                                                         int32u calorificValue,
                                                         int8u calorificValueUnit,
                                                         int8u calorificValueTrailingDigit);
/** @brief Price Cluster Publish Consolidated Bill
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param billingPeriodStartTime   Ver.: always
 * @param billingPeriodDuration   Ver.: always
 * @param billingPeriodDurationType   Ver.: always
 * @param tariffType   Ver.: always
 * @param consolidatedBill   Ver.: always
 * @param currency   Ver.: always
 * @param billTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishConsolidatedBillCallback(int32u providerId,
                                                           int32u issuerEventId,
                                                           int32u billingPeriodStartTime,
                                                           int32u billingPeriodDuration,
                                                           int8u billingPeriodDurationType,
                                                           int8u tariffType,
                                                           int32u consolidatedBill,
                                                           int16u currency,
                                                           int8u billTrailingDigit);
/** @brief Price Cluster Publish Conversion Factor
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param conversionFactor   Ver.: always
 * @param conversionFactorTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishConversionFactorCallback(int32u issuerEventId,
                                                           int32u startTime,
                                                           int32u conversionFactor,
                                                           int8u conversionFactorTrailingDigit);
/** @brief Price Cluster Publish Cpp Event
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param tariffType   Ver.: always
 * @param cppPriceTier   Ver.: always
 * @param cppAuth   Ver.: always
 */
boolean emberAfPriceClusterPublishCppEventCallback(int32u providerId,
                                                   int32u issuerEventId,
                                                   int32u startTime,
                                                   int16u durationInMinutes,
                                                   int8u tariffType,
                                                   int8u cppPriceTier,
                                                   int8u cppAuth);
/** @brief Price Cluster Publish Credit Payment
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param creditPaymentDueDate   Ver.: always
 * @param creditPaymentOverDueAmount   Ver.: always
 * @param creditPaymentStatus   Ver.: always
 * @param creditPayment   Ver.: always
 * @param creditPaymentDate   Ver.: always
 * @param creditPaymentRef   Ver.: always
 */
boolean emberAfPriceClusterPublishCreditPaymentCallback(int32u providerId,
                                                        int32u issuerEventId,
                                                        int32u creditPaymentDueDate,
                                                        int32u creditPaymentOverDueAmount,
                                                        int8u creditPaymentStatus,
                                                        int32u creditPayment,
                                                        int32u creditPaymentDate,
                                                        int8u* creditPaymentRef);
/** @brief Price Cluster Publish Currency Conversion
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param oldCurrency   Ver.: always
 * @param newCurrency   Ver.: always
 * @param conversionFactor   Ver.: always
 * @param conversionFactorTrailingDigit   Ver.: always
 * @param currencyChangeControlFlags   Ver.: always
 */
boolean emberAfPriceClusterPublishCurrencyConversionCallback(int32u providerId,
                                                             int32u issuerEventId,
                                                             int32u startTime,
                                                             int16u oldCurrency,
                                                             int16u newCurrency,
                                                             int32u conversionFactor,
                                                             int8u conversionFactorTrailingDigit,
                                                             int32u currencyChangeControlFlags);
/** @brief Price Cluster Publish Price
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param rateLabel   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param currentTime   Ver.: always
 * @param unitOfMeasure   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigitAndPriceTier   Ver.: always
 * @param numberOfPriceTiersAndRegisterTier   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param price   Ver.: always
 * @param priceRatio   Ver.: always
 * @param generationPrice   Ver.: always
 * @param generationPriceRatio   Ver.: always
 * @param alternateCostDelivered   Ver.: since se-1.0-07-5356-15
 * @param alternateCostUnit   Ver.: since se-1.0-07-5356-15
 * @param alternateCostTrailingDigit   Ver.: since se-1.0-07-5356-15
 * @param numberOfBlockThresholds   Ver.: since se-1.1-07-5356-16
 * @param priceControl   Ver.: since se-1.1-07-5356-16
 * @param numberOfGenerationTiers   Ver.: since se-1.2a-07-5356-19
 * @param generationTier   Ver.: since se-1.2a-07-5356-19
 * @param extendedNumberOfPriceTiers   Ver.: since se-1.2a-07-5356-19
 * @param extendedPriceTier   Ver.: since se-1.2a-07-5356-19
 * @param extendedRegisterTier   Ver.: since se-1.2a-07-5356-19
 */
boolean emberAfPriceClusterPublishPriceCallback(int32u providerId,
                                                int8u* rateLabel,
                                                int32u issuerEventId,
                                                int32u currentTime,
                                                int8u unitOfMeasure,
                                                int16u currency,
                                                int8u priceTrailingDigitAndPriceTier,
                                                int8u numberOfPriceTiersAndRegisterTier,
                                                int32u startTime,
                                                int16u durationInMinutes,
                                                int32u price,
                                                int8u priceRatio,
                                                int32u generationPrice,
                                                int8u generationPriceRatio,
                                                int32u alternateCostDelivered,
                                                int8u alternateCostUnit,
                                                int8u alternateCostTrailingDigit,
                                                int8u numberOfBlockThresholds,
                                                int8u priceControl,
                                                int8u numberOfGenerationTiers,
                                                int8u generationTier,
                                                int8u extendedNumberOfPriceTiers,
                                                int8u extendedPriceTier,
                                                int8u extendedRegisterTier);
/** @brief Price Cluster Publish Price Matrix
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param subPayloadControl   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfPriceClusterPublishPriceMatrixCallback(int32u providerId,
                                                      int32u issuerEventId,
                                                      int32u startTime,
                                                      int32u issuerTariffId,
                                                      int8u commandIndex,
                                                      int8u numberOfCommands,
                                                      int8u subPayloadControl,
                                                      int8u* payload);
/** @brief Price Cluster Publish Tariff Information
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param startTime   Ver.: always
 * @param tariffTypeChargingScheme   Ver.: always
 * @param tariffLabel   Ver.: always
 * @param numberOfPriceTiersInUse   Ver.: always
 * @param numberOfBlockThresholdsInUse   Ver.: always
 * @param unitOfMeasure   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 * @param standingCharge   Ver.: always
 * @param tierBlockMode   Ver.: always
 * @param blockThresholdMultiplier   Ver.: always
 * @param blockThresholdDivisor   Ver.: always
 */
boolean emberAfPriceClusterPublishTariffInformationCallback(int32u providerId,
                                                            int32u issuerEventId,
                                                            int32u issuerTariffId,
                                                            int32u startTime,
                                                            int8u tariffTypeChargingScheme,
                                                            int8u* tariffLabel,
                                                            int8u numberOfPriceTiersInUse,
                                                            int8u numberOfBlockThresholdsInUse,
                                                            int8u unitOfMeasure,
                                                            int16u currency,
                                                            int8u priceTrailingDigit,
                                                            int32u standingCharge,
                                                            int8u tierBlockMode,
                                                            int32u blockThresholdMultiplier,
                                                            int32u blockThresholdDivisor);
/** @brief Price Cluster Publish Tier Labels
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param numberOfLabels   Ver.: always
 * @param tierLabelsPayload   Ver.: always
 */
boolean emberAfPriceClusterPublishTierLabelsCallback(int32u providerId,
                                                     int32u issuerEventId,
                                                     int32u issuerTariffId,
                                                     int8u commandIndex,
                                                     int8u numberOfCommands,
                                                     int8u numberOfLabels,
                                                     int8u* tierLabelsPayload);
/** @brief Price Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPriceClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Price Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPriceClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Price Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPriceClusterServerInitCallback(int8u endpoint);
/** @brief Price Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPriceClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Price Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPriceClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame *apsFrame,
                                                  int16u msgLen,
                                                  int8u *message,
                                                  EmberStatus status);
/** @brief Price Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPriceClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u *value);
/** @brief Price Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPriceClusterServerTickCallback(int8u endpoint);

/** @} END Price Cluster Callbacks */

/** @name Demand Response and Load Control Cluster Callbacks */
// @{

/** @brief Demand Response and Load Control Cluster Cancel All Load Control Events
 *
 * 
 *
 * @param cancelControl   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterCancelAllLoadControlEventsCallback(int8u cancelControl);
/** @brief Demand Response and Load Control Cluster Cancel Load Control Event
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param deviceClass   Ver.: always
 * @param utilityEnrollmentGroup   Ver.: always
 * @param cancelControl   Ver.: always
 * @param effectiveTime   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterCancelLoadControlEventCallback(int32u issuerEventId,
                                                                              int16u deviceClass,
                                                                              int8u utilityEnrollmentGroup,
                                                                              int8u cancelControl,
                                                                              int32u effectiveTime);
/** @brief Demand Response and Load Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId);
/** @brief Demand Response and Load Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                          int8u commandId,
                                                                          EmberAfStatus status);
/** @brief Demand Response and Load Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientInitCallback(int8u endpoint);
/** @brief Demand Response and Load Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                               EmberAfAttributeId attributeId,
                                                                                               int16u manufacturerCode);
/** @brief Demand Response and Load Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                      int16u indexOrDestination,
                                                                      EmberApsFrame *apsFrame,
                                                                      int16u msgLen,
                                                                      int8u *message,
                                                                      EmberStatus status);
/** @brief Demand Response and Load Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDemandResponseLoadControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       EmberAfAttributeType attributeType,
                                                                                       int8u size,
                                                                                       int8u *value);
/** @brief Demand Response and Load Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientTickCallback(int8u endpoint);
/** @brief Demand Response and Load Control Cluster Get Scheduled Events
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 * @param issuerEventId   Ver.: since se-1.2b-15-0131-02
 */
boolean emberAfDemandResponseLoadControlClusterGetScheduledEventsCallback(int32u startTime,
                                                                          int8u numberOfEvents,
                                                                          int32u issuerEventId);
/** @brief Demand Response and Load Control Cluster Load Control Event
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param deviceClass   Ver.: always
 * @param utilityEnrollmentGroup   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param criticalityLevel   Ver.: always
 * @param coolingTemperatureOffset   Ver.: always
 * @param heatingTemperatureOffset   Ver.: always
 * @param coolingTemperatureSetPoint   Ver.: always
 * @param heatingTemperatureSetPoint   Ver.: always
 * @param averageLoadAdjustmentPercentage   Ver.: always
 * @param dutyCycle   Ver.: always
 * @param eventControl   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterLoadControlEventCallback(int32u issuerEventId,
                                                                        int16u deviceClass,
                                                                        int8u utilityEnrollmentGroup,
                                                                        int32u startTime,
                                                                        int16u durationInMinutes,
                                                                        int8u criticalityLevel,
                                                                        int8u coolingTemperatureOffset,
                                                                        int8u heatingTemperatureOffset,
                                                                        int16s coolingTemperatureSetPoint,
                                                                        int16s heatingTemperatureSetPoint,
                                                                        int8s averageLoadAdjustmentPercentage,
                                                                        int8u dutyCycle,
                                                                        int8u eventControl);
/** @brief Demand Response and Load Control Cluster Report Event Status
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param eventStatus   Ver.: always
 * @param eventStatusTime   Ver.: always
 * @param criticalityLevelApplied   Ver.: always
 * @param coolingTemperatureSetPointApplied   Ver.: always
 * @param heatingTemperatureSetPointApplied   Ver.: always
 * @param averageLoadAdjustmentPercentageApplied   Ver.: always
 * @param dutyCycleApplied   Ver.: always
 * @param eventControl   Ver.: always
 * @param signatureType   Ver.: always
 * @param signature   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterReportEventStatusCallback(int32u issuerEventId,
                                                                         int8u eventStatus,
                                                                         int32u eventStatusTime,
                                                                         int8u criticalityLevelApplied,
                                                                         int16u coolingTemperatureSetPointApplied,
                                                                         int16u heatingTemperatureSetPointApplied,
                                                                         int8s averageLoadAdjustmentPercentageApplied,
                                                                         int8u dutyCycleApplied,
                                                                         int8u eventControl,
                                                                         int8u signatureType,
                                                                         int8u* signature);
/** @brief Demand Response and Load Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId);
/** @brief Demand Response and Load Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                          int8u commandId,
                                                                          EmberAfStatus status);
/** @brief Demand Response and Load Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerInitCallback(int8u endpoint);
/** @brief Demand Response and Load Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                               EmberAfAttributeId attributeId,
                                                                                               int16u manufacturerCode);
/** @brief Demand Response and Load Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                      int16u indexOrDestination,
                                                                      EmberApsFrame *apsFrame,
                                                                      int16u msgLen,
                                                                      int8u *message,
                                                                      EmberStatus status);
/** @brief Demand Response and Load Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDemandResponseLoadControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       EmberAfAttributeType attributeType,
                                                                                       int8u size,
                                                                                       int8u *value);
/** @brief Demand Response and Load Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerTickCallback(int8u endpoint);

/** @} END Demand Response and Load Control Cluster Callbacks */

/** @name Simple Metering Cluster Callbacks */
// @{

/** @brief Simple Metering Cluster Change Supply
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param requestDateTime   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param proposedSupplyStatus   Ver.: always
 * @param supplyControlBits   Ver.: always
 */
boolean emberAfSimpleMeteringClusterChangeSupplyCallback(int32u providerId,
                                                         int32u issuerEventId,
                                                         int32u requestDateTime,
                                                         int32u implementationDateTime,
                                                         int8u proposedSupplyStatus,
                                                         int8u supplyControlBits);
/** @brief Simple Metering Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSimpleMeteringClusterClientAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Simple Metering Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSimpleMeteringClusterClientDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Simple Metering Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSimpleMeteringClusterClientInitCallback(int8u endpoint);
/** @brief Simple Metering Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSimpleMeteringClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Simple Metering Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSimpleMeteringClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame *apsFrame,
                                                           int16u msgLen,
                                                           int8u *message,
                                                           EmberStatus status);
/** @brief Simple Metering Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSimpleMeteringClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u *value);
/** @brief Simple Metering Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSimpleMeteringClusterClientTickCallback(int8u endpoint);
/** @brief Simple Metering Cluster Configure Mirror
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param reportingInterval   Ver.: always
 * @param mirrorNotificationReporting   Ver.: always
 * @param notificationScheme   Ver.: always
 */
boolean emberAfSimpleMeteringClusterConfigureMirrorCallback(int32u issuerEventId,
                                                            int32u reportingInterval,
                                                            int8u mirrorNotificationReporting,
                                                            int8u notificationScheme);
/** @brief Simple Metering Cluster Configure Notification Flags
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param notificationScheme   Ver.: always
 * @param notificationFlagAttributeId   Ver.: always
 * @param clusterId   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param commandIds   Ver.: always
 */
boolean emberAfSimpleMeteringClusterConfigureNotificationFlagsCallback(int32u issuerEventId,
                                                                       int8u notificationScheme,
                                                                       int16u notificationFlagAttributeId,
                                                                       int16u clusterId,
                                                                       int16u manufacturerCode,
                                                                       int8u numberOfCommands,
                                                                       int8u* commandIds);
/** @brief Simple Metering Cluster Configure Notification Scheme
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param notificationScheme   Ver.: always
 * @param notificationFlagOrder   Ver.: always
 */
boolean emberAfSimpleMeteringClusterConfigureNotificationSchemeCallback(int32u issuerEventId,
                                                                        int8u notificationScheme,
                                                                        int32u notificationFlagOrder);
/** @brief Simple Metering Cluster Get Notified Message
 *
 * 
 *
 * @param notificationScheme   Ver.: always
 * @param notificationFlagAttributeId   Ver.: always
 * @param notificationFlagsN   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetNotifiedMessageCallback(int8u notificationScheme,
                                                               int16u notificationFlagAttributeId,
                                                               int32u notificationFlagsN);
/** @brief Simple Metering Cluster Get Profile
 *
 * 
 *
 * @param intervalChannel   Ver.: always
 * @param endTime   Ver.: always
 * @param numberOfPeriods   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetProfileCallback(int8u intervalChannel,
                                                       int32u endTime,
                                                       int8u numberOfPeriods);
/** @brief Simple Metering Cluster Get Profile Response
 *
 * 
 *
 * @param endTime   Ver.: always
 * @param status   Ver.: always
 * @param profileIntervalPeriod   Ver.: always
 * @param numberOfPeriodsDelivered   Ver.: always
 * @param intervals   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetProfileResponseCallback(int32u endTime,
                                                               int8u status,
                                                               int8u profileIntervalPeriod,
                                                               int8u numberOfPeriodsDelivered,
                                                               int8u* intervals);
/** @brief Simple Metering Cluster Get Sampled Data
 *
 * 
 *
 * @param sampleId   Ver.: always
 * @param earliestSampleTime   Ver.: always
 * @param sampleType   Ver.: always
 * @param numberOfSamples   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetSampledDataCallback(int16u sampleId,
                                                           int32u earliestSampleTime,
                                                           int8u sampleType,
                                                           int16u numberOfSamples);
/** @brief Simple Metering Cluster Get Sampled Data Response
 *
 * 
 *
 * @param sampleId   Ver.: always
 * @param sampleStartTime   Ver.: always
 * @param sampleType   Ver.: always
 * @param sampleRequestInterval   Ver.: always
 * @param numberOfSamples   Ver.: always
 * @param samples   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetSampledDataResponseCallback(int16u sampleId,
                                                                   int32u sampleStartTime,
                                                                   int8u sampleType,
                                                                   int16u sampleRequestInterval,
                                                                   int16u numberOfSamples,
                                                                   int8u* samples);
/** @brief Simple Metering Cluster Get Snapshot
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param latestEndTime   Ver.: always
 * @param snapshotOffset   Ver.: always
 * @param snapshotCause   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetSnapshotCallback(int32u earliestStartTime,
                                                        int32u latestEndTime,
                                                        int8u snapshotOffset,
                                                        int32u snapshotCause);
/** @brief Simple Metering Cluster Local Change Supply
 *
 * 
 *
 * @param proposedSupplyStatus   Ver.: always
 */
boolean emberAfSimpleMeteringClusterLocalChangeSupplyCallback(int8u proposedSupplyStatus);
/** @brief Simple Metering Cluster Mirror Removed
 *
 * 
 *
 * @param endpointId   Ver.: always
 */
boolean emberAfSimpleMeteringClusterMirrorRemovedCallback(int16u endpointId);
/** @brief Simple Metering Cluster Mirror Report Attribute Response
 *
 * 
 *
 * @param notificationScheme   Ver.: always
 * @param notificationFlags   Ver.: always
 */
boolean emberAfSimpleMeteringClusterMirrorReportAttributeResponseCallback(int8u notificationScheme,
                                                                          int8u* notificationFlags);
/** @brief Simple Metering Cluster Publish Snapshot
 *
 * 
 *
 * @param snapshotId   Ver.: always
 * @param snapshotTime   Ver.: always
 * @param totalSnapshotsFound   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalCommands   Ver.: always
 * @param snapshotCause   Ver.: always
 * @param snapshotPayloadType   Ver.: always
 * @param snapshotPayload   Ver.: always
 */
boolean emberAfSimpleMeteringClusterPublishSnapshotCallback(int32u snapshotId,
                                                            int32u snapshotTime,
                                                            int8u totalSnapshotsFound,
                                                            int8u commandIndex,
                                                            int8u totalCommands,
                                                            int32u snapshotCause,
                                                            int8u snapshotPayloadType,
                                                            int8u* snapshotPayload);
/** @brief Simple Metering Cluster Remove Mirror
 *
 * 
 *
 */
boolean emberAfSimpleMeteringClusterRemoveMirrorCallback(void);
/** @brief Simple Metering Cluster Request Fast Poll Mode
 *
 * 
 *
 * @param fastPollUpdatePeriod   Ver.: always
 * @param duration   Ver.: always
 */
boolean emberAfSimpleMeteringClusterRequestFastPollModeCallback(int8u fastPollUpdatePeriod,
                                                                int8u duration);
/** @brief Simple Metering Cluster Request Fast Poll Mode Response
 *
 * 
 *
 * @param appliedUpdatePeriod   Ver.: always
 * @param fastPollModeEndtime   Ver.: always
 */
boolean emberAfSimpleMeteringClusterRequestFastPollModeResponseCallback(int8u appliedUpdatePeriod,
                                                                        int32u fastPollModeEndtime);
/** @brief Simple Metering Cluster Request Mirror
 *
 * 
 *
 */
boolean emberAfSimpleMeteringClusterRequestMirrorCallback(void);
/** @brief Simple Metering Cluster Request Mirror Response
 *
 * 
 *
 * @param endpointId   Ver.: always
 */
boolean emberAfSimpleMeteringClusterRequestMirrorResponseCallback(int16u endpointId);
/** @brief Simple Metering Cluster Reset Load Limit Counter
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 */
boolean emberAfSimpleMeteringClusterResetLoadLimitCounterCallback(int32u providerId,
                                                                  int32u issuerEventId);
/** @brief Simple Metering Cluster Schedule Snapshot
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param commandCount   Ver.: always
 * @param snapshotSchedulePayload   Ver.: always
 */
boolean emberAfSimpleMeteringClusterScheduleSnapshotCallback(int32u issuerEventId,
                                                             int8u commandIndex,
                                                             int8u commandCount,
                                                             int8u* snapshotSchedulePayload);
/** @brief Simple Metering Cluster Schedule Snapshot Response
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param snapshotResponsePayload   Ver.: always
 */
boolean emberAfSimpleMeteringClusterScheduleSnapshotResponseCallback(int32u issuerEventId,
                                                                     int8u* snapshotResponsePayload);
/** @brief Simple Metering Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSimpleMeteringClusterServerAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Simple Metering Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSimpleMeteringClusterServerDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Simple Metering Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSimpleMeteringClusterServerInitCallback(int8u endpoint);
/** @brief Simple Metering Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSimpleMeteringClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Simple Metering Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSimpleMeteringClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame *apsFrame,
                                                           int16u msgLen,
                                                           int8u *message,
                                                           EmberStatus status);
/** @brief Simple Metering Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSimpleMeteringClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u *value);
/** @brief Simple Metering Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSimpleMeteringClusterServerTickCallback(int8u endpoint);
/** @brief Simple Metering Cluster Set Supply Status
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param supplyTamperState   Ver.: always
 * @param supplyDepletionState   Ver.: always
 * @param supplyUncontrolledFlowState   Ver.: always
 * @param loadLimitSupplyState   Ver.: always
 */
boolean emberAfSimpleMeteringClusterSetSupplyStatusCallback(int32u issuerEventId,
                                                            int8u supplyTamperState,
                                                            int8u supplyDepletionState,
                                                            int8u supplyUncontrolledFlowState,
                                                            int8u loadLimitSupplyState);
/** @brief Simple Metering Cluster Set Uncontrolled Flow Threshold
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param uncontrolledFlowThreshold   Ver.: always
 * @param unitOfMeasure   Ver.: always
 * @param multiplier   Ver.: always
 * @param divisor   Ver.: always
 * @param stabilisationPeriod   Ver.: always
 * @param measurementPeriod   Ver.: always
 */
boolean emberAfSimpleMeteringClusterSetUncontrolledFlowThresholdCallback(int32u providerId,
                                                                         int32u issuerEventId,
                                                                         int16u uncontrolledFlowThreshold,
                                                                         int8u unitOfMeasure,
                                                                         int16u multiplier,
                                                                         int16u divisor,
                                                                         int8u stabilisationPeriod,
                                                                         int16u measurementPeriod);
/** @brief Simple Metering Cluster Start Sampling
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startSamplingTime   Ver.: always
 * @param sampleType   Ver.: always
 * @param sampleRequestInterval   Ver.: always
 * @param maxNumberOfSamples   Ver.: always
 */
boolean emberAfSimpleMeteringClusterStartSamplingCallback(int32u issuerEventId,
                                                          int32u startSamplingTime,
                                                          int8u sampleType,
                                                          int16u sampleRequestInterval,
                                                          int16u maxNumberOfSamples);
/** @brief Simple Metering Cluster Start Sampling Response
 *
 * 
 *
 * @param sampleId   Ver.: always
 */
boolean emberAfSimpleMeteringClusterStartSamplingResponseCallback(int16u sampleId);
/** @brief Simple Metering Cluster Supply Status Response
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param supplyStatus   Ver.: always
 */
boolean emberAfSimpleMeteringClusterSupplyStatusResponseCallback(int32u providerId,
                                                                 int32u issuerEventId,
                                                                 int32u implementationDateTime,
                                                                 int8u supplyStatus);
/** @brief Simple Metering Cluster Take Snapshot
 *
 * 
 *
 * @param snapshotCause   Ver.: always
 */
boolean emberAfSimpleMeteringClusterTakeSnapshotCallback(int32u snapshotCause);
/** @brief Simple Metering Cluster Take Snapshot Response
 *
 * 
 *
 * @param snapshotId   Ver.: always
 * @param snapshotConfirmation   Ver.: always
 */
boolean emberAfSimpleMeteringClusterTakeSnapshotResponseCallback(int32u snapshotId,
                                                                 int8u snapshotConfirmation);

/** @} END Simple Metering Cluster Callbacks */

/** @name Messaging Cluster Callbacks */
// @{

/** @brief Messaging Cluster Cancel All Messages
 *
 * 
 *
 * @param implementationDateTime   Ver.: always
 */
boolean emberAfMessagingClusterCancelAllMessagesCallback(int32u implementationDateTime);
/** @brief Messaging Cluster Cancel Message
 *
 * 
 *
 * @param messageId   Ver.: always
 * @param messageControl   Ver.: always
 */
boolean emberAfMessagingClusterCancelMessageCallback(int32u messageId,
                                                     int8u messageControl);
/** @brief Messaging Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMessagingClusterClientAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Messaging Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMessagingClusterClientDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Messaging Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMessagingClusterClientInitCallback(int8u endpoint);
/** @brief Messaging Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMessagingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Messaging Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMessagingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Messaging Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMessagingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Messaging Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMessagingClusterClientTickCallback(int8u endpoint);
/** @brief Messaging Cluster Display Message
 *
 * 
 *
 * @param messageId   Ver.: always
 * @param messageControl   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param message   Ver.: always
 * @param optionalExtendedMessageControl   Ver.: since se-1.2a-07-5356-19
 */
boolean emberAfMessagingClusterDisplayMessageCallback(int32u messageId,
                                                      int8u messageControl,
                                                      int32u startTime,
                                                      int16u durationInMinutes,
                                                      int8u* message,
                                                      int8u optionalExtendedMessageControl);
/** @brief Messaging Cluster Display Protected Message
 *
 * 
 *
 * @param messageId   Ver.: always
 * @param messageControl   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param message   Ver.: always
 * @param optionalExtendedMessageControl   Ver.: always
 */
boolean emberAfMessagingClusterDisplayProtectedMessageCallback(int32u messageId,
                                                               int8u messageControl,
                                                               int32u startTime,
                                                               int16u durationInMinutes,
                                                               int8u* message,
                                                               int8u optionalExtendedMessageControl);
/** @brief Messaging Cluster Get Last Message
 *
 * 
 *
 */
boolean emberAfMessagingClusterGetLastMessageCallback(void);
/** @brief Messaging Cluster Get Message Cancellation
 *
 * 
 *
 * @param earliestImplementationTime   Ver.: always
 */
boolean emberAfMessagingClusterGetMessageCancellationCallback(int32u earliestImplementationTime);
/** @brief Messaging Cluster Message Confirmation
 *
 * 
 *
 * @param messageId   Ver.: always
 * @param confirmationTime   Ver.: always
 * @param messageConfirmationControl   Ver.: since se-1.2a-07-5356-19
 * @param messageResponse   Ver.: since se-1.2a-07-5356-19
 */
boolean emberAfMessagingClusterMessageConfirmationCallback(int32u messageId,
                                                           int32u confirmationTime,
                                                           int8u messageConfirmationControl,
                                                           int8u* messageResponse);
/** @brief Messaging Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMessagingClusterServerAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Messaging Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMessagingClusterServerDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Messaging Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMessagingClusterServerInitCallback(int8u endpoint);
/** @brief Messaging Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMessagingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Messaging Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMessagingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Messaging Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMessagingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Messaging Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMessagingClusterServerTickCallback(int8u endpoint);

/** @} END Messaging Cluster Callbacks */

/** @name Tunneling Cluster Callbacks */
// @{

/** @brief Tunneling Cluster Ack Transfer Data Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfBytesLeft   Ver.: always
 */
boolean emberAfTunnelingClusterAckTransferDataClientToServerCallback(int16u tunnelId,
                                                                     int16u numberOfBytesLeft);
/** @brief Tunneling Cluster Ack Transfer Data Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfBytesLeft   Ver.: always
 */
boolean emberAfTunnelingClusterAckTransferDataServerToClientCallback(int16u tunnelId,
                                                                     int16u numberOfBytesLeft);
/** @brief Tunneling Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTunnelingClusterClientAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Tunneling Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTunnelingClusterClientDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Tunneling Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTunnelingClusterClientInitCallback(int8u endpoint);
/** @brief Tunneling Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTunnelingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Tunneling Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTunnelingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Tunneling Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTunnelingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Tunneling Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTunnelingClusterClientTickCallback(int8u endpoint);
/** @brief Tunneling Cluster Close Tunnel
 *
 * 
 *
 * @param tunnelId   Ver.: always
 */
boolean emberAfTunnelingClusterCloseTunnelCallback(int16u tunnelId);
/** @brief Tunneling Cluster Get Supported Tunnel Protocols
 *
 * 
 *
 * @param protocolOffset   Ver.: always
 */
boolean emberAfTunnelingClusterGetSupportedTunnelProtocolsCallback(int8u protocolOffset);
/** @brief Tunneling Cluster Ready Data Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfOctetsLeft   Ver.: always
 */
boolean emberAfTunnelingClusterReadyDataClientToServerCallback(int16u tunnelId,
                                                               int16u numberOfOctetsLeft);
/** @brief Tunneling Cluster Ready Data Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfOctetsLeft   Ver.: always
 */
boolean emberAfTunnelingClusterReadyDataServerToClientCallback(int16u tunnelId,
                                                               int16u numberOfOctetsLeft);
/** @brief Tunneling Cluster Request Tunnel
 *
 * 
 *
 * @param protocolId   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param flowControlSupport   Ver.: always
 * @param maximumIncomingTransferSize   Ver.: since se-1.1a-07-5356-17
 */
boolean emberAfTunnelingClusterRequestTunnelCallback(int8u protocolId,
                                                     int16u manufacturerCode,
                                                     int8u flowControlSupport,
                                                     int16u maximumIncomingTransferSize);
/** @brief Tunneling Cluster Request Tunnel Response
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param tunnelStatus   Ver.: always
 * @param maximumIncomingTransferSize   Ver.: since se-1.1a-07-5356-17
 */
boolean emberAfTunnelingClusterRequestTunnelResponseCallback(int16u tunnelId,
                                                             int8u tunnelStatus,
                                                             int16u maximumIncomingTransferSize);
/** @brief Tunneling Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTunnelingClusterServerAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Tunneling Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTunnelingClusterServerDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Tunneling Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTunnelingClusterServerInitCallback(int8u endpoint);
/** @brief Tunneling Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTunnelingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Tunneling Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTunnelingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame *apsFrame,
                                                      int16u msgLen,
                                                      int8u *message,
                                                      EmberStatus status);
/** @brief Tunneling Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTunnelingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u *value);
/** @brief Tunneling Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTunnelingClusterServerTickCallback(int8u endpoint);
/** @brief Tunneling Cluster Supported Tunnel Protocols Response
 *
 * 
 *
 * @param protocolListComplete   Ver.: always
 * @param protocolCount   Ver.: always
 * @param protocolList   Ver.: always
 */
boolean emberAfTunnelingClusterSupportedTunnelProtocolsResponseCallback(int8u protocolListComplete,
                                                                        int8u protocolCount,
                                                                        int8u* protocolList);
/** @brief Tunneling Cluster Transfer Data Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param data   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataClientToServerCallback(int16u tunnelId,
                                                                  int8u* data);
/** @brief Tunneling Cluster Transfer Data Error Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param transferDataStatus   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataErrorClientToServerCallback(int16u tunnelId,
                                                                       int8u transferDataStatus);
/** @brief Tunneling Cluster Transfer Data Error Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param transferDataStatus   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataErrorServerToClientCallback(int16u tunnelId,
                                                                       int8u transferDataStatus);
/** @brief Tunneling Cluster Transfer Data Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param data   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataServerToClientCallback(int16u tunnelId,
                                                                  int8u* data);
/** @brief Tunneling Cluster Tunnel Closure Notification
 *
 * 
 *
 * @param tunnelId   Ver.: always
 */
boolean emberAfTunnelingClusterTunnelClosureNotificationCallback(int16u tunnelId);

/** @} END Tunneling Cluster Callbacks */

/** @name Prepayment Cluster Callbacks */
// @{

/** @brief Prepayment Cluster Change Debt
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param debtLabel   Ver.: always
 * @param debtAmount   Ver.: always
 * @param debtRecoveryMethod   Ver.: always
 * @param debtAmountType   Ver.: always
 * @param debtRecoveryStartTime   Ver.: always
 * @param debtRecoveryCollectionTime   Ver.: always
 * @param debtRecoveryFrequency   Ver.: always
 * @param debtRecoveryAmount   Ver.: always
 * @param debtRecoveryBalancePercentage   Ver.: always
 */
boolean emberAfPrepaymentClusterChangeDebtCallback(int32u issuerEventId,
                                                   int8u* debtLabel,
                                                   int32u debtAmount,
                                                   int8u debtRecoveryMethod,
                                                   int8u debtAmountType,
                                                   int32u debtRecoveryStartTime,
                                                   int16u debtRecoveryCollectionTime,
                                                   int8u debtRecoveryFrequency,
                                                   int32u debtRecoveryAmount,
                                                   int16u debtRecoveryBalancePercentage);
/** @brief Prepayment Cluster Change Payment Mode
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param proposedPaymentControlConfiguration   Ver.: always
 * @param cutOffValue   Ver.: always
 */
boolean emberAfPrepaymentClusterChangePaymentModeCallback(int32u providerId,
                                                          int32u issuerEventId,
                                                          int32u implementationDateTime,
                                                          int16u proposedPaymentControlConfiguration,
                                                          int32u cutOffValue);
/** @brief Prepayment Cluster Change Payment Mode Response
 *
 * 
 *
 * @param friendlyCredit   Ver.: always
 * @param friendlyCreditCalendarId   Ver.: always
 * @param emergencyCreditLimit   Ver.: always
 * @param emergencyCreditThreshold   Ver.: always
 */
boolean emberAfPrepaymentClusterChangePaymentModeResponseCallback(int8u friendlyCredit,
                                                                  int32u friendlyCreditCalendarId,
                                                                  int32u emergencyCreditLimit,
                                                                  int32u emergencyCreditThreshold);
/** @brief Prepayment Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPrepaymentClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Prepayment Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPrepaymentClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Prepayment Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPrepaymentClusterClientInitCallback(int8u endpoint);
/** @brief Prepayment Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPrepaymentClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Prepayment Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPrepaymentClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Prepayment Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPrepaymentClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Prepayment Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPrepaymentClusterClientTickCallback(int8u endpoint);
/** @brief Prepayment Cluster Consumer Top Up
 *
 * 
 *
 * @param originatingDevice   Ver.: always
 * @param topUpCode   Ver.: always
 */
boolean emberAfPrepaymentClusterConsumerTopUpCallback(int8u originatingDevice,
                                                      int8u* topUpCode);
/** @brief Prepayment Cluster Consumer Top Up Response
 *
 * 
 *
 * @param resultType   Ver.: always
 * @param topUpValue   Ver.: always
 * @param sourceOfTopUp   Ver.: always
 * @param creditRemaining   Ver.: always
 */
boolean emberAfPrepaymentClusterConsumerTopUpResponseCallback(int8u resultType,
                                                              int32u topUpValue,
                                                              int8u sourceOfTopUp,
                                                              int32u creditRemaining);
/** @brief Prepayment Cluster Credit Adjustment
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param creditAdjustmentType   Ver.: always
 * @param creditAdjustmentValue   Ver.: always
 */
boolean emberAfPrepaymentClusterCreditAdjustmentCallback(int32u issuerEventId,
                                                         int32u startTime,
                                                         int8u creditAdjustmentType,
                                                         int32u creditAdjustmentValue);
/** @brief Prepayment Cluster Emergency Credit Setup
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param emergencyCreditLimit   Ver.: always
 * @param emergencyCreditThreshold   Ver.: always
 */
boolean emberAfPrepaymentClusterEmergencyCreditSetupCallback(int32u issuerEventId,
                                                             int32u startTime,
                                                             int32u emergencyCreditLimit,
                                                             int32u emergencyCreditThreshold);
/** @brief Prepayment Cluster Get Debt Repayment Log
 *
 * 
 *
 * @param latestEndTime   Ver.: always
 * @param numberOfDebts   Ver.: always
 * @param debtType   Ver.: always
 */
boolean emberAfPrepaymentClusterGetDebtRepaymentLogCallback(int32u latestEndTime,
                                                            int8u numberOfDebts,
                                                            int8u debtType);
/** @brief Prepayment Cluster Get Prepay Snapshot
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param latestEndTime   Ver.: always
 * @param snapshotOffset   Ver.: always
 * @param snapshotCause   Ver.: always
 */
boolean emberAfPrepaymentClusterGetPrepaySnapshotCallback(int32u earliestStartTime,
                                                          int32u latestEndTime,
                                                          int8u snapshotOffset,
                                                          int32u snapshotCause);
/** @brief Prepayment Cluster Get Top Up Log
 *
 * 
 *
 * @param latestEndTime   Ver.: always
 * @param numberOfRecords   Ver.: always
 */
boolean emberAfPrepaymentClusterGetTopUpLogCallback(int32u latestEndTime,
                                                    int8u numberOfRecords);
/** @brief Prepayment Cluster Publish Debt Log
 *
 * 
 *
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param debtPayload   Ver.: always
 */
boolean emberAfPrepaymentClusterPublishDebtLogCallback(int8u commandIndex,
                                                       int8u totalNumberOfCommands,
                                                       int8u* debtPayload);
/** @brief Prepayment Cluster Publish Prepay Snapshot
 *
 * 
 *
 * @param snapshotId   Ver.: always
 * @param snapshotTime   Ver.: always
 * @param totalSnapshotsFound   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param snapshotCause   Ver.: always
 * @param snapshotPayloadType   Ver.: always
 * @param snapshotPayload   Ver.: always
 */
boolean emberAfPrepaymentClusterPublishPrepaySnapshotCallback(int32u snapshotId,
                                                              int32u snapshotTime,
                                                              int8u totalSnapshotsFound,
                                                              int8u commandIndex,
                                                              int8u totalNumberOfCommands,
                                                              int32u snapshotCause,
                                                              int8u snapshotPayloadType,
                                                              int8u* snapshotPayload);
/** @brief Prepayment Cluster Publish Top Up Log
 *
 * 
 *
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param topUpPayload   Ver.: always
 */
boolean emberAfPrepaymentClusterPublishTopUpLogCallback(int8u commandIndex,
                                                        int8u totalNumberOfCommands,
                                                        int8u* topUpPayload);
/** @brief Prepayment Cluster Select Available Emergency Credit
 *
 * 
 *
 * @param commandIssueDateTime   Ver.: always
 * @param originatingDevice   Ver.: always
 */
boolean emberAfPrepaymentClusterSelectAvailableEmergencyCreditCallback(int32u commandIssueDateTime,
                                                                       int8u originatingDevice);
/** @brief Prepayment Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPrepaymentClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Prepayment Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPrepaymentClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Prepayment Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPrepaymentClusterServerInitCallback(int8u endpoint);
/** @brief Prepayment Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPrepaymentClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Prepayment Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPrepaymentClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief Prepayment Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPrepaymentClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief Prepayment Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPrepaymentClusterServerTickCallback(int8u endpoint);
/** @brief Prepayment Cluster Set Low Credit Warning Level
 *
 * 
 *
 * @param lowCreditWarningLevel   Ver.: always
 */
boolean emberAfPrepaymentClusterSetLowCreditWarningLevelCallback(int32u lowCreditWarningLevel);
/** @brief Prepayment Cluster Set Maximum Credit Limit
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param maximumCreditLevel   Ver.: always
 * @param maximumCreditPerTopUp   Ver.: always
 */
boolean emberAfPrepaymentClusterSetMaximumCreditLimitCallback(int32u providerId,
                                                              int32u issuerEventId,
                                                              int32u implementationDateTime,
                                                              int32u maximumCreditLevel,
                                                              int32u maximumCreditPerTopUp);
/** @brief Prepayment Cluster Set Overall Debt Cap
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param overallDebtCap   Ver.: always
 */
boolean emberAfPrepaymentClusterSetOverallDebtCapCallback(int32u providerId,
                                                          int32u issuerEventId,
                                                          int32u implementationDateTime,
                                                          int32u overallDebtCap);

/** @} END Prepayment Cluster Callbacks */

/** @name Energy Management Cluster Callbacks */
// @{

/** @brief Energy Management Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEnergyManagementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Energy Management Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEnergyManagementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Energy Management Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEnergyManagementClusterClientInitCallback(int8u endpoint);
/** @brief Energy Management Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEnergyManagementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Energy Management Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEnergyManagementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Energy Management Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEnergyManagementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Energy Management Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEnergyManagementClusterClientTickCallback(int8u endpoint);
/** @brief Energy Management Cluster Manage Event
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param deviceClass   Ver.: always
 * @param utilityEnrollmentGroup   Ver.: always
 * @param actionRequired   Ver.: always
 */
boolean emberAfEnergyManagementClusterManageEventCallback(int32u issuerEventId,
                                                          int16u deviceClass,
                                                          int8u utilityEnrollmentGroup,
                                                          int8u actionRequired);
/** @brief Energy Management Cluster Report Event Status
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param eventStatus   Ver.: always
 * @param eventStatusTime   Ver.: always
 * @param criticalityLevelApplied   Ver.: always
 * @param coolingTemperatureSetPointApplied   Ver.: always
 * @param heatingTemperatureSetPointApplied   Ver.: always
 * @param averageLoadAdjustmentPercentageApplied   Ver.: always
 * @param dutyCycleApplied   Ver.: always
 * @param eventControl   Ver.: always
 */
boolean emberAfEnergyManagementClusterReportEventStatusCallback(int32u issuerEventId,
                                                                int8u eventStatus,
                                                                int32u eventStatusTime,
                                                                int8u criticalityLevelApplied,
                                                                int16u coolingTemperatureSetPointApplied,
                                                                int16u heatingTemperatureSetPointApplied,
                                                                int8s averageLoadAdjustmentPercentageApplied,
                                                                int8u dutyCycleApplied,
                                                                int8u eventControl);
/** @brief Energy Management Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEnergyManagementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Energy Management Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEnergyManagementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Energy Management Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEnergyManagementClusterServerInitCallback(int8u endpoint);
/** @brief Energy Management Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEnergyManagementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Energy Management Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEnergyManagementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Energy Management Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEnergyManagementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Energy Management Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEnergyManagementClusterServerTickCallback(int8u endpoint);

/** @} END Energy Management Cluster Callbacks */

/** @name Calendar Cluster Callbacks */
// @{

/** @brief Calendar Cluster Cancel Calendar
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param calendarType   Ver.: always
 */
boolean emberAfCalendarClusterCancelCalendarCallback(int32u providerId,
                                                     int32u issuerCalendarId,
                                                     int8u calendarType);
/** @brief Calendar Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfCalendarClusterClientAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Calendar Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfCalendarClusterClientDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Calendar Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfCalendarClusterClientInitCallback(int8u endpoint);
/** @brief Calendar Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfCalendarClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Calendar Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfCalendarClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Calendar Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfCalendarClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Calendar Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfCalendarClusterClientTickCallback(int8u endpoint);
/** @brief Calendar Cluster Get Calendar
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCalendars   Ver.: always
 * @param calendarType   Ver.: always
 * @param providerId   Ver.: always
 */
boolean emberAfCalendarClusterGetCalendarCallback(int32u earliestStartTime,
                                                  int32u minIssuerEventId,
                                                  int8u numberOfCalendars,
                                                  int8u calendarType,
                                                  int32u providerId);
/** @brief Calendar Cluster Get Calendar Cancellation
 *
 * 
 *
 */
boolean emberAfCalendarClusterGetCalendarCancellationCallback(void);
/** @brief Calendar Cluster Get Day Profiles
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startDayId   Ver.: always
 * @param numberOfDays   Ver.: always
 */
boolean emberAfCalendarClusterGetDayProfilesCallback(int32u providerId,
                                                     int32u issuerCalendarId,
                                                     int8u startDayId,
                                                     int8u numberOfDays);
/** @brief Calendar Cluster Get Seasons
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 */
boolean emberAfCalendarClusterGetSeasonsCallback(int32u providerId,
                                                 int32u issuerCalendarId);
/** @brief Calendar Cluster Get Special Days
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 * @param calendarType   Ver.: always
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 */
boolean emberAfCalendarClusterGetSpecialDaysCallback(int32u startTime,
                                                     int8u numberOfEvents,
                                                     int8u calendarType,
                                                     int32u providerId,
                                                     int32u issuerCalendarId);
/** @brief Calendar Cluster Get Week Profiles
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startWeekId   Ver.: always
 * @param numberOfWeeks   Ver.: always
 */
boolean emberAfCalendarClusterGetWeekProfilesCallback(int32u providerId,
                                                      int32u issuerCalendarId,
                                                      int8u startWeekId,
                                                      int8u numberOfWeeks);
/** @brief Calendar Cluster Publish Calendar
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startTime   Ver.: always
 * @param calendarType   Ver.: always
 * @param calendarTimeReference   Ver.: always
 * @param calendarName   Ver.: always
 * @param numberOfSeasons   Ver.: always
 * @param numberOfWeekProfiles   Ver.: always
 * @param numberOfDayProfiles   Ver.: always
 */
boolean emberAfCalendarClusterPublishCalendarCallback(int32u providerId,
                                                      int32u issuerEventId,
                                                      int32u issuerCalendarId,
                                                      int32u startTime,
                                                      int8u calendarType,
                                                      int8u calendarTimeReference,
                                                      int8u* calendarName,
                                                      int8u numberOfSeasons,
                                                      int8u numberOfWeekProfiles,
                                                      int8u numberOfDayProfiles);
/** @brief Calendar Cluster Publish Day Profile
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param dayId   Ver.: always
 * @param totalNumberOfScheduleEntries   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param calendarType   Ver.: always
 * @param dayScheduleEntries   Ver.: always
 */
boolean emberAfCalendarClusterPublishDayProfileCallback(int32u providerId,
                                                        int32u issuerEventId,
                                                        int32u issuerCalendarId,
                                                        int8u dayId,
                                                        int8u totalNumberOfScheduleEntries,
                                                        int8u commandIndex,
                                                        int8u totalNumberOfCommands,
                                                        int8u calendarType,
                                                        int8u* dayScheduleEntries);
/** @brief Calendar Cluster Publish Seasons
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param seasonEntries   Ver.: always
 */
boolean emberAfCalendarClusterPublishSeasonsCallback(int32u providerId,
                                                     int32u issuerEventId,
                                                     int32u issuerCalendarId,
                                                     int8u commandIndex,
                                                     int8u totalNumberOfCommands,
                                                     int8u* seasonEntries);
/** @brief Calendar Cluster Publish Special Days
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startTime   Ver.: always
 * @param calendarType   Ver.: always
 * @param totalNumberOfSpecialDays   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param specialDayEntries   Ver.: always
 */
boolean emberAfCalendarClusterPublishSpecialDaysCallback(int32u providerId,
                                                         int32u issuerEventId,
                                                         int32u issuerCalendarId,
                                                         int32u startTime,
                                                         int8u calendarType,
                                                         int8u totalNumberOfSpecialDays,
                                                         int8u commandIndex,
                                                         int8u totalNumberOfCommands,
                                                         int8u* specialDayEntries);
/** @brief Calendar Cluster Publish Week Profile
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param weekId   Ver.: always
 * @param dayIdRefMonday   Ver.: always
 * @param dayIdRefTuesday   Ver.: always
 * @param dayIdRefWednesday   Ver.: always
 * @param dayIdRefThursday   Ver.: always
 * @param dayIdRefFriday   Ver.: always
 * @param dayIdRefSaturday   Ver.: always
 * @param dayIdRefSunday   Ver.: always
 */
boolean emberAfCalendarClusterPublishWeekProfileCallback(int32u providerId,
                                                         int32u issuerEventId,
                                                         int32u issuerCalendarId,
                                                         int8u weekId,
                                                         int8u dayIdRefMonday,
                                                         int8u dayIdRefTuesday,
                                                         int8u dayIdRefWednesday,
                                                         int8u dayIdRefThursday,
                                                         int8u dayIdRefFriday,
                                                         int8u dayIdRefSaturday,
                                                         int8u dayIdRefSunday);
/** @brief Calendar Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfCalendarClusterServerAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Calendar Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfCalendarClusterServerDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Calendar Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfCalendarClusterServerInitCallback(int8u endpoint);
/** @brief Calendar Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfCalendarClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Calendar Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfCalendarClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Calendar Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfCalendarClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Calendar Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfCalendarClusterServerTickCallback(int8u endpoint);

/** @} END Calendar Cluster Callbacks */

/** @name Device Management Cluster Callbacks */
// @{

/** @brief Device Management Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceManagementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Device Management Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceManagementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Device Management Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceManagementClusterClientInitCallback(int8u endpoint);
/** @brief Device Management Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceManagementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Device Management Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceManagementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Device Management Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceManagementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Device Management Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceManagementClusterClientTickCallback(int8u endpoint);
/** @brief Device Management Cluster Get C I N
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetCINCallback(void);
/** @brief Device Management Cluster Get Change Of Supplier
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetChangeOfSupplierCallback(void);
/** @brief Device Management Cluster Get Change Of Tenancy
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetChangeOfTenancyCallback(void);
/** @brief Device Management Cluster Get Event Configuration
 *
 * 
 *
 * @param eventId   Ver.: always
 */
boolean emberAfDeviceManagementClusterGetEventConfigurationCallback(int16u eventId);
/** @brief Device Management Cluster Get Site Id
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetSiteIdCallback(void);
/** @brief Device Management Cluster Publish Change Of Supplier
 *
 * 
 *
 * @param currentProviderId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param tariffType   Ver.: always
 * @param proposedProviderId   Ver.: always
 * @param providerChangeImplementationTime   Ver.: always
 * @param providerChangeControl   Ver.: always
 * @param proposedProviderName   Ver.: always
 * @param proposedProviderContactDetails   Ver.: always
 */
boolean emberAfDeviceManagementClusterPublishChangeOfSupplierCallback(int32u currentProviderId,
                                                                      int32u issuerEventId,
                                                                      int8u tariffType,
                                                                      int32u proposedProviderId,
                                                                      int32u providerChangeImplementationTime,
                                                                      int32u providerChangeControl,
                                                                      int8u* proposedProviderName,
                                                                      int8u* proposedProviderContactDetails);
/** @brief Device Management Cluster Publish Change Of Tenancy
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param tariffType   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param proposedTenancyChangeControl   Ver.: always
 */
boolean emberAfDeviceManagementClusterPublishChangeOfTenancyCallback(int32u providerId,
                                                                     int32u issuerEventId,
                                                                     int8u tariffType,
                                                                     int32u implementationDateTime,
                                                                     int32u proposedTenancyChangeControl);
/** @brief Device Management Cluster Report Event Configuration
 *
 * 
 *
 * @param commandIndex   Ver.: always
 * @param totalCommands   Ver.: always
 * @param eventConfigurationPayload   Ver.: always
 */
boolean emberAfDeviceManagementClusterReportEventConfigurationCallback(int8u commandIndex,
                                                                       int8u totalCommands,
                                                                       int8u* eventConfigurationPayload);
/** @brief Device Management Cluster Request New Password
 *
 * 
 *
 * @param passwordType   Ver.: always
 */
boolean emberAfDeviceManagementClusterRequestNewPasswordCallback(int8u passwordType);
/** @brief Device Management Cluster Request New Password Response
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param passwordType   Ver.: always
 * @param password   Ver.: always
 */
boolean emberAfDeviceManagementClusterRequestNewPasswordResponseCallback(int32u issuerEventId,
                                                                         int32u implementationDateTime,
                                                                         int16u durationInMinutes,
                                                                         int8u passwordType,
                                                                         int8u* password);
/** @brief Device Management Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceManagementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Device Management Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceManagementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Device Management Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceManagementClusterServerInitCallback(int8u endpoint);
/** @brief Device Management Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceManagementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Device Management Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceManagementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Device Management Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceManagementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Device Management Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceManagementClusterServerTickCallback(int8u endpoint);
/** @brief Device Management Cluster Set Event Configuration
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startDateTime   Ver.: always
 * @param eventConfiguration   Ver.: always
 * @param configurationControl   Ver.: always
 * @param eventConfigurationPayload   Ver.: always
 */
boolean emberAfDeviceManagementClusterSetEventConfigurationCallback(int32u issuerEventId,
                                                                    int32u startDateTime,
                                                                    int8u eventConfiguration,
                                                                    int8u configurationControl,
                                                                    int8u* eventConfigurationPayload);
/** @brief Device Management Cluster Update C I N
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param implementationTime   Ver.: always
 * @param providerId   Ver.: always
 * @param customerIdNumber   Ver.: always
 */
boolean emberAfDeviceManagementClusterUpdateCINCallback(int32u issuerEventId,
                                                        int32u implementationTime,
                                                        int32u providerId,
                                                        int8u* customerIdNumber);
/** @brief Device Management Cluster Update Site Id
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param siteIdTime   Ver.: always
 * @param providerId   Ver.: always
 * @param siteId   Ver.: always
 */
boolean emberAfDeviceManagementClusterUpdateSiteIdCallback(int32u issuerEventId,
                                                           int32u siteIdTime,
                                                           int32u providerId,
                                                           int8u* siteId);

/** @} END Device Management Cluster Callbacks */

/** @name Events Cluster Callbacks */
// @{

/** @brief Events Cluster Clear Event Log Request
 *
 * 
 *
 * @param logId   Ver.: always
 */
boolean emberAfEventsClusterClearEventLogRequestCallback(int8u logId);
/** @brief Events Cluster Clear Event Log Response
 *
 * 
 *
 * @param clearedEventsLogs   Ver.: always
 */
boolean emberAfEventsClusterClearEventLogResponseCallback(int8u clearedEventsLogs);
/** @brief Events Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEventsClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Events Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEventsClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Events Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEventsClusterClientInitCallback(int8u endpoint);
/** @brief Events Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEventsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Events Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEventsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Events Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEventsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Events Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEventsClusterClientTickCallback(int8u endpoint);
/** @brief Events Cluster Get Event Log
 *
 * 
 *
 * @param eventControlLogId   Ver.: always
 * @param eventId   Ver.: always
 * @param startTime   Ver.: always
 * @param endTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 * @param eventOffset   Ver.: always
 */
boolean emberAfEventsClusterGetEventLogCallback(int8u eventControlLogId,
                                                int16u eventId,
                                                int32u startTime,
                                                int32u endTime,
                                                int8u numberOfEvents,
                                                int16u eventOffset);
/** @brief Events Cluster Publish Event
 *
 * 
 *
 * @param logId   Ver.: always
 * @param eventId   Ver.: always
 * @param eventTime   Ver.: always
 * @param eventControl   Ver.: always
 * @param eventData   Ver.: always
 */
boolean emberAfEventsClusterPublishEventCallback(int8u logId,
                                                 int16u eventId,
                                                 int32u eventTime,
                                                 int8u eventControl,
                                                 int8u* eventData);
/** @brief Events Cluster Publish Event Log
 *
 * 
 *
 * @param totalNumberOfEvents   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalCommands   Ver.: always
 * @param logPayloadControl   Ver.: always
 * @param logPayload   Ver.: always
 */
boolean emberAfEventsClusterPublishEventLogCallback(int16u totalNumberOfEvents,
                                                    int8u commandIndex,
                                                    int8u totalCommands,
                                                    int8u logPayloadControl,
                                                    int8u* logPayload);
/** @brief Events Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEventsClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Events Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEventsClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Events Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEventsClusterServerInitCallback(int8u endpoint);
/** @brief Events Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEventsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Events Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEventsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Events Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEventsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Events Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEventsClusterServerTickCallback(int8u endpoint);

/** @} END Events Cluster Callbacks */

/** @name MDU Pairing Cluster Callbacks */
// @{

/** @brief MDU Pairing Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMduPairingClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief MDU Pairing Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMduPairingClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief MDU Pairing Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMduPairingClusterClientInitCallback(int8u endpoint);
/** @brief MDU Pairing Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMduPairingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief MDU Pairing Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMduPairingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief MDU Pairing Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMduPairingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief MDU Pairing Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMduPairingClusterClientTickCallback(int8u endpoint);
/** @brief MDU Pairing Cluster Pairing Request
 *
 * 
 *
 * @param localPairingInformationVersion   Ver.: always
 * @param eui64OfRequestingDevice   Ver.: always
 */
boolean emberAfMduPairingClusterPairingRequestCallback(int32u localPairingInformationVersion,
                                                       int8u* eui64OfRequestingDevice);
/** @brief MDU Pairing Cluster Pairing Response
 *
 * 
 *
 * @param pairingInformationVersion   Ver.: always
 * @param totalNumberOfDevices   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param eui64s   Ver.: always
 */
boolean emberAfMduPairingClusterPairingResponseCallback(int32u pairingInformationVersion,
                                                        int8u totalNumberOfDevices,
                                                        int8u commandIndex,
                                                        int8u totalNumberOfCommands,
                                                        int8u* eui64s);
/** @brief MDU Pairing Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMduPairingClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief MDU Pairing Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMduPairingClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief MDU Pairing Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMduPairingClusterServerInitCallback(int8u endpoint);
/** @brief MDU Pairing Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMduPairingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief MDU Pairing Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMduPairingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame *apsFrame,
                                                       int16u msgLen,
                                                       int8u *message,
                                                       EmberStatus status);
/** @brief MDU Pairing Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMduPairingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u *value);
/** @brief MDU Pairing Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMduPairingClusterServerTickCallback(int8u endpoint);

/** @} END MDU Pairing Cluster Callbacks */

/** @name Key Establishment Cluster Callbacks */
// @{

/** @brief Key Establishment Cluster Client Command Received
 *
 * This function is called by the application framework when a server-to-client
 * key establishment command is received but has yet to be handled by the
 * framework code.  This function should return a bool value indicating whether
 * the command has been handled by the application code and should not be
 * further processed by the framework.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand *cmd);
/** @brief Key Establishment Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Key Establishment Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Key Establishment Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientInitCallback(int8u endpoint);
/** @brief Key Establishment Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfKeyEstablishmentClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Key Establishment Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Key Establishment Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfKeyEstablishmentClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Key Establishment Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientTickCallback(int8u endpoint);
/** @brief Key Establishment Cluster Confirm Key Data Request
 *
 * 
 *
 * @param secureMessageAuthenticationCode   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterConfirmKeyDataRequestCallback(int8u* secureMessageAuthenticationCode);
/** @brief Key Establishment Cluster Confirm Key Data Response
 *
 * 
 *
 * @param secureMessageAuthenticationCode   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterConfirmKeyDataResponseCallback(int8u* secureMessageAuthenticationCode);
/** @brief Key Establishment Cluster Ephemeral Data Request
 *
 * 
 *
 * @param ephemeralData   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterEphemeralDataRequestCallback(int8u* ephemeralData);
/** @brief Key Establishment Cluster Ephemeral Data Response
 *
 * 
 *
 * @param ephemeralData   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterEphemeralDataResponseCallback(int8u* ephemeralData);
/** @brief Key Establishment Cluster Initiate Key Establishment Request
 *
 * 
 *
 * @param keyEstablishmentSuite   Ver.: always
 * @param ephemeralDataGenerateTime   Ver.: always
 * @param confirmKeyGenerateTime   Ver.: always
 * @param identity   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterInitiateKeyEstablishmentRequestCallback(int16u keyEstablishmentSuite,
                                                                              int8u ephemeralDataGenerateTime,
                                                                              int8u confirmKeyGenerateTime,
                                                                              int8u* identity);
/** @brief Key Establishment Cluster Initiate Key Establishment Response
 *
 * 
 *
 * @param requestedKeyEstablishmentSuite   Ver.: always
 * @param ephemeralDataGenerateTime   Ver.: always
 * @param confirmKeyGenerateTime   Ver.: always
 * @param identity   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterInitiateKeyEstablishmentResponseCallback(int16u requestedKeyEstablishmentSuite,
                                                                               int8u ephemeralDataGenerateTime,
                                                                               int8u confirmKeyGenerateTime,
                                                                               int8u* identity);
/** @brief Key Establishment Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Key Establishment Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Key Establishment Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerInitCallback(int8u endpoint);
/** @brief Key Establishment Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfKeyEstablishmentClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Key Establishment Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief Key Establishment Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfKeyEstablishmentClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief Key Establishment Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerTickCallback(int8u endpoint);
/** @brief Key Establishment Cluster Terminate Key Establishment
 *
 * 
 *
 * @param statusCode   Ver.: always
 * @param waitTime   Ver.: always
 * @param keyEstablishmentSuite   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterTerminateKeyEstablishmentCallback(int8u statusCode,
                                                                        int8u waitTime,
                                                                        int16u keyEstablishmentSuite);
/** @brief Key Establishment Cluster Server Command Received
 *
 * This function is called by the application framework when a client-to-server
 * key establishment command is received but has yet to be handled by the
 * framework code.  This function should return a bool value indicating whether
 * the command has been handled by the application code and should not be
 * further processed by the framework.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand *cmd);

/** @} END Key Establishment Cluster Callbacks */

/** @name Information Cluster Callbacks */
// @{

/** @brief Information Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfInformationClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Information Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfInformationClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Information Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfInformationClusterClientInitCallback(int8u endpoint);
/** @brief Information Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfInformationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Information Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfInformationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Information Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfInformationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Information Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfInformationClusterClientTickCallback(int8u endpoint);
/** @brief Information Cluster Configure Delivery Enable
 *
 * 
 *
 * @param enable   Ver.: always
 */
boolean emberAfInformationClusterConfigureDeliveryEnableCallback(int8u enable);
/** @brief Information Cluster Configure Node Description
 *
 * 
 *
 * @param description   Ver.: always
 */
boolean emberAfInformationClusterConfigureNodeDescriptionCallback(int8u* description);
/** @brief Information Cluster Configure Push Information Timer
 *
 * 
 *
 * @param timer   Ver.: always
 */
boolean emberAfInformationClusterConfigurePushInformationTimerCallback(int32u timer);
/** @brief Information Cluster Configure Set Root Id
 *
 * 
 *
 * @param rootId   Ver.: always
 */
boolean emberAfInformationClusterConfigureSetRootIdCallback(int16u rootId);
/** @brief Information Cluster Delete
 *
 * 
 *
 * @param deletionOptions   Ver.: always
 * @param contentIds   Ver.: always
 */
boolean emberAfInformationClusterDeleteCallback(int8u deletionOptions,
                                                int8u* contentIds);
/** @brief Information Cluster Delete Response
 *
 * 
 *
 * @param notificationList   Ver.: always
 */
boolean emberAfInformationClusterDeleteResponseCallback(int8u* notificationList);
/** @brief Information Cluster Push Information
 *
 * 
 *
 * @param contents   Ver.: always
 */
boolean emberAfInformationClusterPushInformationCallback(int8u* contents);
/** @brief Information Cluster Push Information Response
 *
 * 
 *
 * @param notificationList   Ver.: always
 */
boolean emberAfInformationClusterPushInformationResponseCallback(int8u* notificationList);
/** @brief Information Cluster Request Information
 *
 * 
 *
 * @param inquiryId   Ver.: always
 * @param dataTypeId   Ver.: always
 * @param requestInformationPayload   Ver.: always
 */
boolean emberAfInformationClusterRequestInformationCallback(int8u inquiryId,
                                                            int8u dataTypeId,
                                                            int8u* requestInformationPayload);
/** @brief Information Cluster Request Information Response
 *
 * 
 *
 * @param number   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfInformationClusterRequestInformationResponseCallback(int8u number,
                                                                    int8u* buffer);
/** @brief Information Cluster Request Preference Confirmation
 *
 * 
 *
 * @param statusFeedbackList   Ver.: always
 */
boolean emberAfInformationClusterRequestPreferenceConfirmationCallback(int8u* statusFeedbackList);
/** @brief Information Cluster Request Preference Response
 *
 * 
 *
 * @param statusFeedback   Ver.: always
 * @param preferenceType   Ver.: always
 * @param preferencePayload   Ver.: always
 */
boolean emberAfInformationClusterRequestPreferenceResponseCallback(int8u statusFeedback,
                                                                   int16u preferenceType,
                                                                   int8u* preferencePayload);
/** @brief Information Cluster Send Preference
 *
 * 
 *
 * @param preferenceType   Ver.: always
 * @param preferencePayload   Ver.: always
 */
boolean emberAfInformationClusterSendPreferenceCallback(int16u preferenceType,
                                                        int8u* preferencePayload);
/** @brief Information Cluster Send Preference Response
 *
 * 
 *
 * @param statusFeedbackList   Ver.: always
 */
boolean emberAfInformationClusterSendPreferenceResponseCallback(int8u* statusFeedbackList);
/** @brief Information Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfInformationClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Information Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfInformationClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Information Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfInformationClusterServerInitCallback(int8u endpoint);
/** @brief Information Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfInformationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Information Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfInformationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Information Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfInformationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Information Cluster Server Request Preference
 *
 * 
 *
 */
boolean emberAfInformationClusterServerRequestPreferenceCallback(void);
/** @brief Information Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfInformationClusterServerTickCallback(int8u endpoint);
/** @brief Information Cluster Update
 *
 * 
 *
 * @param accessControl   Ver.: always
 * @param option   Ver.: always
 * @param contents   Ver.: always
 */
boolean emberAfInformationClusterUpdateCallback(int8u accessControl,
                                                int8u option,
                                                int8u* contents);
/** @brief Information Cluster Update Response
 *
 * 
 *
 * @param notificationList   Ver.: always
 */
boolean emberAfInformationClusterUpdateResponseCallback(int8u* notificationList);

/** @} END Information Cluster Callbacks */

/** @name Data Sharing Cluster Callbacks */
// @{

/** @brief Data Sharing Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataSharingClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Data Sharing Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataSharingClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Data Sharing Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataSharingClusterClientInitCallback(int8u endpoint);
/** @brief Data Sharing Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataSharingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Data Sharing Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataSharingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Data Sharing Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataSharingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Data Sharing Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataSharingClusterClientTickCallback(int8u endpoint);
/** @brief Data Sharing Cluster File Transmission
 *
 * 
 *
 * @param transmitOptions   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfDataSharingClusterFileTransmissionCallback(int8u transmitOptions,
                                                          int8u* buffer);
/** @brief Data Sharing Cluster Modify File Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartPosition   Ver.: always
 * @param octetCount   Ver.: always
 */
boolean emberAfDataSharingClusterModifyFileRequestCallback(int16u fileIndex,
                                                           int32u fileStartPosition,
                                                           int32u octetCount);
/** @brief Data Sharing Cluster Modify Record Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartRecord   Ver.: always
 * @param recordCount   Ver.: always
 */
boolean emberAfDataSharingClusterModifyRecordRequestCallback(int16u fileIndex,
                                                             int16u fileStartRecord,
                                                             int16u recordCount);
/** @brief Data Sharing Cluster Read File Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartPositionAndRequestedOctetCount   Ver.: always
 */
boolean emberAfDataSharingClusterReadFileRequestCallback(int16u fileIndex,
                                                         int8u* fileStartPositionAndRequestedOctetCount);
/** @brief Data Sharing Cluster Read Record Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartRecordAndRequestedRecordCount   Ver.: always
 */
boolean emberAfDataSharingClusterReadRecordRequestCallback(int16u fileIndex,
                                                           int8u* fileStartRecordAndRequestedRecordCount);
/** @brief Data Sharing Cluster Record Transmission
 *
 * 
 *
 * @param transmitOptions   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfDataSharingClusterRecordTransmissionCallback(int8u transmitOptions,
                                                            int8u* buffer);
/** @brief Data Sharing Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataSharingClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Data Sharing Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataSharingClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Data Sharing Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataSharingClusterServerInitCallback(int8u endpoint);
/** @brief Data Sharing Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataSharingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Data Sharing Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataSharingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Data Sharing Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataSharingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Data Sharing Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataSharingClusterServerTickCallback(int8u endpoint);
/** @brief Data Sharing Cluster Write File Request
 *
 * 
 *
 * @param writeOptions   Ver.: always
 * @param fileSize   Ver.: always
 */
boolean emberAfDataSharingClusterWriteFileRequestCallback(int8u writeOptions,
                                                          int8u* fileSize);
/** @brief Data Sharing Cluster Write File Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param fileIndex   Ver.: always
 */
boolean emberAfDataSharingClusterWriteFileResponseCallback(int8u status,
                                                           int8u* fileIndex);

/** @} END Data Sharing Cluster Callbacks */

/** @name Gaming Cluster Callbacks */
// @{

/** @brief Gaming Cluster Action Control
 *
 * 
 *
 * @param actions   Ver.: always
 */
boolean emberAfGamingClusterActionControlCallback(int32u actions);
/** @brief Gaming Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGamingClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Gaming Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGamingClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Gaming Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGamingClusterClientInitCallback(int8u endpoint);
/** @brief Gaming Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGamingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Gaming Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGamingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Gaming Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGamingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Gaming Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGamingClusterClientTickCallback(int8u endpoint);
/** @brief Gaming Cluster Download Game
 *
 * 
 *
 */
boolean emberAfGamingClusterDownloadGameCallback(void);
/** @brief Gaming Cluster End Game
 *
 * 
 *
 */
boolean emberAfGamingClusterEndGameCallback(void);
/** @brief Gaming Cluster Game Announcement
 *
 * 
 *
 * @param gameId   Ver.: always
 * @param gameMaster   Ver.: always
 * @param listOfGame   Ver.: always
 */
boolean emberAfGamingClusterGameAnnouncementCallback(int16u gameId,
                                                     int8u gameMaster,
                                                     int8u* listOfGame);
/** @brief Gaming Cluster General Response
 *
 * 
 *
 * @param commandId   Ver.: always
 * @param status   Ver.: always
 * @param message   Ver.: always
 */
boolean emberAfGamingClusterGeneralResponseCallback(int8u commandId,
                                                    int8u status,
                                                    int8u* message);
/** @brief Gaming Cluster Join Game
 *
 * 
 *
 * @param gameId   Ver.: always
 * @param joinAsMaster   Ver.: always
 * @param nameOfGame   Ver.: always
 */
boolean emberAfGamingClusterJoinGameCallback(int16u gameId,
                                             int8u joinAsMaster,
                                             int8u* nameOfGame);
/** @brief Gaming Cluster Pause Game
 *
 * 
 *
 */
boolean emberAfGamingClusterPauseGameCallback(void);
/** @brief Gaming Cluster Quit Game
 *
 * 
 *
 */
boolean emberAfGamingClusterQuitGameCallback(void);
/** @brief Gaming Cluster Resume Game
 *
 * 
 *
 */
boolean emberAfGamingClusterResumeGameCallback(void);
/** @brief Gaming Cluster Search Game
 *
 * 
 *
 * @param specificGame   Ver.: always
 * @param gameId   Ver.: always
 */
boolean emberAfGamingClusterSearchGameCallback(int8u specificGame,
                                               int16u gameId);
/** @brief Gaming Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGamingClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Gaming Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGamingClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Gaming Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGamingClusterServerInitCallback(int8u endpoint);
/** @brief Gaming Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGamingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Gaming Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGamingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame *apsFrame,
                                                   int16u msgLen,
                                                   int8u *message,
                                                   EmberStatus status);
/** @brief Gaming Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGamingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u *value);
/** @brief Gaming Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGamingClusterServerTickCallback(int8u endpoint);
/** @brief Gaming Cluster Start Game
 *
 * 
 *
 */
boolean emberAfGamingClusterStartGameCallback(void);
/** @brief Gaming Cluster Start Over
 *
 * 
 *
 */
boolean emberAfGamingClusterStartOverCallback(void);

/** @} END Gaming Cluster Callbacks */

/** @name Data Rate Control Cluster Callbacks */
// @{

/** @brief Data Rate Control Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataRateControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Data Rate Control Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataRateControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Data Rate Control Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataRateControlClusterClientInitCallback(int8u endpoint);
/** @brief Data Rate Control Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataRateControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Data Rate Control Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataRateControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Data Rate Control Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataRateControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Data Rate Control Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataRateControlClusterClientTickCallback(int8u endpoint);
/** @brief Data Rate Control Cluster Data Rate Control
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 * @param dataRate   Ver.: always
 */
boolean emberAfDataRateControlClusterDataRateControlCallback(int16u originatorAddress,
                                                             int16u destinationAddress,
                                                             int8u dataRate);
/** @brief Data Rate Control Cluster Data Rate Notification
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 * @param dataRate   Ver.: always
 */
boolean emberAfDataRateControlClusterDataRateNotificationCallback(int16u originatorAddress,
                                                                  int16u destinationAddress,
                                                                  int8u dataRate);
/** @brief Data Rate Control Cluster Path Creation
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 * @param dataRate   Ver.: always
 */
boolean emberAfDataRateControlClusterPathCreationCallback(int16u originatorAddress,
                                                          int16u destinationAddress,
                                                          int8u dataRate);
/** @brief Data Rate Control Cluster Path Deletion
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 */
boolean emberAfDataRateControlClusterPathDeletionCallback(int16u originatorAddress,
                                                          int16u destinationAddress);
/** @brief Data Rate Control Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataRateControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Data Rate Control Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataRateControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Data Rate Control Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataRateControlClusterServerInitCallback(int8u endpoint);
/** @brief Data Rate Control Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataRateControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Data Rate Control Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataRateControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Data Rate Control Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataRateControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Data Rate Control Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataRateControlClusterServerTickCallback(int8u endpoint);

/** @} END Data Rate Control Cluster Callbacks */

/** @name Voice over ZigBee Cluster Callbacks */
// @{

/** @brief Voice over ZigBee Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Voice over ZigBee Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Voice over ZigBee Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientInitCallback(int8u endpoint);
/** @brief Voice over ZigBee Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Voice over ZigBee Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Voice over ZigBee Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfVoiceOverZigbeeClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Voice over ZigBee Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientTickCallback(int8u endpoint);
/** @brief Voice over ZigBee Cluster Control
 *
 * 
 *
 * @param controlType   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterControlCallback(int8u controlType);
/** @brief Voice over ZigBee Cluster Control Response
 *
 * 
 *
 * @param ackNack   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterControlResponseCallback(int8u ackNack);
/** @brief Voice over ZigBee Cluster Establishment Request
 *
 * 
 *
 * @param flag   Ver.: always
 * @param codecType   Ver.: always
 * @param sampFreq   Ver.: always
 * @param codecRate   Ver.: always
 * @param serviceType   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterEstablishmentRequestCallback(int8u flag,
                                                                  int8u codecType,
                                                                  int8u sampFreq,
                                                                  int8u codecRate,
                                                                  int8u serviceType,
                                                                  int8u* buffer);
/** @brief Voice over ZigBee Cluster Establishment Response
 *
 * 
 *
 * @param ackNack   Ver.: always
 * @param codecType   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterEstablishmentResponseCallback(int8u ackNack,
                                                                   int8u codecType);
/** @brief Voice over ZigBee Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Voice over ZigBee Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Voice over ZigBee Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerInitCallback(int8u endpoint);
/** @brief Voice over ZigBee Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Voice over ZigBee Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame *apsFrame,
                                                            int16u msgLen,
                                                            int8u *message,
                                                            EmberStatus status);
/** @brief Voice over ZigBee Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfVoiceOverZigbeeClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u *value);
/** @brief Voice over ZigBee Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerTickCallback(int8u endpoint);
/** @brief Voice over ZigBee Cluster Voice Transmission
 *
 * 
 *
 * @param voiceData   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterVoiceTransmissionCallback(int8u* voiceData);
/** @brief Voice over ZigBee Cluster Voice Transmission Completion
 *
 * 
 *
 */
boolean emberAfVoiceOverZigbeeClusterVoiceTransmissionCompletionCallback(void);
/** @brief Voice over ZigBee Cluster Voice Transmission Response
 *
 * 
 *
 * @param sequenceNumber   Ver.: always
 * @param errorFlag   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterVoiceTransmissionResponseCallback(int8u sequenceNumber,
                                                                       int8u errorFlag);

/** @} END Voice over ZigBee Cluster Callbacks */

/** @name Chatting Cluster Callbacks */
// @{

/** @brief Chatting Cluster Chat Message
 *
 * 
 *
 * @param destinationUid   Ver.: always
 * @param sourceUid   Ver.: always
 * @param cid   Ver.: always
 * @param nickname   Ver.: always
 * @param message   Ver.: always
 */
boolean emberAfChattingClusterChatMessageCallback(int16u destinationUid,
                                                  int16u sourceUid,
                                                  int16u cid,
                                                  int8u* nickname,
                                                  int8u* message);
/** @brief Chatting Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfChattingClusterClientAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Chatting Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfChattingClusterClientDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Chatting Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfChattingClusterClientInitCallback(int8u endpoint);
/** @brief Chatting Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfChattingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Chatting Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfChattingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Chatting Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfChattingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Chatting Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfChattingClusterClientTickCallback(int8u endpoint);
/** @brief Chatting Cluster Get Node Information Request
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 */
boolean emberAfChattingClusterGetNodeInformationRequestCallback(int16u cid,
                                                                int16u uid);
/** @brief Chatting Cluster Get Node Information Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param addressEndpointAndNickname   Ver.: always
 */
boolean emberAfChattingClusterGetNodeInformationResponseCallback(int8u status,
                                                                 int16u cid,
                                                                 int16u uid,
                                                                 int8u* addressEndpointAndNickname);
/** @brief Chatting Cluster Join Chat Request
 *
 * 
 *
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 * @param cid   Ver.: always
 */
boolean emberAfChattingClusterJoinChatRequestCallback(int16u uid,
                                                      int8u* nickname,
                                                      int16u cid);
/** @brief Chatting Cluster Join Chat Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param cid   Ver.: always
 * @param chatParticipantList   Ver.: always
 */
boolean emberAfChattingClusterJoinChatResponseCallback(int8u status,
                                                       int16u cid,
                                                       int8u* chatParticipantList);
/** @brief Chatting Cluster Leave Chat Request
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 */
boolean emberAfChattingClusterLeaveChatRequestCallback(int16u cid,
                                                       int16u uid);
/** @brief Chatting Cluster Search Chat Request
 *
 * 
 *
 */
boolean emberAfChattingClusterSearchChatRequestCallback(void);
/** @brief Chatting Cluster Search Chat Response
 *
 * 
 *
 * @param options   Ver.: always
 * @param chatRoomList   Ver.: always
 */
boolean emberAfChattingClusterSearchChatResponseCallback(int8u options,
                                                         int8u* chatRoomList);
/** @brief Chatting Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfChattingClusterServerAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Chatting Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfChattingClusterServerDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Chatting Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfChattingClusterServerInitCallback(int8u endpoint);
/** @brief Chatting Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfChattingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Chatting Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfChattingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame *apsFrame,
                                                     int16u msgLen,
                                                     int8u *message,
                                                     EmberStatus status);
/** @brief Chatting Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfChattingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u *value);
/** @brief Chatting Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfChattingClusterServerTickCallback(int8u endpoint);
/** @brief Chatting Cluster Start Chat Request
 *
 * 
 *
 * @param name   Ver.: always
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 */
boolean emberAfChattingClusterStartChatRequestCallback(int8u* name,
                                                       int16u uid,
                                                       int8u* nickname);
/** @brief Chatting Cluster Start Chat Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param cid   Ver.: always
 */
boolean emberAfChattingClusterStartChatResponseCallback(int8u status,
                                                        int16u cid);
/** @brief Chatting Cluster Switch Chairman Confirm
 *
 * 
 *
 * @param cid   Ver.: always
 * @param nodeInformationList   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanConfirmCallback(int16u cid,
                                                            int8u* nodeInformationList);
/** @brief Chatting Cluster Switch Chairman Notification
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param address   Ver.: always
 * @param endpoint   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanNotificationCallback(int16u cid,
                                                                 int16u uid,
                                                                 int16u address,
                                                                 int8u endpoint);
/** @brief Chatting Cluster Switch Chairman Request
 *
 * 
 *
 * @param cid   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanRequestCallback(int16u cid);
/** @brief Chatting Cluster Switch Chairman Response
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanResponseCallback(int16u cid,
                                                             int16u uid);
/** @brief Chatting Cluster User Joined
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 */
boolean emberAfChattingClusterUserJoinedCallback(int16u cid,
                                                 int16u uid,
                                                 int8u* nickname);
/** @brief Chatting Cluster User Left
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 */
boolean emberAfChattingClusterUserLeftCallback(int16u cid,
                                               int16u uid,
                                               int8u* nickname);

/** @} END Chatting Cluster Callbacks */

/** @name Payment Cluster Callbacks */
// @{

/** @brief Payment Cluster Accept Payment
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 * @param serviceId   Ver.: always
 * @param goodId   Ver.: always
 */
boolean emberAfPaymentClusterAcceptPaymentCallback(int8u* userId,
                                                   int16u userType,
                                                   int16u serviceId,
                                                   int8u* goodId);
/** @brief Payment Cluster Buy Confirm
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 * @param price   Ver.: always
 * @param timestamp   Ver.: always
 * @param transId   Ver.: always
 * @param transStatus   Ver.: always
 */
boolean emberAfPaymentClusterBuyConfirmCallback(int8u* serialNumber,
                                                int32u currency,
                                                int8u priceTrailingDigit,
                                                int32u price,
                                                int8u* timestamp,
                                                int16u transId,
                                                int8u transStatus);
/** @brief Payment Cluster Buy Request
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 * @param serviceId   Ver.: always
 * @param goodId   Ver.: always
 */
boolean emberAfPaymentClusterBuyRequestCallback(int8u* userId,
                                                int16u userType,
                                                int16u serviceId,
                                                int8u* goodId);
/** @brief Payment Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPaymentClusterClientAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Payment Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPaymentClusterClientDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Payment Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPaymentClusterClientInitCallback(int8u endpoint);
/** @brief Payment Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPaymentClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Payment Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPaymentClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame *apsFrame,
                                                    int16u msgLen,
                                                    int8u *message,
                                                    EmberStatus status);
/** @brief Payment Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPaymentClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u *value);
/** @brief Payment Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPaymentClusterClientTickCallback(int8u endpoint);
/** @brief Payment Cluster Payment Confirm
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param transId   Ver.: always
 * @param transStatus   Ver.: always
 */
boolean emberAfPaymentClusterPaymentConfirmCallback(int8u* serialNumber,
                                                    int16u transId,
                                                    int8u transStatus);
/** @brief Payment Cluster Receipt Delivery
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 * @param price   Ver.: always
 * @param timestamp   Ver.: always
 */
boolean emberAfPaymentClusterReceiptDeliveryCallback(int8u* serialNumber,
                                                     int32u currency,
                                                     int8u priceTrailingDigit,
                                                     int32u price,
                                                     int8u* timestamp);
/** @brief Payment Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPaymentClusterServerAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Payment Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPaymentClusterServerDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Payment Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPaymentClusterServerInitCallback(int8u endpoint);
/** @brief Payment Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPaymentClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Payment Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPaymentClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame *apsFrame,
                                                    int16u msgLen,
                                                    int8u *message,
                                                    EmberStatus status);
/** @brief Payment Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPaymentClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u *value);
/** @brief Payment Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPaymentClusterServerTickCallback(int8u endpoint);
/** @brief Payment Cluster Transaction End
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfPaymentClusterTransactionEndCallback(int8u* serialNumber,
                                                    int8u status);

/** @} END Payment Cluster Callbacks */

/** @name Billing Cluster Callbacks */
// @{

/** @brief Billing Cluster Bill Status Notification
 *
 * 
 *
 * @param userId   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfBillingClusterBillStatusNotificationCallback(int8u* userId,
                                                            int8u status);
/** @brief Billing Cluster Check Bill Status
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterCheckBillStatusCallback(int8u* userId,
                                                     int16u serviceId,
                                                     int16u serviceProviderId);
/** @brief Billing Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBillingClusterClientAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Billing Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBillingClusterClientDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Billing Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBillingClusterClientInitCallback(int8u endpoint);
/** @brief Billing Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBillingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Billing Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBillingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame *apsFrame,
                                                    int16u msgLen,
                                                    int8u *message,
                                                    EmberStatus status);
/** @brief Billing Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBillingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u *value);
/** @brief Billing Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBillingClusterClientTickCallback(int8u endpoint);
/** @brief Billing Cluster Send Bill Record
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 * @param timestamp   Ver.: always
 * @param duration   Ver.: always
 */
boolean emberAfBillingClusterSendBillRecordCallback(int8u* userId,
                                                    int16u serviceId,
                                                    int16u serviceProviderId,
                                                    int8u* timestamp,
                                                    int16u duration);
/** @brief Billing Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBillingClusterServerAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Billing Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBillingClusterServerDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Billing Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBillingClusterServerInitCallback(int8u endpoint);
/** @brief Billing Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBillingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Billing Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBillingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame *apsFrame,
                                                    int16u msgLen,
                                                    int8u *message,
                                                    EmberStatus status);
/** @brief Billing Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBillingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u *value);
/** @brief Billing Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBillingClusterServerTickCallback(int8u endpoint);
/** @brief Billing Cluster Session Keep Alive
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterSessionKeepAliveCallback(int8u* userId,
                                                      int16u serviceId,
                                                      int16u serviceProviderId);
/** @brief Billing Cluster Start Billing Session
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterStartBillingSessionCallback(int8u* userId,
                                                         int16u serviceId,
                                                         int16u serviceProviderId);
/** @brief Billing Cluster Stop Billing Session
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterStopBillingSessionCallback(int8u* userId,
                                                        int16u serviceId,
                                                        int16u serviceProviderId);
/** @brief Billing Cluster Subscribe
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterSubscribeCallback(int8u* userId,
                                               int16u serviceId,
                                               int16u serviceProviderId);
/** @brief Billing Cluster Unsubscribe
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterUnsubscribeCallback(int8u* userId,
                                                 int16u serviceId,
                                                 int16u serviceProviderId);

/** @} END Billing Cluster Callbacks */

/** @name Appliance Identification Cluster Callbacks */
// @{

/** @brief Appliance Identification Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Appliance Identification Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Appliance Identification Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientInitCallback(int8u endpoint);
/** @brief Appliance Identification Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceIdentificationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Appliance Identification Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame *apsFrame,
                                                                    int16u msgLen,
                                                                    int8u *message,
                                                                    EmberStatus status);
/** @brief Appliance Identification Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceIdentificationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u *value);
/** @brief Appliance Identification Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientTickCallback(int8u endpoint);
/** @brief Appliance Identification Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Appliance Identification Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Appliance Identification Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerInitCallback(int8u endpoint);
/** @brief Appliance Identification Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceIdentificationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Appliance Identification Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame *apsFrame,
                                                                    int16u msgLen,
                                                                    int8u *message,
                                                                    EmberStatus status);
/** @brief Appliance Identification Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceIdentificationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u *value);
/** @brief Appliance Identification Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerTickCallback(int8u endpoint);

/** @} END Appliance Identification Cluster Callbacks */

/** @name Meter Identification Cluster Callbacks */
// @{

/** @brief Meter Identification Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMeterIdentificationClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Meter Identification Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMeterIdentificationClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Meter Identification Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMeterIdentificationClusterClientInitCallback(int8u endpoint);
/** @brief Meter Identification Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMeterIdentificationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Meter Identification Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMeterIdentificationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief Meter Identification Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMeterIdentificationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief Meter Identification Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMeterIdentificationClusterClientTickCallback(int8u endpoint);
/** @brief Meter Identification Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMeterIdentificationClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Meter Identification Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMeterIdentificationClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Meter Identification Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMeterIdentificationClusterServerInitCallback(int8u endpoint);
/** @brief Meter Identification Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMeterIdentificationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Meter Identification Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMeterIdentificationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief Meter Identification Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMeterIdentificationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief Meter Identification Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMeterIdentificationClusterServerTickCallback(int8u endpoint);

/** @} END Meter Identification Cluster Callbacks */

/** @name Appliance Events and Alert Cluster Callbacks */
// @{

/** @brief Appliance Events and Alert Cluster Alerts Notification
 *
 * 
 *
 * @param alertsCount   Ver.: always
 * @param alertStructures   Ver.: always
 */
boolean emberAfApplianceEventsAndAlertClusterAlertsNotificationCallback(int8u alertsCount,
                                                                        int8u* alertStructures);
/** @brief Appliance Events and Alert Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Appliance Events and Alert Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Appliance Events and Alert Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientInitCallback(int8u endpoint);
/** @brief Appliance Events and Alert Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Appliance Events and Alert Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame *apsFrame,
                                                                    int16u msgLen,
                                                                    int8u *message,
                                                                    EmberStatus status);
/** @brief Appliance Events and Alert Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceEventsAndAlertClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u *value);
/** @brief Appliance Events and Alert Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientTickCallback(int8u endpoint);
/** @brief Appliance Events and Alert Cluster Events Notification
 *
 * 
 *
 * @param eventHeader   Ver.: always
 * @param eventId   Ver.: always
 */
boolean emberAfApplianceEventsAndAlertClusterEventsNotificationCallback(int8u eventHeader,
                                                                        int8u eventId);
/** @brief Appliance Events and Alert Cluster Get Alerts
 *
 * 
 *
 */
boolean emberAfApplianceEventsAndAlertClusterGetAlertsCallback(void);
/** @brief Appliance Events and Alert Cluster Get Alerts Response
 *
 * 
 *
 * @param alertsCount   Ver.: always
 * @param alertStructures   Ver.: always
 */
boolean emberAfApplianceEventsAndAlertClusterGetAlertsResponseCallback(int8u alertsCount,
                                                                       int8u* alertStructures);
/** @brief Appliance Events and Alert Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Appliance Events and Alert Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Appliance Events and Alert Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerInitCallback(int8u endpoint);
/** @brief Appliance Events and Alert Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Appliance Events and Alert Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame *apsFrame,
                                                                    int16u msgLen,
                                                                    int8u *message,
                                                                    EmberStatus status);
/** @brief Appliance Events and Alert Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceEventsAndAlertClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u *value);
/** @brief Appliance Events and Alert Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerTickCallback(int8u endpoint);

/** @} END Appliance Events and Alert Cluster Callbacks */

/** @name Appliance Statistics Cluster Callbacks */
// @{

/** @brief Appliance Statistics Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Appliance Statistics Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Appliance Statistics Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientInitCallback(int8u endpoint);
/** @brief Appliance Statistics Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceStatisticsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Appliance Statistics Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief Appliance Statistics Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceStatisticsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief Appliance Statistics Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientTickCallback(int8u endpoint);
/** @brief Appliance Statistics Cluster Log Notification
 *
 * 
 *
 * @param timeStamp   Ver.: always
 * @param logId   Ver.: always
 * @param logLength   Ver.: always
 * @param logPayload   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogNotificationCallback(int32u timeStamp,
                                                                 int32u logId,
                                                                 int32u logLength,
                                                                 int8u* logPayload);
/** @brief Appliance Statistics Cluster Log Queue Request
 *
 * 
 *
 */
boolean emberAfApplianceStatisticsClusterLogQueueRequestCallback(void);
/** @brief Appliance Statistics Cluster Log Queue Response
 *
 * 
 *
 * @param logQueueSize   Ver.: always
 * @param logIds   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogQueueResponseCallback(int8u logQueueSize,
                                                                  int8u* logIds);
/** @brief Appliance Statistics Cluster Log Request
 *
 * 
 *
 * @param logId   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogRequestCallback(int32u logId);
/** @brief Appliance Statistics Cluster Log Response
 *
 * 
 *
 * @param timeStamp   Ver.: always
 * @param logId   Ver.: always
 * @param logLength   Ver.: always
 * @param logPayload   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogResponseCallback(int32u timeStamp,
                                                             int32u logId,
                                                             int32u logLength,
                                                             int8u* logPayload);
/** @brief Appliance Statistics Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Appliance Statistics Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Appliance Statistics Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerInitCallback(int8u endpoint);
/** @brief Appliance Statistics Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceStatisticsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Appliance Statistics Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame *apsFrame,
                                                                int16u msgLen,
                                                                int8u *message,
                                                                EmberStatus status);
/** @brief Appliance Statistics Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceStatisticsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u *value);
/** @brief Appliance Statistics Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerTickCallback(int8u endpoint);
/** @brief Appliance Statistics Cluster Statistics Available
 *
 * 
 *
 * @param logQueueSize   Ver.: always
 * @param logIds   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterStatisticsAvailableCallback(int8u logQueueSize,
                                                                     int8u* logIds);

/** @} END Appliance Statistics Cluster Callbacks */

/** @name Electrical Measurement Cluster Callbacks */
// @{

/** @brief Electrical Measurement Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief Electrical Measurement Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief Electrical Measurement Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Electrical Measurement Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfElectricalMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief Electrical Measurement Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame *apsFrame,
                                                                  int16u msgLen,
                                                                  int8u *message,
                                                                  EmberStatus status);
/** @brief Electrical Measurement Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfElectricalMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u *value);
/** @brief Electrical Measurement Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Electrical Measurement Cluster Get Measurement Profile Command
 *
 * 
 *
 * @param attributeId   Ver.: always
 * @param startTime   Ver.: always
 * @param numberOfIntervals   Ver.: always
 */
boolean emberAfElectricalMeasurementClusterGetMeasurementProfileCommandCallback(int16u attributeId,
                                                                                int32u startTime,
                                                                                int8u numberOfIntervals);
/** @brief Electrical Measurement Cluster Get Measurement Profile Response Command
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param status   Ver.: always
 * @param profileIntervalPeriod   Ver.: always
 * @param numberOfIntervalsDelivered   Ver.: always
 * @param attributeId   Ver.: always
 * @param intervals   Ver.: always
 */
boolean emberAfElectricalMeasurementClusterGetMeasurementProfileResponseCommandCallback(int32u startTime,
                                                                                        int8u status,
                                                                                        int8u profileIntervalPeriod,
                                                                                        int8u numberOfIntervalsDelivered,
                                                                                        int16u attributeId,
                                                                                        int8u* intervals);
/** @brief Electrical Measurement Cluster Get Profile Info Command
 *
 * 
 *
 */
boolean emberAfElectricalMeasurementClusterGetProfileInfoCommandCallback(void);
/** @brief Electrical Measurement Cluster Get Profile Info Response Command
 *
 * 
 *
 * @param profileCount   Ver.: always
 * @param profileIntervalPeriod   Ver.: always
 * @param maxNumberOfIntervals   Ver.: always
 * @param listOfAttributes   Ver.: always
 */
boolean emberAfElectricalMeasurementClusterGetProfileInfoResponseCommandCallback(int8u profileCount,
                                                                                 int8u profileIntervalPeriod,
                                                                                 int8u maxNumberOfIntervals,
                                                                                 int8u* listOfAttributes);
/** @brief Electrical Measurement Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief Electrical Measurement Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief Electrical Measurement Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Electrical Measurement Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfElectricalMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief Electrical Measurement Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame *apsFrame,
                                                                  int16u msgLen,
                                                                  int8u *message,
                                                                  EmberStatus status);
/** @brief Electrical Measurement Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfElectricalMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u *value);
/** @brief Electrical Measurement Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Electrical Measurement Cluster Callbacks */

/** @name Diagnostics Cluster Callbacks */
// @{

/** @brief Diagnostics Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDiagnosticsClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Diagnostics Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDiagnosticsClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Diagnostics Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDiagnosticsClusterClientInitCallback(int8u endpoint);
/** @brief Diagnostics Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDiagnosticsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Diagnostics Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDiagnosticsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Diagnostics Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDiagnosticsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Diagnostics Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDiagnosticsClusterClientTickCallback(int8u endpoint);
/** @brief Diagnostics Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDiagnosticsClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Diagnostics Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDiagnosticsClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Diagnostics Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDiagnosticsClusterServerInitCallback(int8u endpoint);
/** @brief Diagnostics Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDiagnosticsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Diagnostics Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDiagnosticsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame *apsFrame,
                                                        int16u msgLen,
                                                        int8u *message,
                                                        EmberStatus status);
/** @brief Diagnostics Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDiagnosticsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u *value);
/** @brief Diagnostics Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDiagnosticsClusterServerTickCallback(int8u endpoint);

/** @} END Diagnostics Cluster Callbacks */

/** @name ZLL Commissioning Cluster Callbacks */
// @{

/** @brief ZLL Commissioning Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfZllCommissioningClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief ZLL Commissioning Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfZllCommissioningClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief ZLL Commissioning Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfZllCommissioningClusterClientInitCallback(int8u endpoint);
/** @brief ZLL Commissioning Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfZllCommissioningClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief ZLL Commissioning Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfZllCommissioningClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief ZLL Commissioning Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfZllCommissioningClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief ZLL Commissioning Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfZllCommissioningClusterClientTickCallback(int8u endpoint);
/** @brief ZLL Commissioning Cluster Device Information Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param startIndex   Ver.: always
 */
boolean emberAfZllCommissioningClusterDeviceInformationRequestCallback(int32u transaction,
                                                                       int8u startIndex);
/** @brief ZLL Commissioning Cluster Device Information Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param numberOfSubDevices   Ver.: always
 * @param startIndex   Ver.: always
 * @param deviceInformationRecordCount   Ver.: always
 * @param deviceInformationRecordList   Ver.: always
 */
boolean emberAfZllCommissioningClusterDeviceInformationResponseCallback(int32u transaction,
                                                                        int8u numberOfSubDevices,
                                                                        int8u startIndex,
                                                                        int8u deviceInformationRecordCount,
                                                                        int8u* deviceInformationRecordList);
/** @brief ZLL Commissioning Cluster Endpoint Information
 *
 * 
 *
 * @param ieeeAddress   Ver.: always
 * @param networkAddress   Ver.: always
 * @param endpointId   Ver.: always
 * @param profileId   Ver.: always
 * @param deviceId   Ver.: always
 * @param version   Ver.: always
 */
boolean emberAfZllCommissioningClusterEndpointInformationCallback(int8u* ieeeAddress,
                                                                  int16u networkAddress,
                                                                  int8u endpointId,
                                                                  int16u profileId,
                                                                  int16u deviceId,
                                                                  int8u version);
/** @brief ZLL Commissioning Cluster Get Endpoint List Request
 *
 * 
 *
 * @param startIndex   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetEndpointListRequestCallback(int8u startIndex);
/** @brief ZLL Commissioning Cluster Get Endpoint List Response
 *
 * 
 *
 * @param total   Ver.: always
 * @param startIndex   Ver.: always
 * @param count   Ver.: always
 * @param endpointInformationRecordList   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetEndpointListResponseCallback(int8u total,
                                                                      int8u startIndex,
                                                                      int8u count,
                                                                      int8u* endpointInformationRecordList);
/** @brief ZLL Commissioning Cluster Get Group Identifiers Request
 *
 * 
 *
 * @param startIndex   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetGroupIdentifiersRequestCallback(int8u startIndex);
/** @brief ZLL Commissioning Cluster Get Group Identifiers Response
 *
 * 
 *
 * @param total   Ver.: always
 * @param startIndex   Ver.: always
 * @param count   Ver.: always
 * @param groupInformationRecordList   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetGroupIdentifiersResponseCallback(int8u total,
                                                                          int8u startIndex,
                                                                          int8u count,
                                                                          int8u* groupInformationRecordList);
/** @brief ZLL Commissioning Cluster Identify Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param identifyDuration   Ver.: always
 */
boolean emberAfZllCommissioningClusterIdentifyRequestCallback(int32u transaction,
                                                              int16u identifyDuration);
/** @brief ZLL Commissioning Cluster Network Join End Device Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param keyIndex   Ver.: always
 * @param encryptedNetworkKey   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param groupIdentifiersBegin   Ver.: always
 * @param groupIdentifiersEnd   Ver.: always
 * @param freeNetworkAddressRangeBegin   Ver.: always
 * @param freeNetworkAddressRangeEnd   Ver.: always
 * @param freeGroupIdentifierRangeBegin   Ver.: always
 * @param freeGroupIdentifierRangeEnd   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinEndDeviceRequestCallback(int32u transaction,
                                                                          int8u* extendedPanId,
                                                                          int8u keyIndex,
                                                                          int8u* encryptedNetworkKey,
                                                                          int8u networkUpdateId,
                                                                          int8u logicalChannel,
                                                                          int16u panId,
                                                                          int16u networkAddress,
                                                                          int16u groupIdentifiersBegin,
                                                                          int16u groupIdentifiersEnd,
                                                                          int16u freeNetworkAddressRangeBegin,
                                                                          int16u freeNetworkAddressRangeEnd,
                                                                          int16u freeGroupIdentifierRangeBegin,
                                                                          int16u freeGroupIdentifierRangeEnd);
/** @brief ZLL Commissioning Cluster Network Join End Device Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinEndDeviceResponseCallback(int32u transaction,
                                                                           int8u status);
/** @brief ZLL Commissioning Cluster Network Join Router Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param keyIndex   Ver.: always
 * @param encryptedNetworkKey   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param groupIdentifiersBegin   Ver.: always
 * @param groupIdentifiersEnd   Ver.: always
 * @param freeNetworkAddressRangeBegin   Ver.: always
 * @param freeNetworkAddressRangeEnd   Ver.: always
 * @param freeGroupIdentifierRangeBegin   Ver.: always
 * @param freeGroupIdentifierRangeEnd   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinRouterRequestCallback(int32u transaction,
                                                                       int8u* extendedPanId,
                                                                       int8u keyIndex,
                                                                       int8u* encryptedNetworkKey,
                                                                       int8u networkUpdateId,
                                                                       int8u logicalChannel,
                                                                       int16u panId,
                                                                       int16u networkAddress,
                                                                       int16u groupIdentifiersBegin,
                                                                       int16u groupIdentifiersEnd,
                                                                       int16u freeNetworkAddressRangeBegin,
                                                                       int16u freeNetworkAddressRangeEnd,
                                                                       int16u freeGroupIdentifierRangeBegin,
                                                                       int16u freeGroupIdentifierRangeEnd);
/** @brief ZLL Commissioning Cluster Network Join Router Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinRouterResponseCallback(int32u transaction,
                                                                        int8u status);
/** @brief ZLL Commissioning Cluster Network Start Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param keyIndex   Ver.: always
 * @param encryptedNetworkKey   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param groupIdentifiersBegin   Ver.: always
 * @param groupIdentifiersEnd   Ver.: always
 * @param freeNetworkAddressRangeBegin   Ver.: always
 * @param freeNetworkAddressRangeEnd   Ver.: always
 * @param freeGroupIdentifierRangeBegin   Ver.: always
 * @param freeGroupIdentifierRangeEnd   Ver.: always
 * @param initiatorIeeeAddress   Ver.: always
 * @param initiatorNetworkAddress   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkStartRequestCallback(int32u transaction,
                                                                  int8u* extendedPanId,
                                                                  int8u keyIndex,
                                                                  int8u* encryptedNetworkKey,
                                                                  int8u logicalChannel,
                                                                  int16u panId,
                                                                  int16u networkAddress,
                                                                  int16u groupIdentifiersBegin,
                                                                  int16u groupIdentifiersEnd,
                                                                  int16u freeNetworkAddressRangeBegin,
                                                                  int16u freeNetworkAddressRangeEnd,
                                                                  int16u freeGroupIdentifierRangeBegin,
                                                                  int16u freeGroupIdentifierRangeEnd,
                                                                  int8u* initiatorIeeeAddress,
                                                                  int16u initiatorNetworkAddress);
/** @brief ZLL Commissioning Cluster Network Start Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param status   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkStartResponseCallback(int32u transaction,
                                                                   int8u status,
                                                                   int8u* extendedPanId,
                                                                   int8u networkUpdateId,
                                                                   int8u logicalChannel,
                                                                   int16u panId);
/** @brief ZLL Commissioning Cluster Network Update Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkUpdateRequestCallback(int32u transaction,
                                                                   int8u* extendedPanId,
                                                                   int8u networkUpdateId,
                                                                   int8u logicalChannel,
                                                                   int16u panId,
                                                                   int16u networkAddress);
/** @brief ZLL Commissioning Cluster Reset To Factory New Request
 *
 * 
 *
 * @param transaction   Ver.: always
 */
boolean emberAfZllCommissioningClusterResetToFactoryNewRequestCallback(int32u transaction);
/** @brief ZLL Commissioning Cluster Scan Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param zigbeeInformation   Ver.: always
 * @param zllInformation   Ver.: always
 */
boolean emberAfZllCommissioningClusterScanRequestCallback(int32u transaction,
                                                          int8u zigbeeInformation,
                                                          int8u zllInformation);
/** @brief ZLL Commissioning Cluster Scan Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param rssiCorrection   Ver.: always
 * @param zigbeeInformation   Ver.: always
 * @param zllInformation   Ver.: always
 * @param keyBitmask   Ver.: always
 * @param responseId   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param numberOfSubDevices   Ver.: always
 * @param totalGroupIds   Ver.: always
 * @param endpointId   Ver.: always
 * @param profileId   Ver.: always
 * @param deviceId   Ver.: always
 * @param version   Ver.: always
 * @param groupIdCount   Ver.: always
 */
boolean emberAfZllCommissioningClusterScanResponseCallback(int32u transaction,
                                                           int8u rssiCorrection,
                                                           int8u zigbeeInformation,
                                                           int8u zllInformation,
                                                           int16u keyBitmask,
                                                           int32u responseId,
                                                           int8u* extendedPanId,
                                                           int8u networkUpdateId,
                                                           int8u logicalChannel,
                                                           int16u panId,
                                                           int16u networkAddress,
                                                           int8u numberOfSubDevices,
                                                           int8u totalGroupIds,
                                                           int8u endpointId,
                                                           int16u profileId,
                                                           int16u deviceId,
                                                           int8u version,
                                                           int8u groupIdCount);
/** @brief ZLL Commissioning Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfZllCommissioningClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief ZLL Commissioning Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfZllCommissioningClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief ZLL Commissioning Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfZllCommissioningClusterServerInitCallback(int8u endpoint);
/** @brief ZLL Commissioning Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfZllCommissioningClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief ZLL Commissioning Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfZllCommissioningClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame *apsFrame,
                                                             int16u msgLen,
                                                             int8u *message,
                                                             EmberStatus status);
/** @brief ZLL Commissioning Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfZllCommissioningClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u *value);
/** @brief ZLL Commissioning Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfZllCommissioningClusterServerTickCallback(int8u endpoint);

/** @} END ZLL Commissioning Cluster Callbacks */

/** @name Sample Mfg Specific Cluster Cluster Callbacks */
// @{

/** @brief Sample Mfg Specific Cluster Cluster Client Attribute Changed
 *
 * Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Sample Mfg Specific Cluster Cluster Client Default Response
 *
 * This function is called when the client receives the default response from
 * the server.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Sample Mfg Specific Cluster Cluster Client Init
 *
 * Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientInitCallback(int8u endpoint);
/** @brief Sample Mfg Specific Cluster Cluster Client Manufacturer Specific Attribute Changed
 *
 * Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Sample Mfg Specific Cluster Cluster Client Message Sent
 *
 * Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief Sample Mfg Specific Cluster Cluster Client Pre Attribute Changed
 *
 * Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSampleMfgSpecificClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief Sample Mfg Specific Cluster Cluster Client Tick
 *
 * Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientTickCallback(int8u endpoint);
/** @brief Sample Mfg Specific Cluster Cluster Command One
 *
 * 
 *
 * @param argOne   Ver.: always
 */
boolean emberAfSampleMfgSpecificClusterCommandOneCallback(int8u argOne);
/** @brief Sample Mfg Specific Cluster Cluster Server Attribute Changed
 *
 * Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Sample Mfg Specific Cluster Cluster Server Default Response
 *
 * This function is called when the server receives the default response from
 * the client.
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Sample Mfg Specific Cluster Cluster Server Init
 *
 * Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerInitCallback(int8u endpoint);
/** @brief Sample Mfg Specific Cluster Cluster Server Manufacturer Specific Attribute Changed
 *
 * Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Sample Mfg Specific Cluster Cluster Server Message Sent
 *
 * Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame *apsFrame,
                                                              int16u msgLen,
                                                              int8u *message,
                                                              EmberStatus status);
/** @brief Sample Mfg Specific Cluster Cluster Server Pre Attribute Changed
 *
 * Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSampleMfgSpecificClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u *value);
/** @brief Sample Mfg Specific Cluster Cluster Server Tick
 *
 * Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerTickCallback(int8u endpoint);

/** @} END Sample Mfg Specific Cluster Cluster Callbacks */


/** @name Basic Server Cluster Plugin Callbacks */
// @{

/** @brief Reset To Factory Defaults
 *
 * This function is called by the Basic server plugin when a request to reset
 * to factory defaults is received. The plugin will reset attributes managed by
 * the framework to their default values. The application should preform any
 * other necessary reset-related operations in this callback, including
 * resetting any externally-stored attributes.
 *
 * @param endpoint   Ver.: always
 */
void emberAfPluginBasicResetToFactoryDefaultsCallback(uint8_t endpoint);
/** @} END Basic Server Cluster Plugin Callbacks */


/** @name Bulb PWM Configuration Plugin Callbacks */
// @{

/** @brief BlinkStop
 *
 * This callback is called when it is time for the bulb to stop any blinking
 * that may be underway.
 *
 * @param endpoint   Ver.: always
 */
void emberAfPluginBulbPwmConfigurationBlinkStopCallback(uint8_t endpoint);
/** @} END Bulb PWM Configuration Plugin Callbacks */


/** @name Bulb user interface Plugin Callbacks */
// @{

/** @brief Finished
 *
 * This callback is fired when the bulb-ui plugin is finished with the forming
 * or joining process. The result of the operation will be returned in the
 * status parameter.
 *
 * @param status   Ver.: always
 */
void emberAfPluginBulbUiFinishedCallback(EmberStatus status);
/** @} END Bulb user interface Plugin Callbacks */


/** @name Button Form/Join Code Plugin Callbacks */
// @{

/** @brief Button Event
 *
 * This allows another module to get notification when a button is pressed and
 * released but the button joining plugin did not handle it. This callback is
 * NOT called in ISR context so there are no restrictions on what code can
 * execute.
 *
 * @param buttonNumber The button number that was pressed. Ver.: always
 * @param buttonPressDurationMs The length of time button was held down before
 * it was released. Ver.: always
 */
void emberAfPluginButtonJoiningButtonEventCallback(uint8_t buttonNumber,
                                                   uint32_t buttonPressDurationMs);
/** @} END Button Form/Join Code Plugin Callbacks */


/** @name Calendar Server Plugin Callbacks */
// @{

/** @brief Publish Info
 *
 * This function is called by the calendar-server plugin after receiving any of
 * the following commands and just before it starts publishing the response:
 * GetCalendar, GetDayProfiles, GetSeasons, GetSpecialDays, and
 * GetWeekProfiles.
 *
 * @param publishCommandId ZCL command to be published Ver.: always
 * @param clientNodeId Destination nodeId Ver.: always
 * @param clientEndpoint Destination endpoint Ver.: always
 * @param totalCommands Total number of publish commands to be sent
 * Ver.: always
 */
void emberAfPluginCalendarServerPublishInfoCallback(uint8_t publishCommandId,
                                                    EmberNodeId clientNodeId,
                                                    uint8_t clientEndpoint,
                                                    uint8_t totalCommands);
/** @} END Calendar Server Plugin Callbacks */


/** @name Color Control Cluster Plugin Callbacks */
// @{

/** @brief Is Color Supported
 *
 * This function will be called to determine whether a color is supported by a
 * device. The color will be specified by hue and saturation.
 *
 * @param hue   Ver.: always
 * @param saturation   Ver.: always
 */
bool emberAfPluginColorControlIsColorSupportedCallback(uint8_t hue,
                                                       uint8_t saturation);
/** @} END Color Control Cluster Plugin Callbacks */


/** @name Comms Hub Function (CHF) Plugin Callbacks */
// @{

/** @brief Send
 *
 * This callback is called by the Comms Hub Function (CHF) plugin to report the
 * status of a message that was previously sent.
 *
 * @param status The status of the message that was sent Ver.: always
 * @param destinationDeviceId The EUI64 of the destination device to which the
 * data was sent Ver.: always
 * @param dataLen The length in octets of the data that was sent Ver.: always
 * @param data Buffer containing the raw octets of the data that was sent
 * Ver.: always
 */
void emberAfPluginCommsHubFunctionSendCallback(uint8_t status,
                                               EmberEUI64 destinationDeviceId,
                                               uint16_t dataLen,
                                               uint8_t *data);
/** @brief Received
 *
 * This callback is called by the Comms Hub Function (CHF) plugin whenever a
 * message is received.
 *
 * @param senderDeviceId The EUI64 of the sending device Ver.: always
 * @param dataLen The length in octets of the data Ver.: always
 * @param data Buffer containing the raw octets of the data Ver.: always
 */
void emberAfPluginCommsHubFunctionReceivedCallback(EmberEUI64 senderDeviceId,
                                                   uint16_t dataLen,
                                                   uint8_t *data);
/** @brief Alert WAN
 *
 * Notify the application of an Alert that should be sent to the WAN. The
 * second argument is a pointer to the gbz alert buffer. The application is
 * responsible for freeing this buffer.
 *
 * @param alertCode The 16 bit allert code as defined by GBCS Ver.: always
 * @param gbzAlert Buffer continaing the GBZ formatted Alert Ver.: always
 * @param gbzAlertLength The length in octets of the GBZ formatted Alert
 * Ver.: always
 */
void emberAfPluginCommsHubFunctionAlertWANCallback(uint16_t alertCode,
                                                   uint8_t *gbzAlert,
                                                   uint16_t gbzAlertLength);
/** @brief Tunnel Opened
 *
 * This function is called by the Comms Hub Function (CHF) plugin when a tunnel
 * is opened.
 *
 * @param remoteDeviceId The EUI64 of the remote device for which a tunnel is
 * opened Ver.: always
 */
void emberAfPluginCommsHubFunctionTunnelOpenedCallback(EmberEUI64 remoteDeviceId);
/** @} END Comms Hub Function (CHF) Plugin Callbacks */


/** @name Concentrator Support Plugin Callbacks */
// @{

/** @brief Broadcast Sent
 *
 * This function is called when a new MTORR broadcast has been successfully
 * sent by the concentrator plugin.
 *
 */
void emberAfPluginConcentratorBroadcastSentCallback(void);
/** @} END Concentrator Support Plugin Callbacks */


/** @name Counters Plugin Callbacks */
// @{

/** @brief Rollover
 *
 * This function is called every time a counter exceeds its threshold.
 *
 * @param type The counter that rolled over Ver.: always
 */
void emberAfPluginCountersRolloverCallback(EmberCounterType type);
/** @} END Counters Plugin Callbacks */


/** @name Device Database Plugin Callbacks */
// @{

/** @brief Discovery Complete
 *
 * This function is called when a device in the database has been set to
 * EMBER_AF_DEVICE_DISCOVERY_STATUS_DONE.
 *
 * @param device A pointer to the information struct about the device.
 * Ver.: always
 */
void emberAfPluginDeviceDatabaseDiscoveryCompleteCallback(const EmberAfDeviceInfo*device);
/** @} END Device Database Plugin Callbacks */


/** @name Device Management Client Plugin Callbacks */
// @{

/** @brief Enact Change Of Tenancy
 *
 * This callback will be implemented by a meter to enact a change of tenancy at
 * the requested time of implementation.
 *
 * @param endpoint   Ver.: always
 * @param tenancy   Ver.: always
 */
void emberAfPluginDeviceManagementClientEnactChangeOfTenancyCallback(uint8_t endpoint,
                                                                     EmberAfDeviceManagementTenancy *tenancy);
/** @brief Enact Change Of Supplier
 *
 * This callback will be implemented by a meter to enact a change of supplier
 * at the requested time of implementation.
 *
 * @param endpoint   Ver.: always
 * @param supplier   Ver.: always
 */
void emberAfPluginDeviceManagementClientEnactChangeOfSupplierCallback(uint8_t endpoint,
                                                                      EmberAfDeviceManagementSupplier *supplier);
/** @brief Enact Change Supply
 *
 * This callback will be implemented by a meter to enact a supply change at the
 * requested time of implementation.
 *
 * @param endpoint   Ver.: always
 * @param supply   Ver.: always
 */
EmberStatus emberAfPluginDeviceManagementClientEnactChangeSupplyCallback(uint8_t endpoint,
                                                                         EmberAfDeviceManagementSupply *supply);
/** @brief Set Supply Status
 *
 * This callback will be implemented by a meter to appropriately set the supply
 * status.
 *
 * @param endpoint   Ver.: always
 * @param supplyStatus   Ver.: always
 */
void emberAfPluginDeviceManagementClientSetSupplyStatusCallback(uint8_t endpoint,
                                                                EmberAfDeviceManagementSupplyStatusFlags *supplyStatus);
/** @brief Enact Update Uncontrolled Flow Threshold
 *
 * This callback will be implemented by a meter to enact an update to the
 * uncontrolled flow threshold as specified.
 *
 * @param endpoint   Ver.: always
 * @param supplier   Ver.: always
 */
void emberAfPluginDeviceManagementClientEnactUpdateUncontrolledFlowThresholdCallback(uint8_t endpoint,
                                                                                     EmberAfDeviceManagementUncontrolledFlowThreshold *supplier);
/** @} END Device Management Client Plugin Callbacks */


/** @name Device Management Server Plugin Callbacks */
// @{

/** @brief Get Password
 *
 * This callback will be implemented by an esi to provide device specific
 * password information.
 *
 * @param senderNodeId   Ver.: always
 * @param passwordType   Ver.: always
 * @param passwordInfo   Ver.: always
 */
void emberAfPluginDeviceManagementServerGetPasswordCallback(EmberNodeId senderNodeId,
                                                            EmberAfDeviceManagementPasswordType passwordType,
                                                            EmberAfDeviceManagementPassword passwordInfo);
/** @} END Device Management Server Plugin Callbacks */


/** @name Door Lock Server Cluster Plugin Callbacks */
// @{

/** @brief Activate Door Lock
 *
 * This function is provided by the door lock server plugin. It is
 *
 * @param activate True if the lock should move to the locked position, false
 * if it should move to the unlocked position Ver.: always
 */
bool emberAfPluginDoorLockServerActivateDoorLockCallback(bool activate);
/** @} END Door Lock Server Cluster Plugin Callbacks */


/** @name Demand Response Load Control Cluster Client Plugin Callbacks */
// @{

/** @brief Event Action
 *
 * This function is called by the demand response and load control client
 * plugin whenever an event status changes within the DRLC event table. The
 * list of possible event status values is defined by the ZCL spec and is
 * listed in the Application Framework's generated enums located in enums.h.
 * For example, an event status may be:
 * AMI_EVENT_STATUS_LOAD_CONTROL_EVENT_COMMAND_RX indicating that a properly
 * formatted event was received; AMI_EVENT_STATUS_EVENT_STARTED indicating that
 * an event has started; AMI_EVENT_STATUS_THE_EVENT_HAS_BEEN_CANCELED,
 * indicating that the event was canceled. This callback is intended to give
 * the device an opportunity to take action on the event in question. For
 * instance if an event starts, the device should take the appropriate event
 * action on the hardware. This callback returns a bool, if returned value is
 * true, then a notification will be send over the air automatically to the
 * originator of the event. If it is false, then nothing will be sent back to
 * the originator of the event. Please note that in order for your application
 * to be ZigBee compliant, a notification must be sent over the air to the
 * originator of the event, so a value of false should only be returned if your
 * application code takes care of sending this message or there is some other
 * reason a message does not need to be sent by the framework.
 *
 * @param loadControlEvent Actual event Ver.: always
 * @param eventStatus Status of event Ver.: always
 * @param sequenceNumber Sequence number Ver.: always
 */
bool emberAfPluginDrlcEventActionCallback(EmberAfLoadControlEvent *loadControlEvent,
                                          EmberAfAmiEventStatus eventStatus,
                                          uint8_t sequenceNumber);
/** @} END Demand Response Load Control Cluster Client Plugin Callbacks */


/** @name End Device Support Plugin Callbacks */
// @{

/** @brief Poll Completed
 *
 * This function is called by the End Device Support plugin after a poll is
 * completed.
 *
 * @param status Return status of a completed poll operation Ver.: always
 */
void emberAfPluginEndDeviceSupportPollCompletedCallback(EmberStatus status);
/** @} END End Device Support Plugin Callbacks */


/** @name Events Server Plugin Callbacks */
// @{

/** @brief Ok To Clear Log
 *
 * This function is called by the Events server plugin whenever a Clear Event
 * Log Request command is received. The application should return true if it is
 * Ok to clear the given log and false otherwise. If the request is to clear
 * all logs (i.e. logId == EMBER_ZCL_EVENT_LOG_ID_ALL_LOGS) and the application
 * allows all logs to be cleared then the application should return true. If
 * the application does not allow all logs to be cleared it should return false
 * in which case the plugin will subsequently call this callback for each event
 * log allowing the application to selectively choose which event logs are Ok
 * to be cleared.
 *
 * @param logId The identifier of the log requested to be cleared. Ver.: always
 */
bool emberAfPluginEventsServerOkToClearLogCallback(EmberAfEventLogId logId);
/** @brief Log Data Updated
 *
 * This function is called by the Events server plugin when any modification to
 * the plugin's event logs has been made. The argument will hint the ZCL
 * command that might be used to triggered the data change. If null, it means
 * the logging data have been updated through other means, e.g. CLI.
 *
 * @param cmd ZCL command Ver.: always
 */
void emberAfPluginEventsServerLogDataUpdatedCallback(const EmberAfClusterCommand *cmd);
/** @} END Events Server Plugin Callbacks */


/** @name EZ-Mode Commissioning Plugin Callbacks */
// @{

/** @brief Client Complete
 *
 * This function is called by the EZ-Mode Commissioning plugin when client
 * commissioning completes.
 *
 * @param bindingIndex The binding index that was created or
 * ::EMBER_NULL_BINDING if an error occurred. Ver.: always
 */
void emberAfPluginEzmodeCommissioningClientCompleteCallback(uint8_t bindingIndex);
/** @} END EZ-Mode Commissioning Plugin Callbacks */


/** @name Find and Bind Initiator Plugin Callbacks */
// @{

/** @brief Bind Target
 *
 * This callback with enable the user to programmatically decide if they want
 * to bind with a potential target. The plugin will try to bind with this
 * target if and only if the function returns true. By default, the callback
 * tells the plugin to try to bind with the target. If the binding type is
 * changed to ::EMBER_MULTICAST_BINDING, a multicast binding will be created.
 *
 * @param nodeId short ID of the potential target Ver.: always
 * @param bindingEntry The binding entry for that target. Ver.: always
 * @param groupName The name of the group if a multicast binding is created.
 * Ver.: always
 */
bool emberAfPluginFindAndBindInitiatorBindTargetCallback(EmberNodeId nodeId,
                                                            EmberBindingTableEntry *bindingEntry,
                                                            uint8_t *groupName);
/** @brief Complete
 *
 * This callback is fired by the initiator when the Find and Bind process is
 * complete.
 *
 * @param status Status code describing the completion of the find and bind
 * process Ver.: always
 */
void emberAfPluginFindAndBindInitiatorCompleteCallback(EmberStatus status);
/** @} END Find and Bind Initiator Plugin Callbacks */


/** @name Form and Join Library Plugin Callbacks */
// @{

/** @brief Network Found
 *
 * This is called by the form-and-join library to notify the application of the
 * network found after a call to ::emberScanForJoinableNetwork() or
 * ::emberScanForNextJoinableNetwork(). See form-and-join documentation for
 * more information.
 *
 * @param networkFound   Ver.: always
 * @param lqi   Ver.: always
 * @param rssi   Ver.: always
 */
void emberAfPluginFormAndJoinNetworkFoundCallback(EmberZigbeeNetwork *networkFound,
                                                  uint8_t lqi,
                                                  int8_t rssi);
/** @brief Unused Pan Id Found
 *
 * This function is called when the form-and-join library finds an unused PAN
 * ID that can be used to form a new network on.
 *
 * @param panId A randomly generated PAN ID without other devices on it.
 * Ver.: always
 * @param channel The channel where the PAN ID can be used to form a new
 * network. Ver.: always
 */
void emberAfPluginFormAndJoinUnusedPanIdFoundCallback(EmberPanId panId,
                                                      uint8_t channel);
/** @} END Form and Join Library Plugin Callbacks */


/** @name Gas Proxy Function (GPF) Plugin Callbacks */
// @{

/** @brief Non Tap Off Message Handler Completed
 *
 * Notify the application that the Non Tap Off Message (Non-TOM) have been
 * handled by the mirror endpoint. This callback is invoked when the the Non
 * Tap Off Message have been processed. The first argument is a pointer to the
 * gbz commands response buffer. The application is responsible for freeing
 * this buffer.
 *
 * @param gbzCommandsResponse   Ver.: always
 * @param gbzCommandsResponseLength   Ver.: always
 */
void emberAfPluginGasProxyFunctionNonTapOffMessageHandlerCompletedCallback(uint8_t *gbzCommandsResponse,
                                                                           uint16_t gbzCommandsResponseLength);
/** @brief Alert WAN
 *
 * Notify the application of an Alert that should be sent to the WAN. The
 * second argument is a pointer to the gbz alert buffer. The application is
 * responsible for freeing this buffer.
 *
 * @param alertCode The 16 bit allert code as defined by GBCS Ver.: always
 * @param gbzAlert Buffer continaing the GBZ formatted Alert Ver.: always
 * @param gbzAlertLength The length in octets of the GBZ formatted Alert
 * Ver.: always
 */
void emberAfPluginGasProxyFunctionAlertWANCallback(uint16_t alertCode,
                                                   uint8_t *gbzAlert,
                                                   uint16_t gbzAlertLength);
/** @brief Tap Off Message Future Command Ignored
 *
 * Notify the application that an elemental ZCL command, embedded within the
 * Tap Off Message (TOM), has been ignored by the GPF as it is a future dated
 * command. The application can utilize the callback to store the discarded
 * command for later retrieval. When the future dated command becomes active on
 * the GSME, it will inform the CommsHub about the activation via an Alert
 * message. The CommsHub should be able to correlate the matching messages and
 * pass the previously stored ZCL commands to the TOM message handler for
 * processing.
 *
 * @param gpfMessage   Ver.: always
 * @param zclClusterCommand   Ver.: always
 */
void emberAfPluginGasProxyFunctionTapOffMessageFutureCommandIgnoredCallback(const EmberAfGpfMessage * gpfMessage,
                                                                            const EmberAfClusterCommand * zclClusterCommand);
/** @brief Data Log Access Request
 *
 * Query the application regarding the processing of the current GBCS specific
 * command. Depending on the vendor specific information, such as the Tenancy
 * attribute in the Device Management Cluster, the callback's return value
 * determines whether the current command gets processed or not. With a return
 * value of true, the plugin will process the message. Otherwise, the plugin
 * will reject the message.
 *
 * @param gpfMessage   Ver.: always
 * @param zclClusterCommand   Ver.: always
 */
bool emberAfPluginGasProxyFunctionDataLogAccessRequestCallback(const EmberAfGpfMessage * gpfMessage,
                                                                  const EmberAfClusterCommand * zclClusterCommand);
/** @brief Validate Incoming Zcl Command
 *
 * Query the application to check if a specific ZCL command should be processed
 * given the UseCase # and ZCL command payload information. This function
 * should capture the behavior detailed by the GBCS Use Case documentation.
 * Please refer to EmberAfGpfZclCommandPermission enum for specific return data
 * types.
 *
 * @param cmd   Ver.: always
 * @param messageCode   Ver.: always
 */
EmberAfGpfZclCommandPermission emberAfPluginGasProxyFunctionValidateIncomingZclCommandCallback(const EmberAfClusterCommand * cmd,
                                                                                               uint16_t messageCode);
/** @brief Unknown Season Week Id
 *
 * This callback is called when the GPF receives a PublishSeasons command with
 * an unknown week ID in one of the seasons. The callback contains a mask,
 * unknownWeekIdSeasonsMask, with bits set corresponding to season entries that
 * were not published because of an unknown week ID reference.
 *
 * @param issuerCalendarId The calendar ID associated with these seasons.
 * Ver.: always
 * @param seasonEntries The season entries for this publish command.
 * Ver.: always
 * @param seasonEntriesLength The length of the season entries. Ver.: always
 * @param unknownWeekIdSeasonsMask A mask where bit N indicates that the Nth
 * season entry contains an unknown week ID reference. Ver.: always
 */
void emberAfPluginGasProxyFunctionUnknownSeasonWeekIdCallback(uint32_t issuerCalendarId,
                                                              uint8_t *seasonEntries,
                                                              uint8_t seasonEntriesLength,
                                                              uint8_t unknownWeekIdSeasonsMask);
/** @brief Unknown Special Days Day Id
 *
 * This callback is called when the GPF receives a PublishSpecialDays command
 * with an unknown day ID for one of the special days. The callback contains a
 * mask, unknownDayIdMask, with bits set corresponding to special day entries
 * that were not published because of an unknown day ID reference.
 *
 * @param issuerCalendarId The calendar ID associated with these special days.
 * Ver.: always
 * @param specialDayEntries The special day entries for this publish command.
 * Ver.: always
 * @param specialDayEntriesLength The length of the special day entries.
 * Ver.: always
 * @param unknownDayIdMask A mask where bit N indicates that the Nth special
 * day entry contains an unknown day ID reference. Ver.: always
 */
void emberAfPluginGasProxyFunctionUnknownSpecialDaysDayIdCallback(uint32_t issuerCalendarId,
                                                                  uint8_t *specialDayEntries,
                                                                  uint8_t specialDayEntriesLength,
                                                                  uint8_t unknownDayIdMask);
/** @} END Gas Proxy Function (GPF) Plugin Callbacks */


/** @name GBCS Device Log Plugin Callbacks */
// @{

/** @brief Device Removed
 *
 * This callback is called by the plugin when a device is removed from the
 * device log.
 *
 * @param deviceId Identifier of the device removed Ver.: always
 */
void emberAfPluginGbcsDeviceLogDeviceRemovedCallback(EmberEUI64 deviceId);
/** @} END GBCS Device Log Plugin Callbacks */


/** @name GBZ Message Controller Plugin Callbacks */
// @{

/** @brief Decrypt Data
 *
 * This function is called by the Gbz Message Controller plugin to decrypt a
 * ZCL payload. If the decryption is successful, the application is responsible
 * for allocating the memory for the new decrypted data and passing the pointer
 * via the "plainPayload" field as well as the plainPayloadLength field for the
 * length. The framework will be responsible for free-ing the allocated memory.
 * If the decryption fails, the callback return false and should not modify any
 * data.
 *
 * @param data   Ver.: always
 */
void emberAfPluginGbzMessageControllerDecryptDataCallback(EmberAfGbzMessageData *data);
/** @brief Encrypt Data
 *
 * This function is called by the Gbz Message Controller plugin to encrypt a
 * ZCL payload. If the encryption is successful, the application is responsible
 * for allocating the memory for the new encrypted data and passing the pointer
 * via the "encryptedPayload" field as well as the encryptedPayloadLength field
 * for the length. The framework will be responsible for free-ing the allocated
 * memory. If the encryption fails, the callback return false and should not
 * modify any data.
 *
 * @param data   Ver.: always
 */
void emberAfPluginGbzMessageControllerEncryptDataCallback(EmberAfGbzMessageData *data);
/** @} END GBZ Message Controller Plugin Callbacks */


/** @name Green Power Server Plugin Callbacks */
// @{

/** @brief Gpd Commissioning
 *
 * This function is called by the Green Power Sink Plugin to notify the
 * application of a Green Power Device that has requested commissioning with
 * this sink. Return true to accept, false to reject.
 *
 * @param appInfo   Ver.: always
 */
bool emberAfPluginGreenPowerServerGpdCommissioningCallback(EmberGpApplicationInfo *appInfo);
/** @} END Green Power Server Plugin Callbacks */


/** @name Groups Server Cluster Plugin Callbacks */
// @{

/** @brief Get Group Name
 *
 * This function returns the name of a group with the provided group ID, should
 * it exist.
 *
 * @param endpoint Endpoint Ver.: always
 * @param groupId Group ID Ver.: always
 * @param groupName Group Name Ver.: always
 */
void emberAfPluginGroupsServerGetGroupNameCallback(uint8_t endpoint,
                                                   uint16_t groupId,
                                                   uint8_t *groupName);
/** @brief Set Group Name
 *
 * This function sets the name of a group with the provided group ID.
 *
 * @param endpoint Endpoint Ver.: always
 * @param groupId Group ID Ver.: always
 * @param groupName Group Name Ver.: always
 */
void emberAfPluginGroupsServerSetGroupNameCallback(uint8_t endpoint,
                                                   uint16_t groupId,
                                                   uint8_t *groupName);
/** @brief Group Names Supported
 *
 * This function returns whether or not group names are supported.
 *
 * @param endpoint Endpoint Ver.: always
 */
bool emberAfPluginGroupsServerGroupNamesSupportedCallback(uint8_t endpoint);
/** @} END Groups Server Cluster Plugin Callbacks */


/** @name Identify Cluster Plugin Callbacks */
// @{

/** @brief Start Feedback
 *
 * This function is called by the Identify plugin when identification begins.
 * It informs the Identify Feedback plugin that it should begin providing its
 * implemented feedback functionality (e.g. LED blinking, buzzer sounding,
 * etc.) until the Identify plugin tells it to stop. The identify time is
 * purely a matter of informational convenience; this plugin does not need to
 * know how long it will identify (the Identify plugin will perform the
 * necessary timekeeping.)
 *
 * @param endpoint The identifying endpoint Ver.: always
 * @param identifyTime The identify time Ver.: always
 */
void emberAfPluginIdentifyStartFeedbackCallback(uint8_t endpoint,
                                                uint16_t identifyTime);
/** @brief Stop Feedback
 *
 * This function is called by the Identify plugin when identification is
 * finished. It tells the Identify Feedback plugin to stop providing its
 * implemented feedback functionality.
 *
 * @param endpoint The identifying endpoint Ver.: always
 */
void emberAfPluginIdentifyStopFeedbackCallback(uint8_t endpoint);
/** @} END Identify Cluster Plugin Callbacks */


/** @name Interpan Plugin Callbacks */
// @{

/** @brief Pre Message Received
 *
 * This function is called by the Interpan plugin when an interpan message is
 * received but has not yet been handled by the plugin or the framework. The
 * application should return true if the message was handled.
 *
 * @param header The inter-PAN header Ver.: always
 * @param msgLen The message payload length Ver.: always
 * @param message The message payload Ver.: always
 */
bool emberAfPluginInterpanPreMessageReceivedCallback(const EmberAfInterpanHeader *header,
                                                     uint8_t msgLen,
                                                     uint8_t *message);
/** @brief Message Received Over Fragments
 *
 * This function is called by the Interpan plugin when a fully reconstructed
 * message has been received over inter-PAN fragments, or IPMFs.
 *
 * @param header The inter-PAN header Ver.: always
 * @param msgLen The message payload length Ver.: always
 * @param message The message payload Ver.: always
 */
void emberAfPluginInterpanMessageReceivedOverFragmentsCallback(const EmberAfInterpanHeader *header,
                                                               uint8_t msgLen,
                                                               uint8_t *message);
/** @brief Fragment Transmission Failed
 *
 * This function is called by the Interpan plugin when a fragmented
 * transmission has failed.
 *
 * @param interpanFragmentationStatus The status describing why transmission
 * failed Ver.: always
 * @param fragmentNum The fragment number that encountered the failure
 * Ver.: always
 */
void emberAfPluginInterpanFragmentTransmissionFailedCallback(uint8_t interpanFragmentationStatus,
                                                             uint8_t fragmentNum);
/** @} END Interpan Plugin Callbacks */


/** @name Messaging Client Cluster Plugin Callbacks */
// @{

/** @brief Pre Display Message
 *
 * This function is called by the Messaging client plugin when a DisplayMessage
 * command is received. If callback returns true, the plugin assumes the
 * message have been handled and will not do anything with the message.
 * Otherwise, the plugin will go through with its own implementation.
 *
 * @param messageId   Ver.: always
 * @param messageControl   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param message   Ver.: always
 * @param optionalExtendedMessageControl   Ver.: always
 */
bool emberAfPluginMessagingClientPreDisplayMessageCallback(uint32_t messageId,
                                                           uint8_t messageControl,
                                                           uint32_t startTime,
                                                           uint16_t durationInMinutes,
                                                           uint8_t *message,
                                                           uint8_t optionalExtendedMessageControl);
/** @brief Display Message
 *
 * This function is called by the Messaging client plugin whenever the
 * application should display a message.
 *
 * @param message The message that should be displayed. Ver.: always
 */
void emberAfPluginMessagingClientDisplayMessageCallback(EmberAfPluginMessagingClientMessage *message);
/** @brief Cancel Message
 *
 * This function is called by the Messaging client plugin whenever the
 * application should stop displaying a message.
 *
 * @param message The message that should no longer be displayed. Ver.: always
 */
void emberAfPluginMessagingClientCancelMessageCallback(EmberAfPluginMessagingClientMessage *message);
/** @} END Messaging Client Cluster Plugin Callbacks */


/** @name Meter Mirror Plugin Callbacks */
// @{

/** @brief Mirror Added
 *
 * This function is called by the Meter Mirror plugin whenever a RequestMirror
 * command is successfully processed.
 *
 * @param requestingDeviceIeeeAddress   Ver.: always
 * @param endpoint   Ver.: always
 */
void emberAfPluginMeterMirrorMirrorAddedCallback(const EmberEUI64 requestingDeviceIeeeAddress,
                                                 uint8_t endpoint);
/** @brief Mirror Removed
 *
 * This function is called by the Meter Mirror plugin whenever a RemoveMirror
 * command is successfully processed.
 *
 * @param requestingDeviceIeeeAddress   Ver.: always
 * @param endpoint   Ver.: always
 */
void emberAfPluginMeterMirrorMirrorRemovedCallback(const EmberEUI64 requestingDeviceIeeeAddress,
                                                   uint8_t endpoint);
/** @brief Reporting Complete
 *
 * This function is called by the Meter Mirror plugin after processing an
 * AttributeReportingStatus attribute set to ReportingComplete. If the
 * application needs to do any post attribute reporting processing it can do it
 * from within this callback.
 *
 * @param endpoint   Ver.: always
 */
void emberAfPluginMeterMirrorReportingCompleteCallback(uint8_t endpoint);
/** @} END Meter Mirror Plugin Callbacks */


/** @name Meter Snapshot Server Plugin Callbacks */
// @{

/** @brief Schedule Snapshot
 *
 * This function is called by the Meter Snapshot server plugin whenever a
 * ScheduleSnapshot command is received. A plugin implementing backhaul
 * functionality for the snapshot mechanism should proceed to schedule the
 * snapshot as required.
 *
 * @param srcEndpoint   Ver.: always
 * @param dstEndpoint   Ver.: always
 * @param dest   Ver.: always
 * @param snapshotPayload   Ver.: always
 * @param responsePayload   Ver.: always
 */
void emberAfPluginMeterSnapshotServerScheduleSnapshotCallback(uint8_t srcEndpoint,
                                                              uint8_t dstEndpoint,
                                                              EmberNodeId dest,
                                                              uint8_t*snapshotPayload,
                                                              uint8_t*responsePayload);
/** @brief Take Snapshot
 *
 * This function is called by the Meter Snapshot server plugin whenever a
 * TakeSnapshot command is received. A plugin implementing backhaul
 * functionality for the snapshot mechanism should proceed to manually take a
 * snapshot as required. If for some reason the snapshot could not be taken,
 * this should be reflected in the snapshotConfirmation argument.
 *
 * @param endpoint   Ver.: always
 * @param snapshotCause   Ver.: always
 * @param snapshotConfirmation   Ver.: always
 */
uint32_t emberAfPluginMeterSnapshotServerTakeSnapshotCallback(uint8_t endpoint,
                                                              uint32_t snapshotCause,
                                                              uint8_t*snapshotConfirmation);
/** @brief Get Snapshot
 *
 * This function is called by the Meter Snapshot server plugin whenever a
 * GetSnapshot command is received. A plugin implementing backhaul
 * functionality for the snapshot mechanism should proceed to retrieve the
 * snapshot and send a PublishSnapshot command to the requesting client.
 *
 * @param srcEndpoint   Ver.: always
 * @param dstEndpoint   Ver.: always
 * @param dest   Ver.: always
 * @param snapshotCriteria   Ver.: always
 */
void emberAfPluginMeterSnapshotServerGetSnapshotCallback(uint8_t srcEndpoint,
                                                         uint8_t dstEndpoint,
                                                         EmberNodeId dest,
                                                         uint8_t*snapshotCriteria);
/** @} END Meter Snapshot Server Plugin Callbacks */


/** @name Network Creator Plugin Callbacks */
// @{

/** @brief Complete
 *
 * This callback notifies the user that the network creation process has
 * completed successfully.
 *
 * @param network The network that the network creator plugin successfully
 * formed. Ver.: always
 * @param usedSecondaryChannels Whether or not the network creator wants to
 * form a network on the secondary channels Ver.: always
 */
void emberAfPluginNetworkCreatorCompleteCallback(const EmberNetworkParameters *network,
                                                 bool usedSecondaryChannels);
/** @brief Get Pan Id
 *
 * This callback is called when the Network Creator plugin needs the PAN ID for
 * the network it is about to create. By default, the callback will return a
 * random 16-bit value.
 *
 */
EmberPanId emberAfPluginNetworkCreatorGetPanIdCallback(void);
/** @} END Network Creator Plugin Callbacks */


/** @name Network Find Plugin Callbacks */
// @{

/** @brief Finished
 *
 * This callback is fired when the network-find plugin is finished with the
 * forming or joining process. The result of the operation will be returned in
 * the status parameter.
 *
 * @param status   Ver.: always
 */
void emberAfPluginNetworkFindFinishedCallback(EmberStatus status);
/** @brief Get Radio Power For Channel
 *
 * This callback is called by the framework when it is setting the radio power
 * during the discovery process. The framework will set the radio power
 * depending on what is returned by this callback.
 *
 * @param channel   Ver.: always
 */
int8_t emberAfPluginNetworkFindGetRadioPowerForChannelCallback(uint8_t channel);
/** @brief Join
 *
 * This callback is called by the plugin when a joinable network has been
 * found. If the application returns true, the plugin will attempt to join the
 * network. Otherwise, the plugin will ignore the network and continue
 * searching. Applications can use this callback to implement a network
 * blacklist.
 *
 * @param networkFound   Ver.: always
 * @param lqi   Ver.: always
 * @param rssi   Ver.: always
 */
bool emberAfPluginNetworkFindJoinCallback(EmberZigbeeNetwork *networkFound,
                                          uint8_t lqi,
                                          int8_t rssi);
/** @} END Network Find Plugin Callbacks */


/** @name Network Steering Plugin Callbacks */
// @{

/** @brief Complete
 *
 * This callback is fired when the Network Steering plugin is complete.
 *
 * @param status On success this will be set to EMBER_SUCCESS to indicate a
 * network was joined successfully. On failure this will be the status code of
 * the last join or scan attempt. Ver.: always
 * @param totalBeacons The total number of 802.15.4 beacons that were heard,
 * including beacons from different devices with the same PAN ID. Ver.: always
 * @param joinAttempts The number of join attempts that were made to get onto
 * an open Zigbee network. Ver.: always
 * @param finalState The finishing state of the network steering process. From
 * this, one is able to tell on which channel mask and with which key the
 * process was complete. Ver.: always
 */
void emberAfPluginNetworkSteeringCompleteCallback(EmberStatus status,
                                                  uint8_t totalBeacons,
                                                  uint8_t joinAttempts,
                                                  uint8_t finalState);
/** @brief Get Power For Radio Channel
 *
 * This callback is fired when the Network Steering plugin needs to set the
 * power level. The application has the ability to change the max power level
 * used for this particular channel.
 *
 * @param channel The channel that the plugin is inquiring about the power
 * level. Ver.: always
 */
int8_t emberAfPluginNetworkSteeringGetPowerForRadioChannelCallback(uint8_t channel);
/** @brief Get Node Type
 *
 * This callback allows the application to set the node type that the network
 * steering process will use in joining a network.
 *
 * @param state The current ::EmberAfPluginNetworkSteeringJoiningState.
 *
 * @return An ::EmberNodeType value that the network steering process will
 * try to join a network as.
 */
EmberNodeType emberAfPluginNetworkSteeringGetNodeTypeCallback(EmberAfPluginNetworkSteeringJoiningState state);
/** @} END Network Steering Plugin Callbacks */


/** @name OTA Simple Storage EEPROM Driver Plugin Callbacks */
// @{

/** @brief Erase Complete
 *
 * This is called when an EEPROM erase operation has completed.
 *
 * @param success The result of the erase operation. Ver.: always
 */
void emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback(bool success);
/** @} END OTA Simple Storage EEPROM Driver Plugin Callbacks */


/** @name Prepayment Server Plugin Callbacks */
// @{

/** @brief Consumer Top Up
 *
 * This function is called when a Consumer Top Up command is received. This
 * callback must evaluate the command data and determine if it is a valid Top
 * Up command.
 *
 * @param originatingDevice   Ver.: always
 * @param topUpCode   Ver.: always
 */
bool emberAfPluginPrepaymentServerConsumerTopUpCallback(uint8_t originatingDevice,
                                                        uint8_t *topUpCode);
/** @} END Prepayment Server Plugin Callbacks */


/** @name Price Client Plugin Callbacks */
// @{

/** @brief Price Started
 *
 * This function is called by the Price client plugin whenever a price starts.
 *
 * @param price The price that has started. Ver.: always
 */
void emberAfPluginPriceClientPriceStartedCallback(EmberAfPluginPriceClientPrice *price);
/** @brief Price Expired
 *
 * This function is called by the Price client plugin whenever a price expires.
 *
 * @param price The price that has expired. Ver.: always
 */
void emberAfPluginPriceClientPriceExpiredCallback(EmberAfPluginPriceClientPrice *price);
/** @brief Pending Cpp Event
 *
 * This function is called by the Price client plugin when a CPP event is
 * received with pending status.
 *
 * @param cppAuth The CPP Auth status. Ver.: always
 */
uint8_t emberAfPluginPriceClientPendingCppEventCallback(uint8_t cppAuth);
/** @} END Price Client Plugin Callbacks */


/** @name Price Server Plugin Callbacks */
// @{

/** @brief New Active Price Matrix
 *
 * This callback is used to notify the application that a new PriceMatrix has
 * become active. The application is responsible for updating proper ZCL
 * attributes to reflect the necessary vendor specific behaviors. Argument,
 * priceCommonInfo, would contain common informations such as startTime and
 * etc. Argument, priceMatrix, would contain the PriceMatrix information
 * itself.
 *
 * @param priceCommonInfo   Ver.: always
 * @param priceMatrix   Ver.: always
 */
void emberAfPluginPriceServerNewActivePriceMatrixCallback(const EmberAfPriceCommonInfo *priceCommonInfo,
                                                          const EmberAfScheduledPriceMatrix *priceMatrix);
/** @brief New Active Tariff Information
 *
 * This callback is used to notify the application that a new Tariff
 * Information has become active. The application is responsible for updating
 * proper ZCL attributes to reflect the necessary vendor specific behaviors.
 * Argument, priceCommonInfo, would contain common informations such as
 * startTime and etc. Argument, priceTariffInfo, would contain the PriceMatrix
 * information itself.
 *
 * @param priceCommonInfo   Ver.: always
 * @param priceTariffInfo   Ver.: always
 */
void emberAfPluginPriceServerNewActiveTariffInformationCallback(const EmberAfPriceCommonInfo *priceCommonInfo,
                                                                const EmberAfScheduledTariff *priceTariffInfo);
/** @brief New Active Block Thresholds Information
 *
 * This callback is used to notify the application that a new Block Thresholds
 * Information has become active. The application is responsible for updating
 * proper ZCL attributes to reflect the necessary vendor specific behaviors.
 * Argument, priceCommonInfo, would contain common informations such as
 * startTime and etc. Argument, priceTariffInfo, would contain the
 * BlockThresholds information itself.
 *
 * @param priceCommonInfo   Ver.: always
 * @param priceBlockThresholds   Ver.: always
 */
void emberAfPluginPriceServerNewActiveBlockThresholdsInformationCallback(const EmberAfPriceCommonInfo *priceCommonInfo,
                                                                         const EmberAfScheduledBlockThresholds *priceBlockThresholds);
/** @brief New Active Block Period Information
 *
 * This callback is used to notify the application that a new Block Period
 * Information has become active. The application is responsible for updating
 * proper ZCL attributes to reflect the necessary vendor specific behaviors.
 * Argument, priceCommonInfo, would contain common informations such as
 * startTime and etc. Argument, priceBlockPeriod, would contain the BlockPeriod
 * information itself.
 *
 * @param priceCommonInfo   Ver.: always
 * @param priceBlockPeriods   Ver.: always
 */
void emberAfPluginPriceServerNewActiveBlockPeriodInformationCallback(const EmberAfPriceCommonInfo *priceCommonInfo,
                                                                     const EmberAfPriceBlockPeriod *priceBlockPeriods);
/** @} END Price Server Plugin Callbacks */


/** @name Reporting Plugin Callbacks */
// @{

/** @brief Configured
 *
 * This callback is called by the Reporting plugin whenever a reporting entry
 * is configured, including when entries are deleted or updated. The
 * application can use this callback for scheduling readings or measurements
 * based on the minimum and maximum reporting interval for the entry. The
 * application should return EMBER_ZCL_STATUS_SUCCESS if it can support the
 * configuration or an error status otherwise. Note: attribute reporting is
 * required for many clusters and attributes, so rejecting a reporting
 * configuration may violate ZigBee specifications.
 *
 * @param entry   Ver.: always
 */
EmberAfStatus emberAfPluginReportingConfiguredCallback(const EmberAfPluginReportingEntry *entry);
/** @} END Reporting Plugin Callbacks */


/** @name Generic Device Profile Plugin Callbacks */
// @{

/** @brief Zrc 2 0 Start Configuration
 *
 * This function is called by the RF4CE GDP plugin when ZRC 2.0 configuration
 * should begin.
 *
 * @param isOriginator true if is originator, false if is recipient.  Ver.:
 * always
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 */
bool emberAfPluginRf4ceGdpZrc20StartConfigurationCallback(bool isOriginator,
                                                             uint8_t pairingIndex);
/** @brief Zrc 2 0 Binding Complete
 *
 * This function is called by the RF4CE GDP plugin when a ZRC 2.0 binding
 * procedure completed.
 *
 * @param status An ::EmberAfRf4ceGdpBindingStatus value indicating whether the
 * the binding succeeded or the reason of failure.  Ver.: always
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 */
void emberAfPluginRf4ceGdpZrc20BindingCompleteCallback(EmberAfRf4ceGdpBindingStatus status,
                                                       uint8_t pairingIndex);
/** @brief Start Validation
 *
 * This function is called by the RF4CE GDP plugin when the application should
 * begin the validation procedure.  The application must complete the validation
 * within the validation wait time to avoid the validation automatically failing
 * due to a timeout.
 *
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 */
void emberAfPluginRf4ceGdpStartValidationCallback(uint8_t pairingIndex);
/** @brief Binding Complete
 *
 * This function is called by the RF4CE GDP plugin when the binding operation
 * completes.  If status is ::EMBER_SUCCESS, binding was successful and
 * pairingIndex indicates the index in the pairing table for the remote node.
 *
 * @param status The status of the binding operation.  Ver.: always
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 */
void emberAfPluginRf4ceGdpBindingCompleteCallback(EmberAfRf4ceGdpBindingStatus status,
                                                  uint8_t pairingIndex);
/** @brief Incoming Bind Proxy
 *
 * This function is called by the RF4CE GDP plugin when the binding recipient
 * receives a pair request with the Binding Proxy Supported bit set. If this
 * callback returns true, the recipient will respond to the pair request,
 * otherwise it will ignore it.
 *
 * @param ieeeAddr The IEEE address of the originator node sending the pair
 * request.  Ver.: always
 */
bool emberAfPluginRf4ceGdpIncomingBindProxyCallback(const EmberEUI64 ieeeAddr);
/** @brief Heartbeat Polling Established
 *
 * This function is called by the RF4CE GDP plugin when heartbeat polling is
 * established between a client and this server. The application should wait
 * until the heartbeat callback is called to send messages to the client. A
 * module can subscribe to incoming heartbeats by using the
 * ::emberAfRf4ceGdpSubscribeToHeartbeat() API.
 *
 * @param pairingIndex The polling method.  Ver.: always
 * @param triggers The polling triggers.  Ver.: always
 */
void emberAfPluginRf4ceGdpHeartbeatPollingEstablishedCallback(uint8_t pairingIndex,
                                                              EmberAfRf4ceGdpPollingTrigger triggers);
/** @brief Identify
 *
 * This function is called by the RF4CE GDP plugin when the client should take
 * an action to identify itself.
 *
 * @param flags The actions the client should take to identify itself.  Ver.:
 * always
 * @param timeS The time in seconds that the client should perform the identify
 * action or zero if the client should stop the action.  Ver.: always
 */
void emberAfPluginRf4ceGdpIdentifyCallback(EmberAfRf4ceGdpClientNotificationIdentifyFlags flags,
                                           uint16_t timeS);
/** @brief Identify Client Found
 *
 * This function is called by the RF4CE GDP plugin when the an identify server
 * discovers an identify client.
 *
 * @param flags The actions supported by the discovered identify client.  Ver.:
 * always
 */
void emberAfPluginRf4ceGdpIdentifyClientFoundCallback(EmberAfRf4ceGdpClientNotificationIdentifyFlags flags);
/** @brief Key Exchange Complete
 *
 * This function is called by the RF4CE GDP plugin when a Key Exchange procedure
 * that was initiated by the application has completed.
 *
 * @param status The status success/failed of the Key Exchange procedure.  Ver.:
 * always
 */
void emberAfPluginRf4ceGdpKeyExchangeCompleteCallback(EmberStatus status);
/** @brief Vendor Specific Key Exchange
 *
 * This function is called by the RF4CE GDP plugin when a Key Exchange Challenge
 * with the vendor-specific bit set is received. If this callback returns true,
 * the node will respond with a Key Exchange Challenge Response command with the
 * vendor-specific bit set.
 *
 * @param initiatorVendorSpecificParam The additional parameter included in the
 * Key Exchange Flags of the incoming Key Exchange Challenge command.  Ver.:
 * always
 * @param responderVendorSpecificParam The additional parameter to be included
 * in the Key Exchange Flags of the Key Exchange Challenge Response command the
 * node will send out.  Ver.: always
 * @param sharedSecret A pointer to an 8-byte area memory to be filled with the
 * vendor-specific shared secret.  Ver.: always
 */
bool emberAfPluginRf4ceGdpVendorSpecificKeyExchangeCallback(uint8_t initiatorVendorSpecificParam,
                                                               uint8_t *responderVendorSpecificParam,
                                                               uint8_t *sharedSecret);
/** @} END Generic Device Profile Plugin Callbacks */


/** @name RF4CE Multiple System Operators Profile Plugin Callbacks */
// @{

/** @brief Start Validation
 *
 * This function is called by the RF4CE MSO plugin when a temporary pairing has
 * been successfully created and the application should begin the validation
 * procedure.  The application must complete the validation within the
 * validation wait time (if set) and also kick the watchdog within the initial
 * watchdog timeout (if set) to avoid the validation automatically failing due
 * to a timeout.
 *
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 */
void emberAfPluginRf4ceMsoStartValidationCallback(uint8_t pairingIndex);
/** @brief Binding Complete
 *
 * This function is called by the RF4CE MSO plugin when the binding operation
 * completes.  If status is ::EMBER_SUCCESS, binding was successful and
 * pairingIndex indicates the index in the pairing table for the remote node.
 *
 * @param status The status of the binding operation.  Ver.: always
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 */
void emberAfPluginRf4ceMsoBindingCompleteCallback(EmberAfRf4ceMsoBindingStatus status,
                                                  uint8_t pairingIndex);
/** @brief User Control
 *
 * This function is called by the RF4CE MSO plugin when a user control starts or
 * stops.  If the type of the record is
 * ::EMBER_AF_RF4CE_MSO_COMMAND_USER_CONTROL_PRESSED, the application should
 * execute the requested operation repeatedly at some application-specific rate.
 *  When the repetition should stop, the plugin will call the callback again
 * with the type set to ::EMBER_AF_RF4CE_MSO_COMMAND_USER_CONTROL_RELEASED.
 * ::EMBER_AF_RF4CE_MSO_COMMAND_USER_CONTROL_REPEATED is a special case of
 * ::EMBER_AF_RF4CE_MSO_COMMAND_USER_CONTROL_PRESSED and means that the pressed
 * command from the originator was not received and that the originator is still
 * triggering the action.  The application should process a repeat type the same
 * as a pressed type, but may wish to perform additional operations to
 * compensate for missed commands.
 *
 * @param record The user control record.  Ver.: always
 */
void emberAfPluginRf4ceMsoUserControlCallback(const EmberAfRf4ceMsoUserControlRecord *record);
/** @brief Get Ir Rf Database Attribute
 *
 * This function is called by the RF4CE MSO plugin when a target is queried by a
 * controller for one of the IR_RF_DATABASE attributes. The application is
 * responsible for storing these attributes. If the application currently stores
 * an entry for the corresponding passed pairing index and entry index, it
 * should copy the content of such attribute at the passed 'value' pointer and
 * return ::EMBER_AF_RF4CE_STATUS_SUCCESS, otherwise it should return an
 * ::EmberAfRf4ceStatus indicating the reason of failure.  valueLength is a
 * pointer to an integer that indicates the length of the buffer pointed to by
 * value.  The application must not write more than *valueLength bytes to value.
 *  If the application returns ::EMBER_AF_RF4CE_STATUS_SUCCESS, it must also
 * update *valueLength to indicate the number of bytes actually written to
 * value.
 *
 * @param pairingIndex The pairing index of the requested attribute.  Ver.:
 * always
 * @param entryIndex The entry index of the requested attribute.  Ver.: always
 * @param valueLength A pointer to the size of the buffer pointed to by value
 * that must be updated with the length written to value.  Ver.: always
 * @param value A pointer where the application should copy the content of the
 * requested attribute.  Ver.: always
 */
EmberAfRf4ceStatus emberAfPluginRf4ceMsoGetIrRfDatabaseAttributeCallback(uint8_t pairingIndex,
                                                                         uint8_t entryIndex,
                                                                         uint8_t *valueLength,
                                                                         uint8_t *value);
/** @brief Have Ir Rf Database Attribute
 *
 * This function is called by the RF4CE MSO plugin when a target is queried by a
 * controller for one of the IR_RF_DATABASE attributes. The application is
 * responsible for storing these attributes. If the application currently stores
 * an entry for the corresponding passed pairing index and entry index, it
 * should return true, otherwise it should return false.
 *
 * @param pairingIndex The pairing index of the requested attribute.  Ver.:
 * always
 * @param entryIndex The entry index of the requested attribute.  Ver.: always
 */
bool emberAfPluginRf4ceMsoHaveIrRfDatabaseAttributeCallback(uint8_t pairingIndex,
                                                               uint8_t entryIndex);
/** @brief Incoming Ir Rf Database Attribute
 *
 * This function is called by the RF4CE MSO plugin when controller receives a
 * get attribute response for one of the IR_RF_DATABASE attributes. The
 * application is responsible for storing these attributes.
 *
 * @param pairingIndex The pairing index of the requested attribute.  Ver.:
 * always
 * @param entryIndex The entry index of the requested attribute.  Ver.: always
 * @param valueLength The length of the requested attribute.  Ver.: always
 * @param value A pointer to the content of the requested attribute.  Ver.:
 * always
 */
void emberAfPluginRf4ceMsoIncomingIrRfDatabaseAttributeCallback(uint8_t pairingIndex,
                                                                uint8_t entryIndex,
                                                                uint8_t valueLength,
                                                                const uint8_t *value);
/** @brief Get Ir Rf Database Entry
 *
 * This function is called by the RF4CE MSO plugin to retrieve the IR-RF
 * database entry for a key code when the controller is sending user control
 * commands.  The application should return ::EMBER_SUCCESS and populate the
 * entry if the IR-RF database entry is available for the RC command code.
 * Otherwise, the application should return an error code.
 *
 * @param keyCode The RC command code of the user control.  Ver.: always
 * @param entry A pointer to the ::EmberAfRf4ceMsoIrRfDatabaseEntry to be
 * populated.  Ver.: always
 */
EmberStatus emberAfPluginRf4ceMsoGetIrRfDatabaseEntryCallback(EmberAfRf4ceMsoKeyCode keyCode,
                                                              EmberAfRf4ceMsoIrRfDatabaseEntry *entry);
/** @} END RF4CE Multiple System Operators Profile Plugin Callbacks */


/** @name RF4CE Profile Support Plugin Callbacks */
// @{

/** @brief Gdp Message Sent
 *
 * This function is called by the RF4CE Profile plugin when a GDP message is
 * sent. It is expected to return true if the sent message was processed by the
 * GDP plugin, false otherwise.
 *
 * @param pairingIndex The index of the entry in the pairing table used to
 * transmit the message.  Ver.: always
 * @param profileId The profile ID included in the message.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param messageTag The tag of the message.  Ver.: always
 * @param message A pointer to the payload of the message that was sent.  Ver.:
 * always
 * @param messageLength The length in bytes of the message.  Ver.: always
 * @param status An ::EmberStatus value.  Ver.: always
 */
bool emberAfPluginRf4ceProfileGdpMessageSentCallback(uint8_t pairingIndex,
                                                        uint8_t profileId,
                                                        uint16_t vendorId,
                                                        uint8_t messageTag,
                                                        const uint8_t *message,
                                                        uint8_t messageLength,
                                                        EmberStatus status);
/** @brief Remote Control 1 1 Message Sent
 *
 * This function is called by the RF4CE Profile plugin when a Remote Control 1.0
 * or 1.1 message is sent.
 *
 * @param pairingIndex The index of the entry in the pairing table used to
 * transmit the message.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param messageTag The tag of the message.  Ver.: always
 * @param message A pointer to the payload of the message that was sent.  Ver.:
 * always
 * @param messageLength The length in bytes of the message.  Ver.: always
 * @param status An ::EmberStatus value.  Ver.: always
 */
void emberAfPluginRf4ceProfileRemoteControl11MessageSentCallback(uint8_t pairingIndex,
                                                                 uint16_t vendorId,
                                                                 uint8_t messageTag,
                                                                 const uint8_t *message,
                                                                 uint8_t messageLength,
                                                                 EmberStatus status);
/** @brief Zrc 2 0 Message Sent
 *
 * This function is called by the RF4CE Profile plugin when a ZRC 2.0 message is
 * sent.
 *
 * @param pairingIndex The index of the entry in the pairing table used to
 * transmit the message.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param messageTag The tag of the message.  Ver.: always
 * @param message A pointer to the payload of the message that was sent.  Ver.:
 * always
 * @param messageLength The length in bytes of the message.  Ver.: always
 * @param status An ::EmberStatus value.  Ver.: always
 */
void emberAfPluginRf4ceProfileZrc20MessageSentCallback(uint8_t pairingIndex,
                                                       uint16_t vendorId,
                                                       uint8_t messageTag,
                                                       const uint8_t *message,
                                                       uint8_t messageLength,
                                                       EmberStatus status);
/** @brief Mso Message Sent
 *
 * This function is called by the RF4CE Profile plugin when an MSO message is
 * sent.
 *
 * @param pairingIndex The index of the entry in the pairing table used to
 * transmit the message.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param messageTag The tag of the message.  Ver.: always
 * @param message A pointer to the payload of the message that was sent.  Ver.:
 * always
 * @param messageLength The length in bytes of the message.  Ver.: always
 * @param status An ::EmberStatus value.  Ver.: always
 */
void emberAfPluginRf4ceProfileMsoMessageSentCallback(uint8_t pairingIndex,
                                                     uint16_t vendorId,
                                                     uint8_t messageTag,
                                                     const uint8_t *message,
                                                     uint8_t messageLength,
                                                     EmberStatus status);
/** @brief Message Sent
 *
 * This function is called by the RF4CE Profile plugin when a message is sent.
 * It is called after any profile-specific callbacks.
 *
 * @param pairingIndex The index of the entry in the pairing table used to
 * transmit the message.  Ver.: always
 * @param profileId The profile ID included in the message.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param messageTag The tag of the message.  Ver.: always
 * @param message A pointer to the payload of the message that was sent.  Ver.:
 * always
 * @param messageLength The length in bytes of the message.  Ver.: always
 * @param status An ::EmberStatus value.  Ver.: always
 */
void emberAfPluginRf4ceProfileMessageSentCallback(uint8_t pairingIndex,
                                                  uint8_t profileId,
                                                  uint16_t vendorId,
                                                  uint8_t messageTag,
                                                  const uint8_t *message,
                                                  uint8_t messageLength,
                                                  EmberStatus status);
/** @brief Gdp Incoming Message
 *
 * This function is called by the RF4CE Profile plugin when any message is
 * received. This callback is expected to return true if the passed message was
 * processed by the GDP plugin, false otherwise.
 *
 * @param pairingIndex The index of the entry in the pairing table corresponding
 * to the PAN on which the message was received.  Ver.: always
 * @param profileId The profile ID included in the message.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param txOptions The TX options used by the source node to transmit the
 * received message.  Ver.: always
 * @param message A pointer to the payload of the received message.  Ver.:
 * always
 * @param messageLength The length in bytes of the received message.  Ver.:
 * always
 */
bool emberAfPluginRf4ceProfileGdpIncomingMessageCallback(uint8_t pairingIndex,
                                                            uint8_t profileId,
                                                            uint16_t vendorId,
                                                            EmberRf4ceTxOption txOptions,
                                                            const uint8_t *message,
                                                            uint8_t messageLength);
/** @brief Remote Control 1 1 Incoming Message
 *
 * This function is called by the RF4CE Profile plugin when a Remote Control 1.0
 * or 1.1 message is received.
 *
 * @param pairingIndex The index of the entry in the pairing table corresponding
 * to the PAN on which the message was received.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param txOptions The TX options used by the source node to transmit the
 * received message.  Ver.: always
 * @param message A pointer to the payload of the received message.  Ver.:
 * always
 * @param messageLength The length in bytes of the received message.  Ver.:
 * always
 */
void emberAfPluginRf4ceProfileRemoteControl11IncomingMessageCallback(uint8_t pairingIndex,
                                                                     uint16_t vendorId,
                                                                     EmberRf4ceTxOption txOptions,
                                                                     const uint8_t *message,
                                                                     uint8_t messageLength);
/** @brief Zrc 2 0 Incoming Message
 *
 * This function is called by the RF4CE Profile plugin when a ZRC 2.0 message is
 * received.
 *
 * @param pairingIndex The index of the entry in the pairing table corresponding
 * to the PAN on which the message was received.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param txOptions The TX options used by the source node to transmit the
 * received message.  Ver.: always
 * @param message A pointer to the payload of the received message.  Ver.:
 * always
 * @param messageLength The length in bytes of the received message.  Ver.:
 * always
 */
void emberAfPluginRf4ceProfileZrc20IncomingMessageCallback(uint8_t pairingIndex,
                                                           uint16_t vendorId,
                                                           EmberRf4ceTxOption txOptions,
                                                           const uint8_t *message,
                                                           uint8_t messageLength);
/** @brief Mso Incoming Message
 *
 * This function is called by the RF4CE Profile plugin when an MSO message is
 * received.
 *
 * @param pairingIndex The index of the entry in the pairing table corresponding
 * to the PAN on which the message was received.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param txOptions The TX options used by the source node to transmit the
 * received message.  Ver.: always
 * @param message A pointer to the payload of the received message.  Ver.:
 * always
 * @param messageLength The length in bytes of the received message.  Ver.:
 * always
 */
void emberAfPluginRf4ceProfileMsoIncomingMessageCallback(uint8_t pairingIndex,
                                                         uint16_t vendorId,
                                                         EmberRf4ceTxOption txOptions,
                                                         const uint8_t *message,
                                                         uint8_t messageLength);
/** @brief Incoming Message
 *
 * This function is called by the RF4CE Profile plugin when a message is
 * received.  It is called after any profile-specific callbacks.
 *
 * @param pairingIndex The index of the entry in the pairing table corresponding
 * to the PAN on which the message was received.  Ver.: always
 * @param profileId The profile ID included in the message.  Ver.: always
 * @param vendorId The vendor ID included in the message.  Ver.: always
 * @param txOptions The TX options used by the source node to transmit the
 * received message.  Ver.: always
 * @param message A pointer to the payload of the received message.  Ver.:
 * always
 * @param messageLength The length in bytes of the received message.  Ver.:
 * always
 */
void emberAfPluginRf4ceProfileIncomingMessageCallback(uint8_t pairingIndex,
                                                      uint8_t profileId,
                                                      uint16_t vendorId,
                                                      EmberRf4ceTxOption txOptions,
                                                      const uint8_t *message,
                                                      uint8_t messageLength);
/** @brief Gdp Discovery Request
 *
 * This function is called by the RF4CE Profile plugin when a discovery request
 * for the GDP profile is received.
 *
 * @param ieeeAddr The IEEE address of the requesting device.  Ver.: always
 * @param nodeCapabilities The capabilities of the requesting device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param searchDevType The device type requested.  Ver.: always
 * @param rxLinkQuality The LQI of the request.  Ver.: always
 */
bool emberAfPluginRf4ceProfileGdpDiscoveryRequestCallback(const EmberEUI64 ieeeAddr,
                                                             uint8_t nodeCapabilities,
                                                             const EmberRf4ceVendorInfo *vendorInfo,
                                                             const EmberRf4ceApplicationInfo *appInfo,
                                                             uint8_t searchDevType,
                                                             uint8_t rxLinkQuality);
/** @brief Remote Control 1 1 Discovery Request
 *
 * This function is called by the RF4CE Profile plugin when a discovery request
 * for the Remote Control 1.0 or 1.1 profile is received.
 *
 * @param ieeeAddr The IEEE address of the requesting device.  Ver.: always
 * @param nodeCapabilities The capabilities of the requesting device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param searchDevType The device type requested.  Ver.: always
 * @param rxLinkQuality The LQI of the request.  Ver.: always
 */
bool emberAfPluginRf4ceProfileRemoteControl11DiscoveryRequestCallback(const EmberEUI64 ieeeAddr,
                                                                         uint8_t nodeCapabilities,
                                                                         const EmberRf4ceVendorInfo *vendorInfo,
                                                                         const EmberRf4ceApplicationInfo *appInfo,
                                                                         uint8_t searchDevType,
                                                                         uint8_t rxLinkQuality);
/** @brief Zrc 2 0 Discovery Request
 *
 * This function is called by the RF4CE Profile plugin when a discovery request
 * for the ZRC 2.0 profile is received.
 *
 * @param ieeeAddr The IEEE address of the requesting device.  Ver.: always
 * @param nodeCapabilities The capabilities of the requesting device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param searchDevType The device type requested.  Ver.: always
 * @param rxLinkQuality The LQI of the request.  Ver.: always
 */
bool emberAfPluginRf4ceProfileZrc20DiscoveryRequestCallback(const EmberEUI64 ieeeAddr,
                                                               uint8_t nodeCapabilities,
                                                               const EmberRf4ceVendorInfo *vendorInfo,
                                                               const EmberRf4ceApplicationInfo *appInfo,
                                                               uint8_t searchDevType,
                                                               uint8_t rxLinkQuality);
/** @brief Mso Discovery Request
 *
 * This function is called by the RF4CE Profile plugin when a discovery request
 * for the MSO profile is received.
 *
 * @param ieeeAddr The IEEE address of the requesting device.  Ver.: always
 * @param nodeCapabilities The capabilities of the requesting device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param searchDevType The device type requested.  Ver.: always
 * @param rxLinkQuality The LQI of the request.  Ver.: always
 */
bool emberAfPluginRf4ceProfileMsoDiscoveryRequestCallback(const EmberEUI64 ieeeAddr,
                                                             uint8_t nodeCapabilities,
                                                             const EmberRf4ceVendorInfo *vendorInfo,
                                                             const EmberRf4ceApplicationInfo *appInfo,
                                                             uint8_t searchDevType,
                                                             uint8_t rxLinkQuality);
/** @brief Gdp Discovery Response
 *
 * This function is called by the RF4CE Profile plugin when a discovery response
 * for the GDP profile is received.
 *
 * @param atCapacity true if the node sending the discovery response has no free
 * entry in its pairing table, false otherwise.  Ver.: always
 * @param channel The channel on which the discovery response was received.
 * Ver.: always
 * @param panId The PAN identifier of the responding device.  Ver.: always
 * @param ieeeAddr The IEEE address of the responding device.  Ver.: always
 * @param nodeCapabilities The capabilities of the responding device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the responding device.  Ver.:
 * always
 * @param appInfo The application information of the responding device.  Ver.:
 * always
 * @param rxLinkQuality The LQI of the discovery response.  Ver.: always
 * @param discRequestLqi The LQI of the discovery request command frame reported
 * by the responding device.  Ver.: always
 */
bool emberAfPluginRf4ceProfileGdpDiscoveryResponseCallback(bool atCapacity,
                                                              uint8_t channel,
                                                              EmberPanId panId,
                                                              const EmberEUI64 ieeeAddr,
                                                              uint8_t nodeCapabilities,
                                                              const EmberRf4ceVendorInfo *vendorInfo,
                                                              const EmberRf4ceApplicationInfo *appInfo,
                                                              uint8_t rxLinkQuality,
                                                              uint8_t discRequestLqi);
/** @brief Remote Control 1 1 Discovery Response
 *
 * This function is called by the RF4CE Profile plugin when a discovery response
 * for the Remote Control 1.0 or 1.1 profile is received.
 *
 * @param atCapacity true if the node sending the discovery response has no free
 * entry in its pairing table, false otherwise.  Ver.: always
 * @param channel The channel on which the discovery response was received.
 * Ver.: always
 * @param panId The PAN identifier of the responding device.  Ver.: always
 * @param ieeeAddr The IEEE address of the responding device.  Ver.: always
 * @param nodeCapabilities The capabilities of the responding device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the responding device.  Ver.:
 * always
 * @param appInfo The application information of the responding device.  Ver.:
 * always
 * @param rxLinkQuality The LQI of the discovery response.  Ver.: always
 * @param discRequestLqi The LQI of the discovery request command frame reported
 * by the responding device.  Ver.: always
 */
bool emberAfPluginRf4ceProfileRemoteControl11DiscoveryResponseCallback(bool atCapacity,
                                                                          uint8_t channel,
                                                                          EmberPanId panId,
                                                                          const EmberEUI64 ieeeAddr,
                                                                          uint8_t nodeCapabilities,
                                                                          const EmberRf4ceVendorInfo *vendorInfo,
                                                                          const EmberRf4ceApplicationInfo *appInfo,
                                                                          uint8_t rxLinkQuality,
                                                                          uint8_t discRequestLqi);
/** @brief Zrc 2 0 Discovery Response
 *
 * This function is called by the RF4CE Profile plugin when a discovery response
 * for the ZRC 2.0 profile is received.
 *
 * @param atCapacity true if the node sending the discovery response has no free
 * entry in its pairing table, false otherwise.  Ver.: always
 * @param channel The channel on which the discovery response was received.
 * Ver.: always
 * @param panId The PAN identifier of the responding device.  Ver.: always
 * @param ieeeAddr The IEEE address of the responding device.  Ver.: always
 * @param nodeCapabilities The capabilities of the responding device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the responding device.  Ver.:
 * always
 * @param appInfo The application information of the responding device.  Ver.:
 * always
 * @param rxLinkQuality The LQI of the discovery response.  Ver.: always
 * @param discRequestLqi The LQI of the discovery request command frame reported
 * by the responding device.  Ver.: always
 */
bool emberAfPluginRf4ceProfileZrc20DiscoveryResponseCallback(bool atCapacity,
                                                                uint8_t channel,
                                                                EmberPanId panId,
                                                                const EmberEUI64 ieeeAddr,
                                                                uint8_t nodeCapabilities,
                                                                const EmberRf4ceVendorInfo *vendorInfo,
                                                                const EmberRf4ceApplicationInfo *appInfo,
                                                                uint8_t rxLinkQuality,
                                                                uint8_t discRequestLqi);
/** @brief Mso Discovery Response
 *
 * This function is called by the RF4CE Profile plugin when a discovery response
 * for the MSO profile is received.
 *
 * @param atCapacity true if the node sending the discovery response has no free
 * entry in its pairing table, false otherwise.  Ver.: always
 * @param channel The channel on which the discovery response was received.
 * Ver.: always
 * @param panId The PAN identifier of the responding device.  Ver.: always
 * @param ieeeAddr The IEEE address of the responding device.  Ver.: always
 * @param nodeCapabilities The capabilities of the responding device.  Ver.:
 * always
 * @param vendorInfo The vendor information of the responding device.  Ver.:
 * always
 * @param appInfo The application information of the responding device.  Ver.:
 * always
 * @param rxLinkQuality The LQI of the discovery response.  Ver.: always
 * @param discRequestLqi The LQI of the discovery request command frame reported
 * by the responding device.  Ver.: always
 */
bool emberAfPluginRf4ceProfileMsoDiscoveryResponseCallback(bool atCapacity,
                                                              uint8_t channel,
                                                              EmberPanId panId,
                                                              const EmberEUI64 ieeeAddr,
                                                              uint8_t nodeCapabilities,
                                                              const EmberRf4ceVendorInfo *vendorInfo,
                                                              const EmberRf4ceApplicationInfo *appInfo,
                                                              uint8_t rxLinkQuality,
                                                              uint8_t discRequestLqi);
/** @brief Gdp Discovery Complete
 *
 * This function is called by the RF4CE Profile plugin when the discovery
 * process for the GDP profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 */
void emberAfPluginRf4ceProfileGdpDiscoveryCompleteCallback(EmberStatus status);
/** @brief Remote Control 1 1 Discovery Complete
 *
 * This function is called by the RF4CE Profile plugin when the discovery
 * process for the Remote Control 1.0 or 1.1 profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 */
void emberAfPluginRf4ceProfileRemoteControl11DiscoveryCompleteCallback(EmberStatus status);
/** @brief Zrc 2 0 Discovery Complete
 *
 * This function is called by the RF4CE Profile plugin when the discovery
 * process for the ZRC 2.0 profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 */
void emberAfPluginRf4ceProfileZrc20DiscoveryCompleteCallback(EmberStatus status);
/** @brief Mso Discovery Complete
 *
 * This function is called by the RF4CE Profile plugin when the discovery
 * process for the MSO profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 */
void emberAfPluginRf4ceProfileMsoDiscoveryCompleteCallback(EmberStatus status);
/** @brief Gdp Auto Discovery Response Complete
 *
 * This function is called by the RF4CE Profile plugin when the auto discovery
 * response process for the GDP profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 * @param srcIeeeAddr The IEEE address of the node from which the discovery
 * request command frame was received.  This parameter is meaningful only if the
 * status parameter is ::EMBER_SUCCESS  Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * discovery request.  This parameter is meaningful only if the status parameter
 * is ::EMBER_SUCCESS.  Ver.: always
 * @param vendorInfo A pointer to an ::EmberRf4ceVendorInfo struct containing
 * the vendor information of the node that issued the discovery request.  This
 * parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.  Ver.:
 * always
 * @param appInfo A pointer to an ::EmberRf4ceApplicationInfo struct containing
 * the application information of the node that issued the discovery request.
 * This parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.
 * Ver.: always
 * @param searchDevType The device type being discovered.  If this is 0xFF, any
 * type is being requested.  This parameter is meaningful only if the status
 * parameter is ::EMBER_SUCCESS.  Ver.: always
 */
void emberAfPluginRf4ceProfileGdpAutoDiscoveryResponseCompleteCallback(EmberStatus status,
                                                                       const EmberEUI64 srcIeeeAddr,
                                                                       uint8_t nodeCapabilities,
                                                                       const EmberRf4ceVendorInfo *vendorInfo,
                                                                       const EmberRf4ceApplicationInfo *appInfo,
                                                                       uint8_t searchDevType);
/** @brief Remote Control 1 1 Auto Discovery Response Complete
 *
 * This function is called by the RF4CE Profile plugin when the auto discovery
 * response process for the Remote Control 1.0 or 1.1 profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 * @param srcIeeeAddr The IEEE address of the node from which the discovery
 * request command frame was received.  This parameter is meaningful only if the
 * status parameter is ::EMBER_SUCCESS  Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * discovery request.  This parameter is meaningful only if the status parameter
 * is ::EMBER_SUCCESS.  Ver.: always
 * @param vendorInfo A pointer to an ::EmberRf4ceVendorInfo struct containing
 * the vendor information of the node that issued the discovery request.  This
 * parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.  Ver.:
 * always
 * @param appInfo A pointer to an ::EmberRf4ceApplicationInfo struct containing
 * the application information of the node that issued the discovery request.
 * This parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.
 * Ver.: always
 * @param searchDevType The device type being discovered.  If this is 0xFF, any
 * type is being requested.  This parameter is meaningful only if the status
 * parameter is ::EMBER_SUCCESS.  Ver.: always
 */
void emberAfPluginRf4ceProfileRemoteControl11AutoDiscoveryResponseCompleteCallback(EmberStatus status,
                                                                                   const EmberEUI64 srcIeeeAddr,
                                                                                   uint8_t nodeCapabilities,
                                                                                   const EmberRf4ceVendorInfo *vendorInfo,
                                                                                   const EmberRf4ceApplicationInfo *appInfo,
                                                                                   uint8_t searchDevType);
/** @brief Zrc 2 0 Auto Discovery Response Complete
 *
 * This function is called by the RF4CE Profile plugin when the auto discovery
 * response process for the ZRC 2.0 profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 * @param srcIeeeAddr The IEEE address of the node from which the discovery
 * request command frame was received.  This parameter is meaningful only if the
 * status parameter is ::EMBER_SUCCESS  Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * discovery request.  This parameter is meaningful only if the status parameter
 * is ::EMBER_SUCCESS.  Ver.: always
 * @param vendorInfo A pointer to an ::EmberRf4ceVendorInfo struct containing
 * the vendor information of the node that issued the discovery request.  This
 * parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.  Ver.:
 * always
 * @param appInfo A pointer to an ::EmberRf4ceApplicationInfo struct containing
 * the application information of the node that issued the discovery request.
 * This parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.
 * Ver.: always
 * @param searchDevType The device type being discovered.  If this is 0xFF, any
 * type is being requested.  This parameter is meaningful only if the status
 * parameter is ::EMBER_SUCCESS.  Ver.: always
 */
void emberAfPluginRf4ceProfileZrc20AutoDiscoveryResponseCompleteCallback(EmberStatus status,
                                                                         const EmberEUI64 srcIeeeAddr,
                                                                         uint8_t nodeCapabilities,
                                                                         const EmberRf4ceVendorInfo *vendorInfo,
                                                                         const EmberRf4ceApplicationInfo *appInfo,
                                                                         uint8_t searchDevType);
/** @brief Mso Auto Discovery Response Complete
 *
 * This function is called by the RF4CE Profile plugin when the auto discovery
 * response process for the MSO profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the discovery
 * succeeded or the failure reason.  Ver.: always
 * @param srcIeeeAddr The IEEE address of the node from which the discovery
 * request command frame was received.  This parameter is meaningful only if the
 * status parameter is ::EMBER_SUCCESS  Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * discovery request.  This parameter is meaningful only if the status parameter
 * is ::EMBER_SUCCESS.  Ver.: always
 * @param vendorInfo A pointer to an ::EmberRf4ceVendorInfo struct containing
 * the vendor information of the node that issued the discovery request.  This
 * parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.  Ver.:
 * always
 * @param appInfo A pointer to an ::EmberRf4ceApplicationInfo struct containing
 * the application information of the node that issued the discovery request.
 * This parameter is non-NULL only if the status parameter is ::EMBER_SUCCESS.
 * Ver.: always
 * @param searchDevType The device type being discovered.  If this is 0xFF, any
 * type is being requested.  This parameter is meaningful only if the status
 * parameter is ::EMBER_SUCCESS.  Ver.: always
 */
void emberAfPluginRf4ceProfileMsoAutoDiscoveryResponseCompleteCallback(EmberStatus status,
                                                                       const EmberEUI64 srcIeeeAddr,
                                                                       uint8_t nodeCapabilities,
                                                                       const EmberRf4ceVendorInfo *vendorInfo,
                                                                       const EmberRf4ceApplicationInfo *appInfo,
                                                                       uint8_t searchDevType);
/** @brief Gdp Pair Request
 *
 * This function is called by the RF4CE Profile plugin when a pair request for
 * the GDP profile is received.
 *
 * @param status An ::EmberStatus value indicating whether the pairing is a new
 * pairing, a duplicate or if the pairing table is full.  Ver.: always
 * @param pairingIndex The index of the entry that will be used by the stack for
 * the pairing link.  Ver.: always
 * @param sourceIeeeAddr The source IEEE address of the incoming pair request.
 * Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * pair request.  Ver.: always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param keyExchangeTransferCount The number of transfers to be used to
 * exchange the link key with the pairing originator.  Ver.: always
 */
bool emberAfPluginRf4ceProfileGdpPairRequestCallback(EmberStatus status,
                                                        uint8_t pairingIndex,
                                                        const EmberEUI64 sourceIeeeAddr,
                                                        uint8_t nodeCapabilities,
                                                        const EmberRf4ceVendorInfo *vendorInfo,
                                                        const EmberRf4ceApplicationInfo *appInfo,
                                                        uint8_t keyExchangeTransferCount);
/** @brief Remote Control 1 1 Pair Request
 *
 * This function is called by the RF4CE Profile plugin when a pair request for
 * the Remote Control 1.0 or 1.1 profile is received.
 *
 * @param status An ::EmberStatus value indicating whether the pairing is a new
 * pairing, a duplicate or if the pairing table is full.  Ver.: always
 * @param pairingIndex The index of the entry that will be used by the stack for
 * the pairing link.  Ver.: always
 * @param sourceIeeeAddr The source IEEE address of the incoming pair request.
 * Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * pair request.  Ver.: always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param keyExchangeTransferCount The number of transfers to be used to
 * exchange the link key with the pairing originator.  Ver.: always
 */
bool emberAfPluginRf4ceProfileRemoteControl11PairRequestCallback(EmberStatus status,
                                                                    uint8_t pairingIndex,
                                                                    const EmberEUI64 sourceIeeeAddr,
                                                                    uint8_t nodeCapabilities,
                                                                    const EmberRf4ceVendorInfo *vendorInfo,
                                                                    const EmberRf4ceApplicationInfo *appInfo,
                                                                    uint8_t keyExchangeTransferCount);
/** @brief Zrc 2 0 Pair Request
 *
 * This function is called by the RF4CE Profile plugin when a pair request for
 * the ZRC 2.0 profile is received.
 *
 * @param status An ::EmberStatus value indicating whether the pairing is a new
 * pairing, a duplicate or if the pairing table is full.  Ver.: always
 * @param pairingIndex The index of the entry that will be used by the stack for
 * the pairing link.  Ver.: always
 * @param sourceIeeeAddr The source IEEE address of the incoming pair request.
 * Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * pair request.  Ver.: always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param keyExchangeTransferCount The number of transfers to be used to
 * exchange the link key with the pairing originator.  Ver.: always
 */
bool emberAfPluginRf4ceProfileZrc20PairRequestCallback(EmberStatus status,
                                                          uint8_t pairingIndex,
                                                          const EmberEUI64 sourceIeeeAddr,
                                                          uint8_t nodeCapabilities,
                                                          const EmberRf4ceVendorInfo *vendorInfo,
                                                          const EmberRf4ceApplicationInfo *appInfo,
                                                          uint8_t keyExchangeTransferCount);
/** @brief Mso Pair Request
 *
 * This function is called by the RF4CE Profile plugin when a pair request for
 * the MSO profile is received.
 *
 * @param status An ::EmberStatus value indicating whether the pairing is a new
 * pairing, a duplicate or if the pairing table is full.  Ver.: always
 * @param pairingIndex The index of the entry that will be used by the stack for
 * the pairing link.  Ver.: always
 * @param sourceIeeeAddr The source IEEE address of the incoming pair request.
 * Ver.: always
 * @param nodeCapabilities The node capabilities of the node that issued the
 * pair request.  Ver.: always
 * @param vendorInfo The vendor information of the requesting device.  Ver.:
 * always
 * @param appInfo The application information of the requesting device.  Ver.:
 * always
 * @param keyExchangeTransferCount The number of transfers to be used to
 * exchange the link key with the pairing originator.  Ver.: always
 */
bool emberAfPluginRf4ceProfileMsoPairRequestCallback(EmberStatus status,
                                                        uint8_t pairingIndex,
                                                        const EmberEUI64 sourceIeeeAddr,
                                                        uint8_t nodeCapabilities,
                                                        const EmberRf4ceVendorInfo *vendorInfo,
                                                        const EmberRf4ceApplicationInfo *appInfo,
                                                        uint8_t keyExchangeTransferCount);
/** @brief Gdp Pair Complete
 *
 * This function is called by the RF4CE Profile plugin when the pairing process
 * for the GDP profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the pairing succeeded
 * or the failure reason.  Ver.: always
 * @param pairingIndex The index of the pairing table entry corresponding to the
 * pairing link that was established during the pairing process.  Ver.: always
 * @param vendorInfo The vendor information of the peer device.  Ver.: always
 * @param appInfo The application information of the peer device.  Ver.: always
 */
void emberAfPluginRf4ceProfileGdpPairCompleteCallback(EmberStatus status,
                                                      uint8_t pairingIndex,
                                                      const EmberRf4ceVendorInfo *vendorInfo,
                                                      const EmberRf4ceApplicationInfo *appInfo);
/** @brief Remote Control 1 1 Pair Complete
 *
 * This function is called by the RF4CE Profile plugin when the pairing process
 * for the Remote Control 1.0 or 1.1 profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the pairing succeeded
 * or the failure reason.  Ver.: always
 * @param pairingIndex The index of the pairing table entry corresponding to the
 * pairing link that was established during the pairing process.  Ver.: always
 * @param vendorInfo The vendor information of the peer device.  Ver.: always
 * @param appInfo The application information of the peer device.  Ver.: always
 */
void emberAfPluginRf4ceProfileRemoteControl11PairCompleteCallback(EmberStatus status,
                                                                  uint8_t pairingIndex,
                                                                  const EmberRf4ceVendorInfo *vendorInfo,
                                                                  const EmberRf4ceApplicationInfo *appInfo);
/** @brief Zrc 2 0 Pair Complete
 *
 * This function is called by the RF4CE Profile plugin when the pairing process
 * for the ZRC 2.0 profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the pairing succeeded
 * or the failure reason.  Ver.: always
 * @param pairingIndex The index of the pairing table entry corresponding to the
 * pairing link that was established during the pairing process.  Ver.: always
 * @param vendorInfo The vendor information of the peer device.  Ver.: always
 * @param appInfo The application information of the peer device.  Ver.: always
 */
void emberAfPluginRf4ceProfileZrc20PairCompleteCallback(EmberStatus status,
                                                        uint8_t pairingIndex,
                                                        const EmberRf4ceVendorInfo *vendorInfo,
                                                        const EmberRf4ceApplicationInfo *appInfo);
/** @brief Mso Pair Complete
 *
 * This function is called by the RF4CE Profile plugin when the pairing process
 * for the MSO profile has completed.
 *
 * @param status An ::EmberStatus value indicating whether the pairing succeeded
 * or the failure reason.  Ver.: always
 * @param pairingIndex The index of the pairing table entry corresponding to the
 * pairing link that was established during the pairing process.  Ver.: always
 * @param vendorInfo The vendor information of the peer device.  Ver.: always
 * @param appInfo The application information of the peer device.  Ver.: always
 */
void emberAfPluginRf4ceProfileMsoPairCompleteCallback(EmberStatus status,
                                                      uint8_t pairingIndex,
                                                      const EmberRf4ceVendorInfo *vendorInfo,
                                                      const EmberRf4ceApplicationInfo *appInfo);
/** @} END RF4CE Profile Support Plugin Callbacks */


/** @name ZigBee Remote Control 1.1 Profile Plugin Callbacks */
// @{

/** @brief Pairing Complete
 *
 * This function is called by the RF4CE ZRC plugin when the push-button pairing
 * operation completes.  If status is ::EMBER_SUCCESS, pairing was successful
 * and pairingIndex indicates the index in the pairing table for the remote node
 * while eui64, vendorInfo, and applicationInfo contain information about the
 * remote node itself.  Otherwise, status indicates the reason for failure and
 * the other arguments are meaningless.
 *
 * @param status The status of the push-button pairing operation.  Ver.: always
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 * @param eui64 The ::EmberEUI64 of the remote node.  Ver.: always
 * @param vendorInfo The vendor information of the remote node.  Ver.: always
 * @param applicationInfo The application information of the remote node.  Ver.:
 * always
 */
void emberAfPluginRf4ceZrc11PairingCompleteCallback(EmberStatus status,
                                                    uint8_t pairingIndex,
                                                    const EmberEUI64 eui64,
                                                    const EmberRf4ceVendorInfo *vendorInfo,
                                                    const EmberRf4ceApplicationInfo *applicationInfo);
/** @brief User Control
 *
 * This function is called by the RF4CE ZRC plugin when a user control starts or
 * stops.  If the type of the record is
 * ::EMBER_AF_RF4CE_ZRC_COMMAND_USER_CONTROL_PRESSED, the application should
 * execute the requested operation repeatedly at some application-specific rate.
 *  When the repetition should stop, the plugin will call the callback again
 * with the type set to ::EMBER_AF_RF4CE_ZRC_COMMAND_USER_CONTROL_RELEASED.
 * ::EMBER_AF_RF4CE_ZRC_COMMAND_USER_CONTROL_REPEATED is a special case of
 * ::EMBER_AF_RF4CE_ZRC_COMMAND_USER_CONTROL_PRESSED and means that the pressed
 * command from the originator was not received and that the originator is still
 * triggering the action.  The application should process a repeat type the same
 * as a pressed type, but may wish to perform additional operations to
 * compensate for missed commands.
 *
 * @param record The user control record.  Ver.: always
 */
void emberAfPluginRf4ceZrc11UserControlCallback(const EmberAfRf4ceZrcUserControlRecord *record);
/** @brief Command Discovery Response
 *
 * This function is called by the RF4CE ZRC plugin when a Command Discovery
 * Response message is received by the device.
 *
 * @param status An ::EmberStatus value indicating that the command discovery
 * process succeeded or the failure reason.  Ver.: always
 * @param commandsSupported The 256-bit field indicating which user control
 * commands are supported.  Ver.: always
 */
 void emberAfPluginRf4ceZrc11CommandDiscoveryResponseCallback(EmberStatus status,
                                                              const EmberAfRf4ceZrcCommandsSupported *commandsSupported);
/** @} END ZigBee Remote Control 1.1 Profile Plugin Callbacks */


/** @name ZigBee Remote Control 2.0 Profile Plugin Callbacks */
// @{

/** @brief Action
 *
 * This function is called by the RF4CE ZRC 2.0 plugin when an action starts or
 * stops.  If the action type of the action record is
 * ::EMBER_AF_RF4CE_ZRC_ACTION_TYPE_START, the application should execute the
 * requested operation repeatedly at some application-specific rate.  When the
 * repetition should stop, the plugin will call the callback again with the
 * action type set to ::EMBER_AF_RF4CE_ZRC_ACTION_TYPE_STOP.
 * ::EMBER_AF_RF4CE_ZRC_ACTION_TYPE_REPEAT is a special case of
 * ::EMBER_AF_RF4CE_ZRC_ACTION_TYPE_START and means that the start action from
 * the originator was not received and that the originator is still triggering
 * the action.  The application should process a repeat type the same as a start
 * type, but may wish to perform additional operations to compensate for missed
 * actions.  If the action type is ::EMBER_AF_RF4CE_ZRC_ACTION_TYPE_ATOMIC, the
 * application should execute the operation once.  The plugin will not call the
 * callback again for an atomic action.
 *
 * @param record The action record.  Ver.: always
 */
void emberAfPluginRf4ceZrc20ActionCallback(const EmberAfRf4ceZrcActionRecord *record);
/** @brief Ha Action
 *
 * This function is called by the RF4CE ZRC 2.0 plugin when an HA action starts
 * or stops. TODO
 *
 * @param record The action record.  Ver.: always
 */
void emberAfPluginRf4ceZrc20HaActionCallback(const EmberAfRf4ceZrcActionRecord *record);
/** @brief Legacy Command Discovery Complete
 *
 * This function is called by the RF4CE ZRC plugin upon completion of the legacy
 * ZRC 1.1 command discovery process.
 *
 * @param status An ::EmberStatus value indicating that the command discovery
 * process succeeded or the failure reason.  Ver.: always
 * @param commandsSupported The 256-bit field indicating which user control
 * commands are supported.  Ver.: always
 */
void emberAfPluginRf4ceZrc20LegacyCommandDiscoveryCompleteCallback(EmberStatus status,
                                                                   const EmberAfRf4ceZrcCommandsSupported *commandsSupported);
/** @brief Action Mappings Negotiation Complete
 *
 * This function is called by the RF4CE ZRC plugin upon completion of the action
 * mapping negotiation procedure.
 *
 * @param status An ::EmberStatus value indicating that the action mappings
 * negotiation succeeded or the failure reason.  Ver.: always
 */
void emberAfPluginRf4ceZrc20ActionMappingsNegotiationCompleteCallback(EmberStatus status);
/** @brief Incoming Mappable Action
 *
 * This function is called by an RF4CE ZRC action mapping server upon receiving
 * a mappable action from an already bound action mapping client.
 *
 * @param pairingIndex The index of the pairing the mappable action was received
 * from.  Ver.: always
 * @param entryIndex The index of the mappable action entry.  Ver.: always
 * @param mappableAction A pointer to the mappable action struct that was
 * received.  Ver.: always
 */
void emberAfPluginRf4ceZrc20IncomingMappableActionCallback(uint8_t pairingIndex,
                                                           uint16_t entryIndex,
                                                           EmberAfRf4ceZrcMappableAction *mappableAction);
/** @brief Get Mappable Action
 *
 * This function is called by an RF4CE ZRC action mapping client or server to
 * retrieve the mappable action corresponding to the passed entry index.
 *
 * @param pairingIndex The index of the pairing the mappable action was received
 * from.  Ver.: always
 * @param entryIndex The index of the mappable action entry.  Ver.: always
 * @param mappableAction A pointer to the mappable action struct to be
 * populated.  Ver.: always
 */
EmberStatus emberAfPluginRf4ceZrc20GetMappableActionCallback(uint8_t pairingIndex,
                                                             uint16_t entryIndex,
                                                             EmberAfRf4ceZrcMappableAction *mappableAction);
/** @brief Get Mappable Action Count
 *
 * This function is called by an RF4CE ZRC action mapping server or client to
 * retrieve the number of entries currently stored in the mappable action table
 * for a certain pairing.
 *
 * @param pairingIndex The index of the pairing entry.  Ver.: always
 */
uint16_t emberAfPluginRf4ceZrc20GetMappableActionCountCallback(uint8_t pairingIndex);
/** @brief Incoming Action Mapping
 *
 * This function is called by an RF4CE ZRC action mapping client upon receiving
 * an action mapping pulled from an already bound action mapping server.
 *
 * @param pairingIndex The index of the pairing the action mapping was received
 * from.  Ver.: always
 * @param entryIndex The index of the action mapping entry.  Ver.: always
 * @param actionMapping A pointer to the action mapping struct that was
 * received.  Ver.: always
 */
void emberAfPluginRf4ceZrc20IncomingActionMappingCallback(uint8_t pairingIndex,
                                                          uint16_t entryIndex,
                                                          EmberAfRf4ceZrcActionMapping *actionMapping);
/** @brief Get Action Mapping
 *
 * This function is called by an RF4CE ZRC action mapping server to retrieve the
 * action mapping corresponding to the mappable action indicated by the passed
 * entry index.
 *
 * @param pairingIndex The index of the pairing the mappable action was received
 * from.  Ver.: always
 * @param entryIndex The index of the mappable action entry.  Ver.: always
 * @param actionMapping A pointer to the action mapping struct to be populated.
 * Ver.: always
 */
EmberStatus emberAfPluginRf4ceZrc20GetActionMappingCallback(uint8_t pairingIndex,
                                                            uint16_t entryIndex,
                                                            EmberAfRf4ceZrcActionMapping *actionMapping);
/** @brief Set Action Mapping
 *
 * This function is called by an RF4CE ZRC action mapping server to retrieve the
 * action mapping corresponding to the mappable action indicated by the passed
 * entry index.
 *
 * @param pairingIndex The index of the pairing the mappable action was received
 * from.  Ver.: always
 * @param entryIndex The index of the mappable action entry.  Ver.: always
 * @param actionMapping A pointer to the action mapping struct to be populated.
 * Ver.: always
 */
EmberStatus emberAfPluginRf4ceZrc20SetActionMappingCallback(uint8_t pairingIndex,
                                                            uint16_t entryIndex,
                                                            EmberAfRf4ceZrcActionMapping *actionMapping);
/** @brief Home Automation Supported Announcement Complete
 *
 * This function is called by the RF4CE ZRC plugin upon completion of the Home
 * Automation supported announcement procedure.
 *
 * @param status An ::EmberStatus value indicating that the Home Automation
 * supported announcement procedure succeeded or the failure reason.  Ver.:
 * always
 */
void emberAfPluginRf4ceZrc20HomeAutomationSupportedAnnouncementCompleteCallback(EmberStatus status);
/** @brief Incoming Home Automation Supported
 *
 * This function is called by an RF4CE ZRC Home Automation actions recipient
 * upon receiving a Home Automation supported attribute from an already bound
 * Home Automation originator.
 *
 * @param pairingIndex The index of the pairing the Home Automation supported
 * attribute was received from.  Ver.: always
 * @param haInstanceId The instance ID the Home Automation supported attribute
 * refers to.  Ver.: always
 * @param haSupported A pointer to the Home Automation supported struct that was
 * received.  Ver.: always
 */
void emberAfPluginRf4ceZrc20IncomingHomeAutomationSupportedCallback(uint8_t pairingIndex,
                                                                    uint8_t haInstanceId,
                                                                    EmberAfRf4ceZrcHomeAutomationSupported *haSupported);
/** @brief Get Home Automation Supported
 *
 * This function is called by an RF4CE ZRC Home Automation actions originator to
 * retrieve the Home Automation supported attribute corresponding to the passed
 * entry index.
 *
 * @param pairingIndex The index of the pairing the Home Automation supported
 * attribute  was received from.  Ver.: always
 * @param haInstanceId The instance ID the Home Automation supported attribute
 * refers to.  Ver.: always
 * @param haSupported A pointer to the Home Automation supported struct to be
 * populated.  Ver.: always
 */
EmberStatus emberAfPluginRf4ceZrc20GetHomeAutomationSupportedCallback(uint8_t pairingIndex,
                                                                      uint8_t haInstanceId,
                                                                      EmberAfRf4ceZrcHomeAutomationSupported *haSupported);
/** @brief Get Home Automation Attribute
 *
 * This function is called by an RF4CE ZRC Home Automation actions recipient
 * upon receiving a Pull attribute command from a Home Automation actions
 * originator to retrieve the contents of a Home Automation attribute. The
 * contents in the haAttribute struct will be included in the response only if
 * this callback returned an ::EmberAfRf4ceGdpAttributeStatus value of
 * ::EMBER_AF_RF4CE_GDP_ATTRIBUTE_STATUS_SUCCESS.
 *
 * @param pairingIndex The index of the pairing entry corresponding to the Home
 * Automation actions originator..  Ver.: always
 * @param haInstanceId The Home Automation instance ID.  Ver.: always
 * @param haAttributeId The Home Automation attribute ID.  Ver.: always
 * @param haAttribute A pointer to an ::EmberAfRf4ceZrcHomeAutomationAttribute
 * struct to be populated.  Ver.: always
 */
EmberAfRf4ceGdpAttributeStatus emberAfPluginRf4ceZrc20GetHomeAutomationAttributeCallback(uint8_t pairingIndex,
                                                                                         uint8_t haInstanceId,
                                                                                         uint8_t haAttributeId,
                                                                                         EmberAfRf4ceZrcHomeAutomationAttribute *haAttribute);
/** @brief Pull Home Automation Attribute Complete
 *
 * This function is called by an RF4CE ZRC Home Automation actions originator as
 * asynchronous response to a successful call to the
 * emberAfRf4ceZrc20PullHomeAutomationAttribute() API. This callback is also
 * invoked upon receiving pull attributes responses as result of an initial
 * client notification request for Home Automation attribute pull from the Home
 * Automation actions server.
 *
 * @param responseStatus An ::EmberAfRf4ceGdpAttributeStatus value indication
 * whether the attribute was successfully retrieved or the reason of failure.
 * Ver.: always
 * @param haAttribute A pointer to an ::EmberAfRf4ceZrcHomeAutomationAttribute
 * struct carrying the contents of the retrieved attribute. This parameter is
 * meaningful only if responseStatus is
 * ::EMBER_AF_RF4CE_GDP_ATTRIBUTE_STATUS_SUCCESS.  Ver.: always
 */
void emberAfPluginRf4ceZrc20PullHomeAutomationAttributeCompleteCallback(EmberAfRf4ceGdpAttributeStatus responseStatus,
                                                                        EmberAfRf4ceZrcHomeAutomationAttribute *haAttribute);
/** @} END ZigBee Remote Control 2.0 Profile Plugin Callbacks */


/** @name ZigBee Remote Control 2.0 Home Automation Server Plugin Callbacks */
// @{

/** @brief Ha Action Sent
 *
 * This function is called by the HA server plugin once the HA action is sent
 * to the ZCL network.
 *
 * @param type Outgoing message type. Ver.: always
 * @param indexOrDestination Binding index. Ver.: always
 * @param apsFrame APS frame pointer. Ver.: always
 * @param msgLen Message length. Ver.: always
 * @param message Message pointer. Ver.: always
 * @param status Status. Ver.: always
 */
void emberAfPluginRf4ceZrc20HaServerHaActionSentCallback(EmberOutgoingMessageType type,
                                                         uint16_t indexOrDestination,
                                                         EmberApsFrame*apsFrame,
                                                         uint16_t msgLen,
                                                         uint8_t*message,
                                                         EmberStatus status);
/** @} END ZigBee Remote Control 2.0 Home Automation Server Plugin Callbacks */


/** @name Simple Metering Client Plugin Callbacks */
// @{

/** @brief Request Mirror
 *
 * This function is called by the Simple Metering client plugin whenever a
 * Request Mirror command is received. The application should return the
 * endpoint to which the mirror has been assigned. If no mirror could be
 * assigned, the application should return 0xFFFF.
 *
 * @param requestingDeviceIeeeAddress   Ver.: always
 */
uint16_t emberAfPluginSimpleMeteringClientRequestMirrorCallback(EmberEUI64 requestingDeviceIeeeAddress);
/** @brief Remove Mirror
 *
 * This function is called by the Simple Metering client plugin whenever a
 * Remove Mirror command is received. The application should return the
 * endpoint on which the mirror has been removed. If the mirror could not be
 * removed, the application should return 0xFFFF.
 *
 * @param requestingDeviceIeeeAddress   Ver.: always
 */
uint16_t emberAfPluginSimpleMeteringClientRemoveMirrorCallback(EmberEUI64 requestingDeviceIeeeAddress);
/** @} END Simple Metering Client Plugin Callbacks */


/** @name Simple Metering Server Plugin Callbacks */
// @{

/** @brief Process Notification Flags
 *
 * This function is called by the metering server plugin when any of the
 * Notification Attribute Set attributes are read or reported by the metering
 * client.
 *
 * @param attributeId   Ver.: always
 * @param attributeValue   Ver.: always
 */
void emberAfPluginSimpleMeteringServerProcessNotificationFlagsCallback(uint16_t attributeId,
                                                                       uint32_t attributeValue);
/** @} END Simple Metering Server Plugin Callbacks */


/** @name Sleepy Message Queue Plugin Callbacks */
// @{

/** @brief Message Timed Out
 *
 * This function is called by the sleepy message queue when a message times
 * out. The plugin will invalidate the entry in the queue after giving the
 * application a chance to perform any actions on the timed-out message.
 *
 * @param sleepyMsgId   Ver.: always
 */
void emberAfPluginSleepyMessageQueueMessageTimedOutCallback(uint8_t sleepyMsgId);
/** @} END Sleepy Message Queue Plugin Callbacks */


/** @name Standalone Bootloader Client Plugin Callbacks */
// @{

/** @brief Allow Incoming Message
 *
 * Allows the application to control whether the plugin can respond to incoming
 * bootload messages.
 *
 * @param sourceEui64 The EUI64 of the sending node. Ver.: always
 * @param command The incoming command ID Ver.: always
 */
bool emberAfPluginStandaloneBootloaderClientAllowIncomingMessageCallback(EmberEUI64 sourceEui64,
                                                                         uint8_t command);
/** @brief Allow Bootload Launch
 *
 * This function is a callback when the client is being told to launch the
 * standalone bootloader. This is done after authentication has completed
 * successfully.
 *
 * @param sourceEui64 The EUI64 of the node requesting the bootload.
 * Ver.: always
 */
bool emberAfPluginStandaloneBootloaderClientAllowBootloadLaunchCallback(EmberEUI64 sourceEui64);
/** @} END Standalone Bootloader Client Plugin Callbacks */


/** @name Standalone Bootloader Common Plugin Callbacks */
// @{

/** @brief Incoming Message
 *
 * Indicates an Ember Bootload message has been received by the Standalone
 * Bootloader Common plugin.
 *
 * @param longId The sender's EUI64 address Ver.: always
 * @param length The length of the incoming message. Ver.: always
 * @param message The array of bytes for the message. Ver.: always
 */
bool emberAfPluginStandaloneBootloaderCommonIncomingMessageCallback(EmberEUI64 longId,
                                                                    uint8_t length,
                                                                    uint8_t*message);
/** @} END Standalone Bootloader Common Plugin Callbacks */


/** @name Standalone Bootloader Server Plugin Callbacks */
// @{

/** @brief Query Response
 *
 * Allows the application to control whether the plugin can respond to incoming
 * bootload messages.
 *
 * @param queryWasBroadcast Boolean indicating whether the query was broadcast
 * or unicast Ver.: always
 * @param queryData A data structure providing the details about the local
 * device's bootloader. Ver.: always
 */
void emberAfPluginStandaloneBootloaderServerQueryResponseCallback(bool queryWasBroadcast,
                                                                  const EmberAfStandaloneBootloaderQueryResponseData*queryData);
/** @brief Finished
 *
 * Notifies the application when the standalone bootload has completed,
 * successfully or otherwise.
 *
 * @param success Boolean indicating the success or failure of the bootload.
 * Ver.: always
 */
void emberAfPluginStandaloneBootloaderServerFinishedCallback(bool success);
/** @} END Standalone Bootloader Server Plugin Callbacks */


/** @name Tunneling Client Cluster Plugin Callbacks */
// @{

/** @brief Tunnel Opened
 *
 * This function is called by the Tunneling client plugin whenever a tunnel is
 * opened. Clients may open tunnels by sending a Request Tunnel command.
 *
 * @param tunnelIndex The index of the tunnel that has been opened.
 * Ver.: always
 * @param tunnelStatus The status of the request. Ver.: always
 * @param maximumIncomingTransferSize The maximum incoming transfer size of the
 * server. Ver.: always
 */
void emberAfPluginTunnelingClientTunnelOpenedCallback(uint8_t tunnelIndex,
                                                      EmberAfPluginTunnelingClientStatus tunnelStatus,
                                                      uint16_t maximumIncomingTransferSize);
/** @brief Data Received
 *
 * This function is called by the Tunneling client plugin whenever data is
 * received from a server through a tunnel.
 *
 * @param tunnelIndex The index of the tunnel through which the data was
 * received. Ver.: always
 * @param data Buffer containing the raw octets of the data. Ver.: always
 * @param dataLen The length in octets of the data. Ver.: always
 */
void emberAfPluginTunnelingClientDataReceivedCallback(uint8_t tunnelIndex,
                                                      uint8_t *data,
                                                      uint16_t dataLen);
/** @brief Data Error
 *
 * This function is called by the Tunneling client plugin whenever a data error
 * occurs on a tunnel. Errors occur if a device attempts to send data on tunnel
 * that is no longer active or if the tunneling does not belong to the device.
 *
 * @param tunnelIndex The index of the tunnel on which this data error
 * occurred. Ver.: always
 * @param transferDataStatus The error that occurred. Ver.: always
 */
void emberAfPluginTunnelingClientDataErrorCallback(uint8_t tunnelIndex,
                                                   EmberAfTunnelingTransferDataStatus transferDataStatus);
/** @brief Tunnel Closed
 *
 * This function is called by the Tunneling client plugin whenever a server
 * sends a notification that it preemptively closed an inactive tunnel. Servers
 * are not required to notify clients of tunnel closures, so applications
 * cannot rely on this callback being called for all tunnels.
 *
 * @param tunnelIndex The index of the tunnel that has been closed.
 * Ver.: always
 */
void emberAfPluginTunnelingClientTunnelClosedCallback(uint8_t tunnelIndex);
/** @brief Transfer Data Failure
 *
 * This function is called when a TransferData command fails to be sent to the
 * intended destination.
 *
 * @param indexOfDestination The index or destination address of the
 * TransferData command. Ver.: always
 * @param apsFrame The ::EmberApsFrame of the command. Ver.: always
 * @param msgLen The length of the payload sent in the command. Ver.: always
 * @param message The payload that was sent in the command. Ver.: always
 * @param status The non-success status code from the transmission of the
 * command. Ver.: always
 */
void emberAfPluginTunnelingClientTransferDataFailureCallback(uint16_t indexOfDestination,
                                                             EmberApsFrame*apsFrame,
                                                             uint16_t msgLen,
                                                             uint8_t*message,
                                                             EmberStatus status);
/** @} END Tunneling Client Cluster Plugin Callbacks */


/** @name Tunneling Server Cluster Plugin Callbacks */
// @{

/** @brief Is Protocol Supported
 *
 * This function is called by the Tunneling server plugin whenever a Request
 * Tunnel command is received. The application should return true if the
 * protocol is supported and false otherwise.
 *
 * @param protocolId The identifier of the metering communication protocol for
 * which the tunnel is requested. Ver.: always
 * @param manufacturerCode The manufacturer code for manufacturer-defined
 * protocols or 0xFFFF in unused. Ver.: always
 */
bool emberAfPluginTunnelingServerIsProtocolSupportedCallback(uint8_t protocolId,
                                                             uint16_t manufacturerCode);
/** @brief Tunnel Opened
 *
 * This function is called by the Tunneling server plugin whenever a tunnel is
 * opened. Clients may open tunnels by sending a Request Tunnel command.
 *
 * @param tunnelIndex The index to the tunnel table entry that has been opened.
 * Ver.: always
 * @param protocolId The identifier of the metering communication protocol for
 * the tunnel. Ver.: always
 * @param manufacturerCode The manufacturer code for manufacturer-defined
 * protocols or 0xFFFF in unused. Ver.: always
 * @param flowControlSupport true is flow control support is requested or false
 * if it is not. Ver.: always
 * @param maximumIncomingTransferSize The maximum incoming transfer size of the
 * client. Ver.: always
 */
void emberAfPluginTunnelingServerTunnelOpenedCallback(uint16_t tunnelIndex,
                                                      uint8_t protocolId,
                                                      uint16_t manufacturerCode,
                                                      bool flowControlSupport,
                                                      uint16_t maximumIncomingTransferSize);
/** @brief Data Received
 *
 * This function is called by the Tunneling server plugin whenever data is
 * received from a client through a tunnel.
 *
 * @param tunnelIndex The identifier of the tunnel through which the data was
 * received. Ver.: always
 * @param data Buffer containing the raw octets of the data. Ver.: always
 * @param dataLen The length in octets of the data. Ver.: always
 */
void emberAfPluginTunnelingServerDataReceivedCallback(uint16_t tunnelIndex,
                                                      uint8_t *data,
                                                      uint16_t dataLen);
/** @brief Data Error
 *
 * This function is called by the Tunneling server plugin whenever a data error
 * occurs on a tunnel. Errors occur if a device attempts to send data on tunnel
 * that is no longer active or if the tunneling does not belong to the device.
 *
 * @param tunnelIndex The identifier of the tunnel on which this data error
 * occurred. Ver.: always
 * @param transferDataStatus The error that occurred. Ver.: always
 */
void emberAfPluginTunnelingServerDataErrorCallback(uint16_t tunnelIndex,
                                                   EmberAfTunnelingTransferDataStatus transferDataStatus);
/** @brief Tunnel Closed
 *
 * This function is called by the Tunneling server plugin whenever a tunnel is
 * closed. Clients may close tunnels by sending a Close Tunnel command. The
 * server can preemptively close inactive tunnels after a timeout.
 *
 * @param tunnelIndex The identifier of the tunnel that has been closed.
 * Ver.: always
 * @param clientInitiated true if the client initiated the closing of the
 * tunnel or false if the server closed the tunnel due to inactivity.
 * Ver.: always
 */
void emberAfPluginTunnelingServerTunnelClosedCallback(uint16_t tunnelIndex,
                                                      bool clientInitiated);
/** @} END Tunneling Server Cluster Plugin Callbacks */


/** @name Update TC Link Key Plugin Callbacks */
// @{

/** @brief Status
 *
 * This callback is fired when the Update Link Key exchange process is updated
 * with a status from the stack. Implementations should return true if they are
 * done receiving updates from the stack.
 *
 * @param keyStatus An ::EmberKeyStatus value describing the success or failure
 * of the key exchange process. Ver.: always
 */
bool emberAfPluginUpdateTcLinkKeyStatusCallback(EmberKeyStatus keyStatus);
/** @} END Update TC Link Key Plugin Callbacks */


/** @name ZLL Commissioning Plugin Callbacks */
// @{

/** @brief Initial Security State
 *
 * This function is called by the ZLL Commissioning plugin to determine the
 * initial security state to be used by the device. The application must
 * populate the ::EmberZllInitialSecurityState structure with a configuration
 * appropriate for the network being formed, joined, or started. Once the
 * device forms, joins, or starts a network, the same security configuration
 * will remain in place until the device leaves the network.
 *
 * @param securityState The security configuration to be populated by the
 * application and ultimately set in the stack. Ver.: always
 */
void emberAfPluginZllCommissioningInitialSecurityStateCallback(EmberZllInitialSecurityState *securityState);
/** @brief Touch Link Complete
 *
 * This function is called by the ZLL Commissioning plugin when touch linking
 * completes.
 *
 * @param networkInfo The ZigBee and ZLL-specific information about the network
 * and target. Ver.: always
 * @param deviceInformationRecordCount The number of sub-device information
 * records for the target. Ver.: always
 * @param deviceInformationRecordList The list of sub-device information
 * records for the target. Ver.: always
 */
void emberAfPluginZllCommissioningTouchLinkCompleteCallback(const EmberZllNetwork *networkInfo,
                                                            uint8_t deviceInformationRecordCount,
                                                            const EmberZllDeviceInfoRecord *deviceInformationRecordList);
/** @brief Touch Link Failed
 *
 * This function is called by the ZLL Commissioning plugin if touch linking
 * fails.
 *
 * @param status The reason the touch link failed. Ver.: always
 */
void emberAfPluginZllCommissioningTouchLinkFailedCallback(EmberAfZllCommissioningStatus status);
/** @brief Group Identifier Count
 *
 * This function is called by the ZLL Commissioning plugin to determine the
 * number of group identifiers in use by a specific endpoint on the device. The
 * total number of group identifiers on the device, which are shared by all
 * endpoints, is defined by ::EMBER_ZLL_GROUP_ADDRESSES.
 *
 * @param endpoint The endpoint for which the group identifier count is
 * requested. Ver.: always
 */
uint8_t emberAfPluginZllCommissioningGroupIdentifierCountCallback(uint8_t endpoint);
/** @brief Group Identifier
 *
 * This function is called by the ZLL Commissioning plugin to obtain
 * information about the group identifiers in use by a specific endpoint on the
 * device. The application should populate the record with information about
 * the group identifier and return true. If no information is available for the
 * given endpoint and index, the application should return false.
 *
 * @param endpoint The endpoint for which the group identifier is requested.
 * Ver.: always
 * @param index The index of the group on the endpoint. Ver.: always
 * @param record The group information record. Ver.: always
 */
bool emberAfPluginZllCommissioningGroupIdentifierCallback(uint8_t endpoint,
                                                          uint8_t index,
                                                          EmberAfPluginZllCommissioningGroupInformationRecord *record);
/** @brief Endpoint Information Count
 *
 * This function is called by the ZLL Commissioning plugin to determine the
 * number of remote endpoints controlled by a specific endpoint on the local
 * device.
 *
 * @param endpoint The local endpoint for which the remote endpoint information
 * count is requested. Ver.: always
 */
uint8_t emberAfPluginZllCommissioningEndpointInformationCountCallback(uint8_t endpoint);
/** @brief Endpoint Information
 *
 * This function is called by the ZLL Commissioning plugin to obtain
 * information about the remote endpoints controlled by a specific endpoint on
 * the local device. The application should populate the record with
 * information about the remote endpoint and return true. If no information is
 * available for the given endpoint and index, the application should return
 * false.
 *
 * @param endpoint The local endpoint for which the remote endpoint information
 * is requested. Ver.: always
 * @param index The index of the remote endpoint information on the local
 * endpoint. Ver.: always
 * @param record The endpoint information record. Ver.: always
 */
bool emberAfPluginZllCommissioningEndpointInformationCallback(uint8_t endpoint,
                                                              uint8_t index,
                                                              EmberAfPluginZllCommissioningEndpointInformationRecord *record);
/** @brief Identify
 *
 * This function is called by the ZLL Commissioning plugin to notify the
 * application that it should take an action to identify itself. This typically
 * occurs when an Identify Request is received via inter-PAN messaging.
 *
 * @param durationS If the duration is zero, the device should exit identify
 * mode. If the duration is 0xFFFF, the device should remain in identify mode
 * for the default time. Otherwise, the duration specifies the length of time
 * in seconds that the device should remain in identify mode. Ver.: always
 */
void emberAfPluginZllCommissioningIdentifyCallback(uint16_t durationS);
/** @brief Reset To Factory New
 *
 * This function is called by the ZLL Commissioning plugin when a request to
 * reset to factory new is received. The plugin will leave the network, reset
 * attributes managed by the framework to their default values, and clear the
 * group and scene tables. The application should preform any other necessary
 * reset-related operations in this callback, including resetting any
 * externally-stored attributes.
 *
 */
void emberAfPluginZllCommissioningResetToFactoryNewCallback(void);
/** @brief Join
 *
 * This callback is called by the ZLL Commissioning plugin when a joinable
 * network has been found. If the application returns true, the plugin will
 * attempt to join the network. Otherwise, the plugin will ignore the network
 * and continue searching. Applications can use this callback to implement a
 * network blacklist. Note that this callback is not called during touch
 * linking.
 *
 * @param networkFound   Ver.: always
 * @param lqi   Ver.: always
 * @param rssi   Ver.: always
 */
bool emberAfPluginZllCommissioningJoinCallback(EmberZigbeeNetwork *networkFound,
                                               uint8_t lqi,
                                               int8_t rssi);
/** @} END ZLL Commissioning Plugin Callbacks */


/** @name ZLL On/Off Server Cluster Enhancements Plugin Callbacks */
// @{

/** @brief Off With Effect
 *
 * This callback is called by the ZLL On/Off Server plugin whenever an
 * OffWithEffect command is received. The application should implement the
 * effect and variant requested in the command and return
 * ::EMBER_ZCL_STATUS_SUCCESS if successful or an appropriate error status
 * otherwise.
 *
 * @param endpoint   Ver.: always
 * @param effectId   Ver.: always
 * @param effectVariant   Ver.: always
 */
EmberAfStatus emberAfPluginZllOnOffServerOffWithEffectCallback(uint8_t endpoint,
                                                               uint8_t effectId,
                                                               uint8_t effectVariant);
/** @} END ZLL On/Off Server Cluster Enhancements Plugin Callbacks */


/** @name Connection Manager Plugin Callbacks */
// @{

/** @brief Network join finished
 *
 * This callback is fired when the Connection Manager plugin is finished with
 * the forming or joining process. The result of the operation will be returned
 * in the status parameter.
 *
 * @param status   Ver.: always
 */
void emberAfPluginConnectionManagerFinishedCallback(EmberStatus status);
/** @brief Begin searching for network to join
 *
 * This function is called by the Connection Manager Plugin when it starts 
 * to search a new network.  It is normally used to trigger a UI event to
 * notify the user that the device is currently searching for a network.
 */
void emberAfPluginConnectionManagerStartNetworkSearchCallback(void);
/** @brief Leave the currently joined network
 *
 * This function is called by the Connection Manager Plugin when the device
 * is about to leave the network.  It is normally used to trigger a UI event to 
 * notify the user of a network leave.
 */
void emberAfPluginConnectionManagerLeaveNetworkCallback(void);
/** @} END Connection Manager Plugin Callbacks */


/** @name Idle/Sleep Plugin Callbacks */
// @{

/** @brief Ok To Sleep
 *
 * This function is called by the Idle/Sleep plugin before sleeping. It is
 * called with interrupts disabled. The application should return true if the
 * device may sleep or false otherwise.
 *
 * @param durationMs The maximum duration in milliseconds that the device will
 * sleep. Ver.: always
 */
bool emberAfPluginIdleSleepOkToSleepCallback(uint32_t durationMs);
/** @brief Wake Up
 *
 * This function is called by the Idle/Sleep plugin after sleeping.
 *
 * @param durationMs The duration in milliseconds that the device slept.
 * Ver.: always
 */
void emberAfPluginIdleSleepWakeUpCallback(uint32_t durationMs);
/** @brief Ok To Idle
 *
 * This function is called by the Idle/Sleep plugin before idling. It is called
 * with interrupts disabled. The application should return true if the device
 * may idle or false otherwise.
 *
 */
bool emberAfPluginIdleSleepOkToIdleCallback(void);
/** @brief Active
 *
 * This function is called by the Idle/Sleep plugin after idling.
 *
 */
void emberAfPluginIdleSleepActiveCallback(void);
/** @} END Idle/Sleep Plugin Callbacks */


/** @name Low Voltage Shutdown Plugin Callbacks */
// @{

/** @brief Ok To Shutdown
 *
 * This function is called by the Low Voltage Shutdown plugin after the low
 * voltage threshold has been detected but before shutting down the chip (until
 * a full power-on reset is triggered). The application should return true if
 * the device may shutdown or false otherwise. Note that this callback is not
 * the proper place to put logic to be performed just prior to shutdown; that
 * would be the Pre Shutdown Callback. If callback returns false, shutdown
 * check will be performed again in
 * EMBER_AF_PLUGIN_LOW_VOLTAGE_SHUTDOWN_POSTPONE_DURATION_MS milliseconds.
 *
 * @param shutdownVoltage The voltage (in mV) read from VDD at shutdown time,
 * which can be used to determine the risk in doing any further activities
 * prior to shutdown. Ver.: always
 */
bool emberAfPluginLowVoltageShutdownOkToShutdownCallback(uint16_t shutdownVoltage);
/** @brief Pre Shutdown
 *
 * This function is called by the Low Voltage Shutdown plugin just prior to
 * shutting down, allowing the application to do any last-minute clean-up
 * before the chip goes offline until next reset. (Can't prevent shutdown from
 * this context; use Ok To Shutdown callback for that instead.)
 *
 * @param shutdownVoltage The voltage (in mV) read from VDD at shutdown time,
 * which can be used to determine the risk in doing any further activities
 * prior to shutdown. Ver.: always
 */
void emberAfPluginLowVoltageShutdownPreShutdownCallback(uint16_t shutdownVoltage);
/** @} END Low Voltage Shutdown Plugin Callbacks */


/** @name Battery Monitor Plugin Callbacks */
// @{

/** @brief Data Ready
 *
 * This function is called whenever the battery monitor has generated a new
 * valid battery level
 *
 * @param batteryVoltageMilliV The battery voltage, in milli Volts  Ver.: always
 */
void emberAfPluginBatteryMonitorDataReadyCallback(uint16_t batteryVoltageMilliV);
/** @} END Battery Monitor Plugin Callbacks */


/** @name Button Interface Plugin Callbacks */
// @{

/** @brief Button0 Pressed Short
 *
 * This function returns the number of times a button was short pressed.
 *
 * @param timePressedMs Time (in ms) button 0 was pressed  Ver.: always
 */
void emberAfPluginButtonInterfaceButton0PressedShortCallback(uint16_t timePressedMs);
/** @brief Button1 Pressed Short
 *
 * This function returns the number of times a button was short pressed.
 *
 * @param timePressedMs Time (in ms) button 1 was pressed  Ver.: always
 */
void emberAfPluginButtonInterfaceButton1PressedShortCallback(uint16_t timePressedMs);
/** @brief Button0 Pressed Long
 *
 * This function returns the number of times a button was short pressed.
 *
 * @param timePressedMs Amount of time button 0 was pressed.  Ver.: always
 * @param pressedAtReset Was the button pressed at startup.  Ver.: always
 */
void emberAfPluginButtonInterfaceButton0PressedLongCallback(uint16_t timePressedMs,
                                                            bool pressedAtReset);
/** @brief Button1 Pressed Long
 *
 * This function returns the number of times a button was short pressed.
 *
 * @param timePressedMs Amount of time button 1 was pressed.  Ver.: always
 * @param pressedAtReset Was the button pressed at startup.  Ver.: always
 */
void emberAfPluginButtonInterfaceButton1PressedLongCallback(uint16_t timePressedMs,
                                                            bool pressedAtReset);
/** @brief Button0 Pressing
 *
 * This function is periodically called when button 0 is being pressed.
 *
 */
void emberAfPluginButtonInterfaceButton0PressingCallback(void);
/** @brief Button1 Pressing
 *
 * This function is periodically called when button 1 is being pressed.
 *
 */
void emberAfPluginButtonInterfaceButton1PressingCallback(void);
/** @brief Button0 Low
 *
 * This function is called when the GPIO tied to button zero goes low
 *
 */
void emberAfPluginButtonInterfaceButton0LowCallback(void);
/** @brief Button0 High
 *
 * This function is called when the GPIO tied to button zero goes high
 *
 */
void emberAfPluginButtonInterfaceButton0HighCallback(void);
/** @brief Button1 Low
 *
 * This function is called when the GPIO tied to button one goes low
 *
 */
void emberAfPluginButtonInterfaceButton1LowCallback(void);
/** @brief Button1 High
 *
 * This function is called when the GPIO tied to button one goes high
 *
 */
void emberAfPluginButtonInterfaceButton1HighCallback(void);
/** @} END Button Interface Plugin Callbacks */


/** @name GPIO Sensor Interface Plugin Callbacks */
// @{

/** @brief State Changed
 *
 * This function is called whenever the gpio sensor detects a change in state
 *
 * @param newSensorState The new state of the sensor based alarm
 * (EMBER_AF_PLUGIN_GPIO_SENSOR_ACTIVE or
 * EMBER_AF_PLUGIN_GPIO_SENSOR_NOT_ACTIVE)  Ver.: always
 */
void emberAfPluginGpioSensorStateChangedCallback(uint8_t newSensorState);
/** @} END GPIO Sensor Interface Plugin Callbacks */


/** @name SB1 Gesture Sensor Plugin Callbacks */
// @{

/** @brief Gesture Received
 *
 * This function is called whenever the sb1 receives a gesture
 *
 * @param gestureReceived The (enumerated) gesture received  Ver.: always
 * @param switchNumber The switch that received the gesture  Ver.: always
 */
void emberAfPluginSb1GestureSensorGestureReceivedCallback(uint8_t gestureReceived,
                                                          uint8_t switchNumber);
/** @} END SB1 Gesture Sensor Plugin Callbacks */


/** @name Tamper Switch Interface Plugin Callbacks */
// @{

/** @brief Tamper Active
 *
 * This function is called whenever the tamper switch detects that it has
 * entered the enclosure, thus activating tamper monitoring.
 *
 */
void emberAfPluginTamperSwitchTamperActiveCallback(void);
/** @brief Tamper Alarm
 *
 * This function is called when the plugin detects that the enclosure has been
 * opened.
 *
 */
void emberAfPluginTamperSwitchTamperAlarmCallback(void);
/** @} END Tamper Switch Interface Plugin Callbacks */


/** @} END addtogroup */
#endif // __EMBER_AF_CALLBACK_PROTOTYPES__
